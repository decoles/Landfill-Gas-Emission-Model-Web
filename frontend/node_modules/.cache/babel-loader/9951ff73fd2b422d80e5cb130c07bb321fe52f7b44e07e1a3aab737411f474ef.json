{"ast":null,"code":"import { createContext, useContext, useMemo, useEffect, useLayoutEffect as useLayoutEffect$1, useRef, useState, useCallback, memo, forwardRef, useImperativeHandle } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nfunction getColSpan(column, lastFrozenColumnIndex, args) {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (Number.isInteger(colSpan) && colSpan > 1 && (!column.frozen || column.idx + colSpan - 1 <= lastFrozenColumnIndex)) {\n    return colSpan;\n  }\n  return undefined;\n}\nfunction scrollIntoView(element) {\n  element?.scrollIntoView({\n    inline: 'nearest',\n    block: 'nearest'\n  });\n}\nfunction createCellEvent(event) {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n  return cellEvent;\n}\nconst nonInputKeys = new Set(['Unidentified', 'Alt', 'AltGraph', 'CapsLock', 'Control', 'Fn', 'FnLock', 'Meta', 'NumLock', 'ScrollLock', 'Shift', 'Tab', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'End', 'Home', 'PageDown', 'PageUp', 'Insert', 'ContextMenu', 'Escape', 'Pause', 'Play', 'PrintScreen', 'F1', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12']);\nfunction isCtrlKeyHeldDown(e) {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\nfunction isDefaultCellInput(event) {\n  return !nonInputKeys.has(event.key);\n}\nfunction onEditorNavigation({\n  key,\n  target\n}) {\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select').length === 1;\n  }\n  return false;\n}\nconst measuringCellClassname = \"m1l09lto7-0-0-beta-36\";\nfunction renderMeasuringCells(viewportColumns) {\n  return viewportColumns.map(({\n    key,\n    idx,\n    minWidth,\n    maxWidth\n  }) => /*#__PURE__*/jsx(\"div\", {\n    className: measuringCellClassname,\n    style: {\n      gridColumnStart: idx + 1,\n      minWidth,\n      maxWidth\n    },\n    \"data-measuring-cell-key\": key\n  }, key));\n}\nfunction isSelectedCellEditable({\n  selectedPosition,\n  columns,\n  rows\n}) {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditable(column, row);\n}\nfunction isCellEditable(column, row) {\n  return column.renderEditCell != null && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\nfunction getSelectedCellColSpan({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n  }\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n  }\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n  return undefined;\n}\nfunction getNextSelectedCellPosition({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: {\n    idx: currentIdx\n  },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}) {\n  let {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  } = nextPosition;\n  const setColSpan = moveRight => {\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n  return {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  };\n}\nfunction canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: {\n    rowIdx,\n    idx\n  },\n  shiftKey\n}) {\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\nconst cell = \"c1wupbe7-0-0-beta-36\";\nconst cellClassname = `rdg-cell ${cell}`;\nconst cellFrozen = \"cd0kgiy7-0-0-beta-36\";\nconst cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\nconst cellFrozenLast = \"c1730fa47-0-0-beta-36\";\nconst cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\nfunction getRowStyle(rowIdx, height) {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    };\n  }\n  return {\n    '--rdg-grid-row-start': rowIdx\n  };\n}\nfunction getCellStyle(column, colSpan) {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\nfunction getCellClassname(column, ...extraClasses) {\n  return clsx(cellClassname, ...extraClasses, column.frozen && cellFrozenClassname, column.isLastFrozenColumn && cellFrozenLastClassname);\n}\nconst {\n  min,\n  max,\n  round,\n  floor,\n  sign,\n  abs\n} = Math;\nfunction assertIsValidKeyGetter(keyGetter) {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\nfunction clampColumnWidth(width, {\n  minWidth,\n  maxWidth\n}) {\n  width = max(width, minWidth);\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n  return width;\n}\nconst checkboxLabel = \"c1hs68w07-0-0-beta-36\";\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\nconst checkboxInput = \"cojpd0n7-0-0-beta-36\";\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\nconst checkbox = \"cwsfieb7-0-0-beta-36\";\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\nconst checkboxLabelDisabled = \"c1fgadbl7-0-0-beta-36\";\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\nfunction renderCheckbox({\n  onChange,\n  ...props\n}) {\n  function handleChange(e) {\n    onChange(e.target.checked, e.nativeEvent.shiftKey);\n  }\n  return /*#__PURE__*/jsxs(\"label\", {\n    className: clsx(checkboxLabelClassname, props.disabled && checkboxLabelDisabledClassname),\n    children: [/*#__PURE__*/jsx(\"input\", {\n      type: \"checkbox\",\n      ...props,\n      className: checkboxInputClassname,\n      onChange: handleChange\n    }), /*#__PURE__*/jsx(\"div\", {\n      className: checkboxClassname\n    })]\n  });\n}\nconst groupCellContent = \"g1w3c5217-0-0-beta-36\";\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\nconst caret = \"cm5tyhw7-0-0-beta-36\";\nconst caretClassname = `rdg-caret ${caret}`;\nfunction renderToggleGroup(props) {\n  return /*#__PURE__*/jsx(ToggleGroup, {\n    ...props\n  });\n}\nfunction ToggleGroup({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}) {\n  function handleKeyDown({\n    key\n  }) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n  return /*#__PURE__*/jsxs(\"span\", {\n    className: groupCellContentClassname,\n    tabIndex: tabIndex,\n    onKeyDown: handleKeyDown,\n    children: [groupKey, /*#__PURE__*/jsx(\"svg\", {\n      viewBox: \"0 0 14 8\",\n      width: \"14\",\n      height: \"8\",\n      className: caretClassname,\n      \"aria-hidden\": true,\n      children: /*#__PURE__*/jsx(\"path\", {\n        d: d\n      })\n    })]\n  });\n}\nfunction renderValue(props) {\n  try {\n    return props.row[props.column.key];\n  } catch {\n    return null;\n  }\n}\nconst DataGridDefaultRenderersContext = /*#__PURE__*/createContext(undefined);\nconst DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\nfunction useDefaultRenderers() {\n  return useContext(DataGridDefaultRenderersContext);\n}\nfunction SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}) {\n  const renderCheckbox = useDefaultRenderers().renderCheckbox;\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\nconst RowSelectionContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionProvider = RowSelectionContext.Provider;\nconst RowSelectionChangeContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\nfunction useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\nconst SELECT_COLUMN_KEY = 'select-row';\nfunction HeaderRenderer(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select All\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: checked => {\n      onRowSelectionChange({\n        type: 'HEADER',\n        checked\n      });\n    }\n  });\n}\nfunction SelectFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: (checked, isShiftClick) => {\n      onRowSelectionChange({\n        type: 'ROW',\n        row: props.row,\n        checked,\n        isShiftClick\n      });\n    }\n  });\n}\nfunction SelectGroupFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select Group\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: checked => {\n      onRowSelectionChange({\n        type: 'ROW',\n        row: props.row,\n        checked,\n        isShiftClick: false\n      });\n    }\n  });\n}\nconst SelectColumn = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return /*#__PURE__*/jsx(HeaderRenderer, {\n      ...props\n    });\n  },\n  renderCell(props) {\n    return /*#__PURE__*/jsx(SelectFormatter, {\n      ...props\n    });\n  },\n  renderGroupCell(props) {\n    return /*#__PURE__*/jsx(SelectGroupFormatter, {\n      ...props\n    });\n  }\n};\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\nfunction useCalculatedColumns({\n  rawColumns,\n  measuredColumnWidths,\n  resizedColumnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  enableVirtualization\n}) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex\n  } = useMemo(() => {\n    let lastFrozenColumnIndex = -1;\n    const columns = rawColumns.map(rawColumn => {\n      const frozen = rawColumn.frozen ?? false;\n      const column = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        renderCell: rawColumn.renderCell ?? defaultFormatter\n      };\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n      return column;\n    });\n    columns.sort(({\n      key: aKey,\n      frozen: frozenA\n    }, {\n      key: bKey,\n      frozen: frozenB\n    }) => {\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n      return 0;\n    });\n    const colSpanColumns = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex\n    };\n  }, [rawColumns, defaultWidth, defaultMinWidth, defaultMaxWidth, defaultFormatter, defaultResizable, defaultSortable]);\n  const {\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth,\n    columnMetrics\n  } = useMemo(() => {\n    const columnMetrics = new Map();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns = [];\n    for (const column of columns) {\n      let width = resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, {\n        width,\n        left\n      });\n      left += width;\n    }\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex]);\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n    const layoutCssVars = {};\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column).left}px`;\n    }\n    return {\n      templateColumns,\n      layoutCssVars,\n      totalFrozenColumnWidth,\n      columnMetrics\n    };\n  }, [measuredColumnWidths, resizedColumnWidths, columns, lastFrozenColumnIndex]);\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo(() => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleStartIdx]);\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleEndIdx]);\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columnMetrics, columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth, enableVirtualization]);\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\nconst useLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect$1;\nfunction useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex = columns.length === viewportColumns.length;\n  const ignorePreviouslyMeasuredColumns = columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure = [];\n  for (const {\n    key,\n    idx,\n    width\n  } of viewportColumns) {\n    if (typeof width === 'string' && (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) && !resizedColumnWidths.has(key)) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n  function updateMeasuredWidths(columnsToMeasure) {\n    if (columnsToMeasure.length === 0) return;\n    setMeasuredColumnWidths(measuredColumnWidths => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n  function handleColumnResize(column, nextWidth) {\n    const {\n      key: resizingKey\n    } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure = [];\n    for (const {\n      key,\n      idx,\n      width\n    } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n    gridRef.current.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth = typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey);\n    flushSync(() => {\n      setResizedColumnWidths(resizedColumnWidths => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  };\n}\nfunction measureColumnWidth(gridRef, key) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\nfunction useGridDimensions() {\n  const gridRef = useRef(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  useLayoutEffect(() => {\n    const {\n      ResizeObserver\n    } = window;\n    if (ResizeObserver == null) return;\n    const {\n      clientWidth,\n      clientHeight,\n      offsetWidth,\n      offsetHeight\n    } = gridRef.current;\n    const {\n      width,\n      height\n    } = gridRef.current.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    const resizeObserver = new ResizeObserver(entries => {\n      const size = entries[0].contentBoxSize[0];\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n      });\n    });\n    resizeObserver.observe(gridRef.current);\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n  return [gridRef, inlineSize, blockSize];\n}\nfunction useLatestFunc(fn) {\n  const ref = useRef(fn);\n  useEffect(() => {\n    ref.current = fn;\n  });\n  const callbackFn = useCallback((...args) => {\n    ref.current(...args);\n  }, []);\n  return fn ? callbackFn : fn;\n}\nfunction useRovingTabIndex(isSelected) {\n  const [isChildFocused, setIsChildFocused] = useState(false);\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n  function onFocus(event) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n  const isFocusable = isSelected && !isChildFocused;\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\nfunction useViewportColumns({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}) {\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n    let startIdx = colOverscanStartIdx;\n    const updateStartIdx = (colIdx, colSpan) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n        type: 'HEADER'\n      }))) {\n        break;\n      }\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n          type: 'ROW',\n          row\n        }))) {\n          break;\n        }\n      }\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n            type: 'SUMMARY',\n            row\n          }))) {\n            break;\n          }\n        }\n      }\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n            type: 'SUMMARY',\n            row\n          }))) {\n            break;\n          }\n        }\n      }\n    }\n    return startIdx;\n  }, [rowOverscanStartIdx, rowOverscanEndIdx, rows, topSummaryRows, bottomSummaryRows, colOverscanStartIdx, lastFrozenColumnIndex, colSpanColumns]);\n  return useMemo(() => {\n    const viewportColumns = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\nfunction useViewportRows({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}) {\n  const {\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: rowIdx => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: offset => floor(offset / rowHeight)\n      };\n    }\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    const rowPositions = rows.map(row => {\n      const currentRowHeight = rowHeight(row);\n      const position = {\n        top: totalRowHeight,\n        height: currentRowHeight\n      };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n    const validateRowIdx = rowIdx => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: rowIdx => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: rowIdx => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n          if (currentOffset === offset) return middle;\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\nconst cellDragHandle = \"cadd3bp7-0-0-beta-36\";\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\nfunction DragHandle({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}) {\n  function handleMouseDown(event) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n    function onMouseOver(event) {\n      if (event.buttons !== 1) onMouseUp();\n    }\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n    const {\n      rowIdx\n    } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n  function handleDoubleClick(event) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n  function updateRows(startRowIdx, endRowIdx) {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({\n        rowIdx: i,\n        idx\n      })) {\n        const updatedRow = onFill({\n          columnKey: column.key,\n          sourceRow,\n          targetRow: rows[i]\n        });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, {\n        indexes,\n        column\n      });\n    }\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    className: cellDragHandleClassname,\n    onMouseDown: handleMouseDown,\n    onDoubleClick: handleDoubleClick\n  });\n}\nconst cellEditing = \"c1tngyp17-0-0-beta-36\";\nfunction EditCell({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}) {\n  const frameRequestRef = useRef();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n    addEventListener('mousedown', onWindowCaptureMouseDown, {\n      capture: true\n    });\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, {\n        capture: true\n      });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current);\n  }\n  function handleKeyDown(event) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown({\n        mode: 'EDIT',\n        row,\n        column,\n        rowIdx,\n        navigate() {\n          navigate(event);\n        },\n        onClose\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (event.key === 'Escape') {\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n  function onEditorRowChange(row, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, 'rdg-editor-container', typeof cellClass === 'function' ? cellClass(row) : cellClass, !column.editorOptions?.displayCellContent && cellEditing);\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": true,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onKeyDown: handleKeyDown,\n    onMouseDownCapture: cancelFrameRequest,\n    children: column.renderEditCell != null && /*#__PURE__*/jsxs(Fragment, {\n      children: [column.renderEditCell({\n        column,\n        row,\n        onRowChange: onEditorRowChange,\n        onClose\n      }), column.editorOptions?.displayCellContent && column.renderCell({\n        column,\n        row,\n        isCellEditable: true,\n        tabIndex: -1,\n        onRowChange: onEditorRowChange\n      })]\n    })\n  });\n}\nconst headerSortCell = \"hizp7y17-0-0-beta-36\";\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\nconst headerSortName = \"h14cojrm7-0-0-beta-36\";\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\nfunction renderHeaderCell({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  tabIndex\n}) {\n  if (!column.sortable) return column.name;\n  return /*#__PURE__*/jsx(SortableHeaderCell, {\n    onSort: onSort,\n    sortDirection: sortDirection,\n    priority: priority,\n    tabIndex: tabIndex,\n    children: column.name\n  });\n}\nfunction SortableHeaderCell({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  tabIndex\n}) {\n  const renderSortStatus = useDefaultRenderers().renderSortStatus;\n  function handleKeyDown(event) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n  function handleClick(event) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n  return /*#__PURE__*/jsxs(\"span\", {\n    tabIndex: tabIndex,\n    className: headerSortCellClassname,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    children: [/*#__PURE__*/jsx(\"span\", {\n      className: headerSortNameClassname,\n      children: children\n    }), /*#__PURE__*/jsx(\"span\", {\n      children: renderSortStatus({\n        sortDirection,\n        priority\n      })\n    })]\n  });\n}\nconst cellResizable = \"celq7o97-0-0-beta-36\";\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\nfunction HeaderCell({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}) {\n  const isRtl = direction === 'rtl';\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex(sort => sort.columnKey === column.key);\n  const sortColumn = sortIndex !== undefined && sortIndex > -1 ? sortColumns[sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns.length > 1 ? sortIndex + 1 : undefined;\n  const ariaSort = sortDirection && !priority ? sortDirection === 'ASC' ? 'ascending' : 'descending' : undefined;\n  const className = getCellClassname(column, column.headerCellClass, column.resizable && cellResizableClassname);\n  const renderHeaderCell$1 = column.renderHeaderCell ?? renderHeaderCell;\n  function onPointerDown(event) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n    const {\n      currentTarget,\n      pointerId\n    } = event;\n    const {\n      right,\n      left\n    } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n    if (offset > 11) {\n      return;\n    }\n    function onPointerMove(event) {\n      event.preventDefault();\n      const {\n        right,\n        left\n      } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n  function onSort(ctrlClick) {\n    if (onSortColumnsChange == null) return;\n    const {\n      sortDescendingFirst\n    } = column;\n    if (sortColumn === undefined) {\n      const nextSort = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn;\n      if (sortDescendingFirst === true && sortDirection === 'DESC' || sortDescendingFirst !== true && sortDirection === 'ASC') {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns];\n        if (nextSortColumn) {\n          nextSortColumns[sortIndex] = nextSortColumn;\n        } else {\n          nextSortColumns.splice(sortIndex, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n  function onClick() {\n    selectCell(column.idx);\n  }\n  function onDoubleClick(event) {\n    const {\n      right,\n      left\n    } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n    if (offset > 11) {\n      return;\n    }\n    onColumnResize(column, 'max-content');\n  }\n  function handleFocus(event) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      selectCell(0);\n    }\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"columnheader\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    \"aria-sort\": ariaSort,\n    \"aria-colspan\": colSpan,\n    tabIndex: shouldFocusGrid ? 0 : tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onFocus: handleFocus,\n    onClick: onClick,\n    onDoubleClick: column.resizable ? onDoubleClick : undefined,\n    onPointerDown: column.resizable ? onPointerDown : undefined,\n    children: renderHeaderCell$1({\n      column,\n      sortDirection,\n      priority,\n      onSort,\n      tabIndex: childTabIndex\n    })\n  });\n}\nconst row = \"r1otpg647-0-0-beta-36\";\nconst rowClassname = `rdg-row ${row}`;\nconst rowSelected = \"rel5gk27-0-0-beta-36\";\nconst rowSelectedClassname = 'rdg-row-selected';\nconst rowSelectedWithFrozenCell = \"r1qymf1z7-0-0-beta-36\";\nconst headerRow = \"h197vzie7-0-0-beta-36\";\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\nfunction HeaderRow({\n  columns,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    cells.push( /*#__PURE__*/jsx(HeaderCell, {\n      column: column,\n      colSpan: colSpan,\n      isCellSelected: selectedCellIdx === column.idx,\n      onColumnResize: onColumnResize,\n      onSortColumnsChange: onSortColumnsChange,\n      sortColumns: sortColumns,\n      selectCell: selectCell,\n      shouldFocusGrid: shouldFocusGrid && index === 0,\n      direction: direction\n    }, column.key));\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": 1,\n    className: clsx(headerRowClassname, selectedCellIdx === -1 && rowSelectedClassname),\n    style: getRowStyle(1),\n    children: cells\n  });\n}\nconst HeaderRow$1 = /*#__PURE__*/memo(HeaderRow);\nconst cellCopied = \"ccpfvsn7-0-0-beta-36\";\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\nconst cellDraggedOver = \"c1bmg16t7-0-0-beta-36\";\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\nfunction Cell({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  dragHandle,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}) {\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, typeof cellClass === 'function' ? cellClass(row) : cellClass, isCopied && cellCopiedClassname, isDraggedOver && cellDraggedOverClassname);\n  const isEditable = isCellEditable(column, row);\n  function selectCellWrapper(openEditor) {\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    }, openEditor);\n  }\n  function handleClick(event) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n  function handleContextMenu(event) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n  function handleDoubleClick(event) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n  function handleRowChange(newRow) {\n    onRowChange(column, newRow);\n  }\n  return /*#__PURE__*/jsxs(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    \"aria-colspan\": colSpan,\n    \"aria-readonly\": !isEditable || undefined,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: handleClick,\n    onDoubleClick: handleDoubleClick,\n    onContextMenu: handleContextMenu,\n    onFocus: onFocus,\n    ...props,\n    children: [column.renderCell({\n      column,\n      row,\n      isCellEditable: isEditable,\n      tabIndex: childTabIndex,\n      onRowChange: handleRowChange\n    }), dragHandle]\n  });\n}\nconst Cell$1 = /*#__PURE__*/memo(Cell);\nfunction Row({\n  className,\n  rowIdx,\n  gridRowStart,\n  height,\n  selectedCellIdx,\n  isRowSelected,\n  copiedCellIdx,\n  draggedOverCellIdx,\n  lastFrozenColumnIndex,\n  row,\n  viewportColumns,\n  selectedCellEditor,\n  selectedCellDragHandle,\n  onCellClick,\n  onCellDoubleClick,\n  onCellContextMenu,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  onRowChange,\n  selectCell,\n  ...props\n}, ref) {\n  const handleRowChange = useLatestFunc((column, newRow) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n  function handleDragEnter(event) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n  className = clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, rowClass?.(row, rowIdx), className, selectedCellIdx === -1 && rowSelectedClassname);\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const {\n      idx\n    } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    const isCellSelected = selectedCellIdx === idx;\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push( /*#__PURE__*/jsx(Cell$1, {\n        column: column,\n        colSpan: colSpan,\n        row: row,\n        rowIdx: rowIdx,\n        isCopied: copiedCellIdx === idx,\n        isDraggedOver: draggedOverCellIdx === idx,\n        isCellSelected: isCellSelected,\n        dragHandle: isCellSelected ? selectedCellDragHandle : undefined,\n        onClick: onCellClick,\n        onDoubleClick: onCellDoubleClick,\n        onContextMenu: onCellContextMenu,\n        onRowChange: handleRowChange,\n        selectCell: selectCell\n      }, column.key));\n    }\n  }\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      ref: ref,\n      className: className,\n      onMouseEnter: handleDragEnter,\n      style: getRowStyle(gridRowStart, height),\n      ...props,\n      children: cells\n    })\n  });\n}\nconst RowComponent = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Row));\nconst RowComponent$1 = RowComponent;\nfunction defaultRenderRow(key, props) {\n  return /*#__PURE__*/jsx(RowComponent, {\n    ...props\n  }, key);\n}\nfunction ScrollToCell({\n  scrollToPosition: {\n    idx,\n    rowIdx\n  },\n  gridElement,\n  setScrollToCellPosition\n}) {\n  const ref = useRef(null);\n  useLayoutEffect(() => {\n    scrollIntoView(ref.current);\n  });\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n    observer.observe(ref.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n  return /*#__PURE__*/jsx(\"div\", {\n    ref: ref,\n    style: {\n      gridColumn: idx === undefined ? '1/-1' : idx + 1,\n      gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n    }\n  });\n}\nconst arrow = \"a1mygwml7-0-0-beta-36\";\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\nfunction renderSortStatus({\n  sortDirection,\n  priority\n}) {\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [renderSortIcon({\n      sortDirection\n    }), renderSortPriority({\n      priority\n    })]\n  });\n}\nfunction renderSortIcon({\n  sortDirection\n}) {\n  if (sortDirection === undefined) return null;\n  return /*#__PURE__*/jsx(\"svg\", {\n    viewBox: \"0 0 12 8\",\n    width: \"12\",\n    height: \"8\",\n    className: arrowClassname,\n    \"aria-hidden\": true,\n    children: /*#__PURE__*/jsx(\"path\", {\n      d: sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'\n    })\n  });\n}\nfunction renderSortPriority({\n  priority\n}) {\n  return priority;\n}\nconst root = \"r104f42s7-0-0-beta-36\";\nconst rootClassname = `rdg ${root}`;\nconst viewportDragging = \"v7ly7s7-0-0-beta-36\";\nconst viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\nconst focusSinkClassname = \"fc4f4zb7-0-0-beta-36\";\nconst focusSinkHeaderAndSummaryClassname = \"fq51q037-0-0-beta-36\";\nconst summaryCellClassname = \"s1n3hxke7-0-0-beta-36\";\nfunction SummaryCell({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}) {\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const {\n    summaryCellClass\n  } = column;\n  const className = getCellClassname(column, summaryCellClassname, typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass);\n  function onClick() {\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    });\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": isCellSelected,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: onClick,\n    onFocus: onFocus,\n    children: column.renderSummaryCell?.({\n      column,\n      row,\n      tabIndex: childTabIndex\n    })\n  });\n}\nconst SummaryCell$1 = /*#__PURE__*/memo(SummaryCell);\nconst summaryRow = \"snfqesz7-0-0-beta-36\";\nconst topSummaryRow = \"t1jijrjz7-0-0-beta-36\";\nconst topSummaryRowBorderClassname = \"t14bmecc7-0-0-beta-36\";\nconst bottomSummaryRowBorderClassname = \"b1odhhml7-0-0-beta-36\";\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\nfunction SummaryRow({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  showBorder,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    const isCellSelected = selectedCellIdx === column.idx;\n    cells.push( /*#__PURE__*/jsx(SummaryCell$1, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      rowIdx: rowIdx,\n      isCellSelected: isCellSelected,\n      selectCell: selectCell\n    }, column.key));\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": ariaRowIndex,\n    className: clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, summaryRowClassname, isTop ? [topSummaryRowClassname, showBorder && topSummaryRowBorderClassname] : ['rdg-bottom-summary-row', showBorder && bottomSummaryRowBorderClassname], selectedCellIdx === -1 && rowSelectedClassname),\n    style: {\n      ...getRowStyle(gridRowStart),\n      '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n      '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n    },\n    children: cells\n  });\n}\nconst SummaryRow$1 = /*#__PURE__*/memo(SummaryRow);\nfunction DataGrid(props, ref) {\n  const {\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    enableVirtualization: rawEnableVirtualization,\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId\n  } = props;\n  const defaultRenderers = useDefaultRenderers();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus$1 = renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? renderSortStatus;\n  const renderCheckbox$1 = renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? renderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(() => new Map());\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState(() => ({\n    idx: -1,\n    rowIdx: minRowIdx - 1,\n    mode: 'SELECT'\n  }));\n  const [copiedCell, setCopiedCell] = useState(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const focusSinkRef = useRef(null);\n  const shouldFocusCellRef = useRef(false);\n  const isTreeGrid = role === 'treegrid';\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n  const defaultGridComponents = useMemo(() => ({\n    renderCheckbox: renderCheckbox$1,\n    renderSortStatus: renderSortStatus$1\n  }), [renderCheckbox$1, renderSortStatus$1]);\n  const allRowsSelected = useMemo(() => {\n    const {\n      length\n    } = rows;\n    return length !== 0 && selectedRows != null && rowKeyGetter != null && selectedRows.size >= length && rows.every(row => selectedRows.has(rowKeyGetter(row)));\n  }, [rows, selectedRows, rowKeyGetter]);\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    measuredColumnWidths,\n    resizedColumnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    enableVirtualization\n  });\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n  const {\n    gridTemplateColumns,\n    handleColumnResize\n  } = useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize);\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(idx => {\n    selectCell({\n      rowIdx: minRowIdx,\n      idx\n    });\n  });\n  useLayoutEffect(() => {\n    if (!selectedCellIsWithinSelectionBounds || isSamePosition(selectedPosition, prevSelectedPosition.current)) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n    prevSelectedPosition.current = selectedPosition;\n    if (selectedPosition.idx === -1) {\n      focusSinkRef.current.focus({\n        preventScroll: true\n      });\n      scrollIntoView(focusSinkRef.current);\n    }\n  });\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    const cell = getCellToScroll(gridRef.current);\n    if (cell === null) return;\n    scrollIntoView(cell);\n    const elementToFocus = cell.querySelector('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({\n      preventScroll: true\n    });\n  });\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({\n      idx,\n      rowIdx\n    }) {\n      const scrollToIdx = idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx = rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({\n          idx: scrollToIdx,\n          rowIdx: scrollToRowIdx\n        });\n      }\n    },\n    selectCell\n  }));\n  const setDraggedOverRowIdx = useCallback(rowIdx => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n  function selectRow(args) {\n    if (!onSelectedRowsChange) return;\n    assertIsValidKeyGetter(rowKeyGetter);\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n    const {\n      row,\n      checked,\n      isShiftClick\n    } = args;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n    onSelectedRowsChange(newSelectedRows);\n  }\n  function handleKeyDown(event) {\n    const {\n      idx,\n      rowIdx,\n      mode\n    } = selectedPosition;\n    if (mode === 'EDIT') return;\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown({\n        mode: 'SELECT',\n        row,\n        column: columns[idx],\n        rowIdx,\n        selectCell\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n    const {\n      keyCode\n    } = event;\n    if (selectedCellIsWithinViewportBounds && (onPaste != null || onCopy != null) && isCtrlKeyHeldDown(event)) {\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n  function handleScroll(event) {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n  function updateRow(column, rowIdx, row) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n  function handleCopy() {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const sourceRow = rows[rowIdx];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({\n      row: sourceRow,\n      columnKey: sourceColumnKey\n    });\n    onCopy?.({\n      sourceRow,\n      sourceColumnKey\n    });\n  }\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rows[rowIdx];\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n  function handleCellInput(event) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const {\n      key,\n      shiftKey\n    } = event;\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({\n        type: 'ROW',\n        row,\n        checked: !selectedRows.has(rowKey),\n        isShiftClick: false\n      });\n      event.preventDefault();\n      return;\n    }\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({\n        idx,\n        rowIdx\n      }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n  function isColIdxWithinSelectionBounds(idx) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n  function isRowIdxWithinViewportBounds(rowIdx) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n  function isCellWithinSelectionBounds({\n    idx,\n    rowIdx\n  }) {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n  function isCellWithinViewportBounds({\n    idx,\n    rowIdx\n  }) {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n  function isCellEditable(position) {\n    return isCellWithinViewportBounds(position) && isSelectedCellEditable({\n      columns,\n      rows,\n      selectedPosition: position\n    });\n  }\n  function selectCell(position, enableEditor) {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx];\n      setSelectedPosition({\n        ...position,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      });\n    } else if (isSamePosition(selectedPosition, position)) {\n      scrollIntoView(getCellToScroll(gridRef.current));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({\n        ...position,\n        mode: 'SELECT'\n      });\n    }\n  }\n  function getNextPosition(key, ctrlKey, shiftKey) {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n    switch (key) {\n      case 'ArrowUp':\n        return {\n          idx,\n          rowIdx: rowIdx - 1\n        };\n      case 'ArrowDown':\n        return {\n          idx,\n          rowIdx: rowIdx + 1\n        };\n      case leftKey:\n        return {\n          idx: idx - 1,\n          rowIdx\n        };\n      case rightKey:\n        return {\n          idx: idx + 1,\n          rowIdx\n        };\n      case 'Tab':\n        return {\n          idx: idx + (shiftKey ? -1 : 1),\n          rowIdx\n        };\n      case 'Home':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: minRowIdx\n        };\n        return {\n          idx: 0,\n          rowIdx: ctrlKey ? minRowIdx : rowIdx\n        };\n      case 'End':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: maxRowIdx\n        };\n        return {\n          idx: maxColIdx,\n          rowIdx: ctrlKey ? maxRowIdx : rowIdx\n        };\n      case 'PageUp':\n        {\n          if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0\n          };\n        }\n      case 'PageDown':\n        {\n          if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1\n          };\n        }\n      default:\n        return selectedPosition;\n    }\n  }\n  function navigate(event) {\n    const {\n      key,\n      shiftKey\n    } = event;\n    let cellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (canExitGrid({\n        shiftKey,\n        maxColIdx,\n        minRowIdx,\n        maxRowIdx,\n        selectedPosition\n      })) {\n        commitEditorChanges();\n        return;\n      }\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n    event.preventDefault();\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n    selectCell(nextSelectedCellPosition);\n  }\n  function getDraggedOverCellIdx(currentRowIdx) {\n    if (draggedOverRowIdx === undefined) return;\n    const {\n      rowIdx\n    } = selectedPosition;\n    const isDraggedOver = rowIdx < draggedOverRowIdx ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n  function getDragHandle(rowIdx) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'EDIT' || onFill == null) {\n      return;\n    }\n    return /*#__PURE__*/jsx(DragHandle, {\n      rows: rows,\n      columns: columns,\n      selectedPosition: selectedPosition,\n      isCellEditable: isCellEditable,\n      latestDraggedOverRowIdx: latestDraggedOverRowIdx,\n      onRowsChange: onRowsChange,\n      onFill: onFill,\n      setDragging: setDragging,\n      setDraggedOverRowIdx: setDraggedOverRowIdx\n    });\n  }\n  function getCellEditor(rowIdx) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n    const {\n      idx,\n      row\n    } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n    const closeEditor = shouldFocusCell => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({\n        idx,\n        rowIdx\n      }) => ({\n        idx,\n        rowIdx,\n        mode: 'SELECT'\n      }));\n    };\n    const onRowChange = (row, commitChanges, shouldFocusCell) => {\n      if (commitChanges) {\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition(position => ({\n          ...position,\n          row\n        }));\n      }\n    };\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      closeEditor(false);\n    }\n    return /*#__PURE__*/jsx(EditCell, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      rowIdx: rowIdx,\n      onRowChange: onRowChange,\n      closeEditor: closeEditor,\n      onKeyDown: onCellKeyDown,\n      navigate: navigate\n    }, column.key);\n  }\n  function getRowViewportColumns(rowIdx) {\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (selectedColumn !== undefined && selectedPosition.rowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n      return selectedPosition.idx > colOverscanEndIdx ? [...viewportColumns, selectedColumn] : [...viewportColumns.slice(0, lastFrozenColumnIndex + 1), selectedColumn, ...viewportColumns.slice(lastFrozenColumnIndex + 1)];\n    }\n    return viewportColumns;\n  }\n  function getViewportRows() {\n    const rowElements = [];\n    const {\n      idx: selectedIdx,\n      rowIdx: selectedRowIdx\n    } = selectedPosition;\n    const startRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx ? rowOverscanStartIdx - 1 : rowOverscanStartIdx;\n    const endRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx ? rowOverscanEndIdx + 1 : rowOverscanEndIdx;\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport = viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          rowColumns = [selectedColumn];\n        } else {\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n      rowElements.push(renderRow(key, {\n        'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n        'aria-selected': isSelectable ? isRowSelected : undefined,\n        rowIdx,\n        row,\n        viewportColumns: rowColumns,\n        isRowSelected,\n        onCellClick: onCellClickLatest,\n        onCellDoubleClick: onCellDoubleClickLatest,\n        onCellContextMenu: onCellContextMenuLatest,\n        rowClass,\n        gridRowStart,\n        height: getRowHeight(rowIdx),\n        copiedCellIdx: copiedCell !== null && copiedCell.row === row ? columns.findIndex(c => c.key === copiedCell.columnKey) : undefined,\n        selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n        draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n        setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n        lastFrozenColumnIndex,\n        onRowChange: handleFormatterRowChangeLatest,\n        selectCell: selectCellLatest,\n        selectedCellDragHandle: getDragHandle(rowIdx),\n        selectedCellEditor: getCellEditor(rowIdx)\n      }));\n    }\n    return rowElements;\n  }\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({\n      idx: -1,\n      rowIdx: minRowIdx - 1,\n      mode: 'SELECT'\n    });\n    setDraggedOverRowIdx(undefined);\n  }\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n  return /*#__PURE__*/jsxs(\"div\", {\n    role: role,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    \"aria-multiselectable\": isSelectable ? true : undefined,\n    \"aria-colcount\": columns.length,\n    \"aria-rowcount\": ariaRowCount,\n    className: clsx(rootClassname, className, isDragging && viewportDraggingClassname),\n    style: {\n      ...style,\n      scrollPaddingInlineStart: selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined ? `${totalFrozenColumnWidth}px` : undefined,\n      scrollPaddingBlock: isRowIdxWithinViewportBounds(selectedPosition.rowIdx) || scrollToPosition?.rowIdx !== undefined ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${bottomSummaryRowsCount * summaryRowHeight}px` : undefined,\n      gridTemplateColumns,\n      gridTemplateRows: templateRows,\n      '--rdg-header-row-height': `${headerRowHeight}px`,\n      '--rdg-summary-row-height': `${summaryRowHeight}px`,\n      '--rdg-sign': isRtl ? -1 : 1,\n      ...layoutCssVars\n    },\n    dir: direction,\n    ref: gridRef,\n    onScroll: handleScroll,\n    onKeyDown: handleKeyDown,\n    \"data-testid\": testId,\n    children: [/*#__PURE__*/jsx(DataGridDefaultRenderersProvider, {\n      value: defaultGridComponents,\n      children: /*#__PURE__*/jsxs(RowSelectionChangeProvider, {\n        value: selectRowLatest,\n        children: [/*#__PURE__*/jsx(RowSelectionProvider, {\n          value: allRowsSelected,\n          children: /*#__PURE__*/jsx(HeaderRow$1, {\n            columns: getRowViewportColumns(minRowIdx),\n            onColumnResize: handleColumnResizeLatest,\n            sortColumns: sortColumns,\n            onSortColumnsChange: onSortColumnsChangeLatest,\n            lastFrozenColumnIndex: lastFrozenColumnIndex,\n            selectedCellIdx: selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined,\n            selectCell: selectHeaderCellLatest,\n            shouldFocusGrid: !selectedCellIsWithinSelectionBounds,\n            direction: direction\n          })\n        }), rows.length === 0 && noRowsFallback ? noRowsFallback : /*#__PURE__*/jsxs(Fragment, {\n          children: [topSummaryRows?.map((row, rowIdx) => {\n            const gridRowStart = headerRowsCount + rowIdx + 1;\n            const summaryRowIdx = rowIdx + minRowIdx + 1;\n            const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n            const top = headerRowHeight + summaryRowHeight * rowIdx;\n            return /*#__PURE__*/jsx(SummaryRow$1, {\n              \"aria-rowindex\": gridRowStart,\n              rowIdx: summaryRowIdx,\n              gridRowStart: gridRowStart,\n              row: row,\n              top: top,\n              bottom: undefined,\n              viewportColumns: getRowViewportColumns(summaryRowIdx),\n              lastFrozenColumnIndex: lastFrozenColumnIndex,\n              selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n              isTop: true,\n              showBorder: rowIdx === topSummaryRowsCount - 1,\n              selectCell: selectCellLatest\n            }, rowIdx);\n          }), getViewportRows(), bottomSummaryRows?.map((row, rowIdx) => {\n            const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n            const summaryRowIdx = rows.length + rowIdx;\n            const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n            const top = clientHeight > totalRowHeight ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx) : undefined;\n            const bottom = top === undefined ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx) : undefined;\n            return /*#__PURE__*/jsx(SummaryRow$1, {\n              \"aria-rowindex\": ariaRowCount - bottomSummaryRowsCount + rowIdx + 1,\n              rowIdx: summaryRowIdx,\n              gridRowStart: gridRowStart,\n              row: row,\n              top: top,\n              bottom: bottom,\n              viewportColumns: getRowViewportColumns(summaryRowIdx),\n              lastFrozenColumnIndex: lastFrozenColumnIndex,\n              selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n              isTop: false,\n              showBorder: rowIdx === 0,\n              selectCell: selectCellLatest\n            }, rowIdx);\n          })]\n        })]\n      })\n    }), renderMeasuringCells(viewportColumns), isTreeGrid && /*#__PURE__*/jsx(\"div\", {\n      ref: focusSinkRef,\n      tabIndex: isGroupRowFocused ? 0 : -1,\n      className: clsx(focusSinkClassname, isGroupRowFocused && [rowSelected, lastFrozenColumnIndex !== -1 && rowSelectedWithFrozenCell], !isRowIdxWithinViewportBounds(selectedPosition.rowIdx) && focusSinkHeaderAndSummaryClassname),\n      style: {\n        gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n      }\n    }), scrollToPosition !== null && /*#__PURE__*/jsx(ScrollToCell, {\n      scrollToPosition: scrollToPosition,\n      setScrollToCellPosition: setScrollToPosition,\n      gridElement: gridRef.current\n    })]\n  });\n}\nfunction getCellToScroll(gridEl) {\n  return gridEl.querySelector(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\nfunction isSamePosition(p1, p2) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\nconst DataGrid$1 = /*#__PURE__*/forwardRef(DataGrid);\nfunction GroupCell({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}) {\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    tabIndex: tabIndex,\n    className: getCellClassname(column),\n    style: {\n      ...getCellStyle(column),\n      cursor: isLevelMatching ? 'pointer' : 'default'\n    },\n    onClick: isLevelMatching ? toggleGroup : undefined,\n    onFocus: onFocus,\n    children: (!isGroupByColumn || isLevelMatching) && column.renderGroupCell?.({\n      groupKey,\n      childRows,\n      column,\n      row,\n      isExpanded,\n      tabIndex: childTabIndex,\n      toggleGroup\n    })\n  }, column.key);\n}\nconst GroupCell$1 = /*#__PURE__*/memo(GroupCell);\nconst groupRow = \"gyxx7e97-0-0-beta-36\";\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\nfunction GroupedRow({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  height,\n  groupBy,\n  toggleGroup,\n  ...props\n}) {\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n  function handleSelectGroup() {\n    selectCell({\n      rowIdx,\n      idx: -1\n    });\n  }\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      \"aria-level\": row.level + 1,\n      \"aria-setsize\": row.setSize,\n      \"aria-posinset\": row.posInSet + 1,\n      \"aria-expanded\": row.isExpanded,\n      className: clsx(rowClassname, groupRowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, className, selectedCellIdx === -1 && rowSelectedClassname),\n      onClick: handleSelectGroup,\n      style: getRowStyle(gridRowStart, height),\n      ...props,\n      children: viewportColumns.map(column => /*#__PURE__*/jsx(GroupCell$1, {\n        id: row.id,\n        groupKey: row.groupKey,\n        childRows: row.childRows,\n        isExpanded: row.isExpanded,\n        isCellSelected: selectedCellIdx === column.idx,\n        column: column,\n        row: row,\n        groupColumnIndex: idx,\n        toggleGroup: toggleGroup,\n        isGroupByColumn: groupBy.includes(column.key)\n      }, column.key))\n    })\n  });\n}\nconst GroupedRow$1 = /*#__PURE__*/memo(GroupedRow);\nfunction TreeDataGrid({\n  columns: rawColumns,\n  rows: rawRows,\n  rowHeight: rawRowHeight,\n  rowKeyGetter: rawRowKeyGetter,\n  onCellKeyDown: rawOnCellKeyDown,\n  onRowsChange,\n  selectedRows: rawSelectedRows,\n  onSelectedRowsChange: rawOnSelectedRowsChange,\n  renderers,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  ...props\n}, ref) {\n  const defaultRenderers = useDefaultRenderers();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const isRtl = props.direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n  const {\n    columns,\n    groupBy\n  } = useMemo(() => {\n    const columns = [...rawColumns].sort(({\n      key: aKey\n    }, {\n      key: bKey\n    }) => {\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n      return 0;\n    });\n    const groupBy = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n    return {\n      columns,\n      groupBy\n    };\n  }, [rawColumns, rawGroupBy]);\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n    const groupRows = (rows, [groupByKey, ...remainingGroupByKeys], startRowIndex) => {\n      let groupRowsCount = 0;\n      const groups = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0 ? [childRows, childRows.length] : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1);\n        groups[key] = {\n          childRows,\n          childGroups,\n          startRowIndex: startRowIndex + groupRowsCount\n        };\n        groupRowsCount += childRowsCount + 1;\n      }\n      return [groups, groupRowsCount];\n    };\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n  const [rows, isGroupRow] = useMemo(() => {\n    const allGroupRows = new Set();\n    if (!groupedRows) return [rawRows, isGroupRow];\n    const flattenedRows = [];\n    const expandGroup = (rows, parentId, level) => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds.has(id);\n        const {\n          childRows,\n          childGroups,\n          startRowIndex\n        } = rows[groupKey];\n        const groupRow = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n    function isGroupRow(row) {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return row => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({\n            type: 'GROUP',\n            row\n          });\n        }\n        return rawRowHeight({\n          type: 'ROW',\n          row\n        });\n      };\n    }\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n  const getParentRowAndIndex = useCallback(row => {\n    const rowIdx = rows.indexOf(row);\n    for (let i = rowIdx - 1; i >= 0; i--) {\n      const parentRow = rows[i];\n      if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n        return [parentRow, i];\n      }\n    }\n    return undefined;\n  }, [isGroupRow, rows]);\n  const rowKeyGetter = useCallback(row => {\n    if (isGroupRow(row)) {\n      return row.id;\n    }\n    if (typeof rawRowKeyGetter === 'function') {\n      return rawRowKeyGetter(row);\n    }\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const {\n        startRowIndex,\n        childRows\n      } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      return startRowIndex + groupIndex + 1;\n    }\n    return rows.indexOf(row);\n  }, [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]);\n  const selectedRows = useMemo(() => {\n    if (rawSelectedRows == null) return null;\n    assertIsValidKeyGetter(rawRowKeyGetter);\n    const selectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        const isGroupRowSelected = row.childRows.every(cr => rawSelectedRows.has(rawRowKeyGetter(cr)));\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n  function onSelectedRowsChange(newSelectedRows) {\n    if (!rawOnSelectedRowsChange) return;\n    assertIsValidKeyGetter(rawRowKeyGetter);\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key);\n        }\n      }\n    }\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n  function handleKeyDown(args, event) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n    if (args.mode === 'EDIT') return;\n    const {\n      column,\n      rowIdx,\n      selectCell\n    } = args;\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) return;\n    if (idx === -1 && (event.key === leftKey && row.isExpanded || event.key === rightKey && !row.isExpanded)) {\n      event.preventDefault();\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({\n          idx,\n          rowIdx: parentRowAndIndex[1]\n        });\n      }\n    }\n    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n      event.preventGridDefault();\n    }\n  }\n  function handleRowsChange(updatedRows, {\n    indexes,\n    column\n  }) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes = [];\n    indexes.forEach(index => {\n      const rawIndex = rawRows.indexOf(rows[index]);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    });\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n  function toggleGroup(groupId) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n  function renderRow(key, {\n    row,\n    rowClass,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onRowChange,\n    lastFrozenColumnIndex,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    setDraggedOverRowIdx,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    ...rowProps\n  }) {\n    if (isGroupRow(row)) {\n      const {\n        startRowIndex\n      } = row;\n      return /*#__PURE__*/jsx(GroupedRow$1, {\n        ...rowProps,\n        \"aria-rowindex\": headerAndTopSummaryRowsCount + startRowIndex + 1,\n        row: row,\n        groupBy: groupBy,\n        toggleGroup: toggleGroupLatest\n      }, key);\n    }\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const {\n        startRowIndex,\n        childRows\n      } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      selectedCellDragHandle\n    });\n  }\n  return /*#__PURE__*/jsx(DataGrid$1, {\n    ...props,\n    role: \"treegrid\",\n    \"aria-rowcount\": rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0),\n    ref: ref,\n    columns: columns,\n    rows: rows,\n    rowHeight: rowHeight,\n    rowKeyGetter: rowKeyGetter,\n    onRowsChange: handleRowsChange,\n    selectedRows: selectedRows,\n    onSelectedRowsChange: onSelectedRowsChange,\n    onCellKeyDown: handleKeyDown,\n    renderers: {\n      ...renderers,\n      renderRow\n    }\n  });\n}\nfunction isReadonlyArray(arr) {\n  return Array.isArray(arr);\n}\nconst TreeDataGrid$1 = /*#__PURE__*/forwardRef(TreeDataGrid);\nconst textEditorInternalClassname = \"tlmcuo07-0-0-beta-36\";\nconst textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\nfunction autoFocusAndSelect(input) {\n  input?.focus();\n  input?.select();\n}\nfunction textEditor({\n  row,\n  column,\n  onRowChange,\n  onClose\n}) {\n  return /*#__PURE__*/jsx(\"input\", {\n    className: textEditorClassname,\n    ref: autoFocusAndSelect,\n    value: row[column.key],\n    onChange: event => onRowChange({\n      ...row,\n      [column.key]: event.target.value\n    }),\n    onBlur: () => onClose(true, false)\n  });\n}\nexport { DataGridDefaultRenderersProvider, RowComponent$1 as Row, SELECT_COLUMN_KEY, SelectCellFormatter, SelectColumn, ToggleGroup, TreeDataGrid$1 as TreeDataGrid, DataGrid$1 as default, renderCheckbox, renderHeaderCell, renderSortIcon, renderSortPriority, renderToggleGroup, renderValue, textEditor, useRowSelection };","map":{"version":3,"names":["getColSpan","column","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","undefined","scrollIntoView","element","inline","block","createCellEvent","event","defaultPrevented","cellEvent","preventGridDefault","isGridDefaultPrevented","Object","setPrototypeOf","getPrototypeOf","nonInputKeys","Set","isCtrlKeyHeldDown","e","ctrlKey","metaKey","key","isDefaultCellInput","has","onEditorNavigation","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","closest","querySelectorAll","length","measuringCellClassname","renderMeasuringCells","viewportColumns","map","minWidth","maxWidth","jsx","className","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","row","rowIdx","isCellEditable","renderEditCell","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","topSummaryRowsCount","minRowIdx","type","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","shiftKey","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","getRowStyle","height","getCellStyle","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","clsx","isLastFrozenColumn","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","Error","clampColumnWidth","width","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","renderCheckbox","onChange","props","handleChange","checked","nativeEvent","jsxs","disabled","children","groupCellContent","groupCellContentClassname","caret","caretClassname","renderToggleGroup","ToggleGroup","groupKey","isExpanded","tabIndex","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","renderValue","DataGridDefaultRenderersContext","createContext","DataGridDefaultRenderersProvider","Provider","useDefaultRenderers","useContext","SelectCellFormatter","value","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","SELECT_COLUMN_KEY","HeaderRenderer","isRowSelected","onRowSelectionChange","SelectFormatter","isShiftClick","SelectGroupFormatter","SelectColumn","name","resizable","sortable","renderHeaderCell","renderCell","renderGroupCell","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","measuredColumnWidths","resizedColumnWidths","viewportWidth","scrollLeft","defaultColumnOptions","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","useMemo","rawColumn","sort","aKey","frozenA","bKey","frozenB","forEach","push","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","get","set","columnMetric","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useLayoutEffect","window","useEffect","useLayoutEffect$1","useColumnWidths","gridRef","gridWidth","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","useRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","current","newTemplateColumns","columnsToMeasure","gridTemplateColumns","join","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","delete","handleColumnResize","nextWidth","resizingKey","flushSync","newResizedColumnWidths","selector","CSS","escape","measuringCell","querySelector","getBoundingClientRect","useGridDimensions","inlineSize","setInlineSize","useState","blockSize","setBlockSize","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","ref","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","currentTarget","isFocusable","childTabIndex","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","useViewportRows","rowHeight","scrollTop","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","setDraggedOverRowIdx","handleMouseDown","buttons","addEventListener","onMouseOver","onMouseUp","removeEventListener","handleDragEnd","overRowIdx","startRowIndex","endRowIndex","updateRows","handleDoubleClick","stopPropagation","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","columnKey","targetRow","onMouseDown","onDoubleClick","cellEditing","EditCell","onRowChange","closeEditor","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","mode","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","cellClass","displayCellContent","role","onMouseDownCapture","Fragment","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","onSort","SortableHeaderCell","renderSortStatus","preventDefault","handleClick","onClick","cellResizable","cellResizableClassname","HeaderCell","isCellSelected","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","sortColumn","ariaSort","headerCellClass","renderHeaderCell$1","onPointerDown","pointerType","pointerId","right","clientX","onPointerMove","onLostPointerCapture","setPointerCapture","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","handleFocus","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","HeaderRow$1","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onContextMenu","isEditable","selectCellWrapper","openEditor","handleContextMenu","handleRowChange","newRow","Cell$1","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onMouseEnter","handleDragEnter","RowComponent","forwardRef","RowComponent$1","defaultRenderRow","ScrollToCell","scrollToPosition","gridElement","setScrollToCellPosition","removeScrollToCell","observer","IntersectionObserver","root","threshold","gridColumn","gridRow","arrow","arrowClassname","renderSortIcon","renderSortPriority","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","focusSinkHeaderAndSummaryClassname","summaryCellClassname","SummaryCell","summaryCellClass","renderSummaryCell","SummaryCell$1","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","isTop","showBorder","ariaRowIndex","SummaryRow$1","DataGrid","rowKeyGetter","rawRowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onCellKeyDown","onScroll","onCopy","onPaste","rawEnableVirtualization","renderers","rawDirection","rawRole","ariaDescribedBy","rawAriaRowCount","testId","defaultRenderers","renderRow","renderSortStatus$1","renderCheckbox$1","noRowsFallback","headerRowsCount","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","setScrollTop","setScrollLeft","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","setScrollToPosition","prevSelectedPosition","lastSelectedRowIdx","focusSinkRef","shouldFocusCellRef","isTreeGrid","gridHeight","isSelectable","leftKey","rightKey","ariaRowCount","defaultGridComponents","allRowsSelected","every","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectHeaderCellLatest","isSamePosition","focus","preventScroll","getCellToScroll","elementToFocus","useImperativeHandle","scrollToCell","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","add","previousRowIdx","indexOf","step","Element","isCellEvent","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","handleCellInput","handleScroll","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","originalRow","isColIdxWithinSelectionBounds","enableEditor","getNextPosition","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","includes","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","dir","summaryRowIdx","isSummaryRowSelected","gridEl","p1","p2","DataGrid$1","GroupCell","id","childRows","groupColumnIndex","isGroupByColumn","toggleGroupWrapper","isLevelMatching","cursor","GroupCell$1","groupRow","groupRowClassname","GroupedRow","groupBy","level","handleSelectGroup","setSize","posInSet","GroupedRow$1","TreeDataGrid","rawRows","rawRowKeyGetter","rawOnCellKeyDown","rawSelectedRows","rawOnSelectedRowsChange","rawGroupBy","rowGrouper","expandedGroupIds","onExpandedGroupIdsChange","rawRenderRow","toggleGroupLatest","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","groupRowsCount","groups","childGroups","childRowsCount","isGroupRow","allGroupRows","flattenedRows","expandGroup","parentId","isReadonlyArray","keys","getParentRowAndIndex","parentRow","parentRowAndIndex","groupIndex","isGroupRowSelected","cr","newRawSelectedRows","handleRowsChange","updatedRawRows","rawIndexes","rawIndex","groupId","newExpandedGroupIds","rowProps","arr","Array","isArray","TreeDataGrid$1","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","onBlur"],"sources":["/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/utils/colSpanUtils.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/utils/domUtils.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/utils/eventUtils.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/utils/keyboardUtils.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/utils/renderMeasuringCells.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/utils/selectedCellUtils.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/style/cell.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/utils/styleUtils.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/utils/index.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/cellRenderers/renderCheckbox.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/cellRenderers/renderToggleGroup.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/cellRenderers/renderValue.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/DataGridDefaultRenderersProvider.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/cellRenderers/SelectCellFormatter.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/hooks/useRowSelection.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/Columns.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/hooks/useCalculatedColumns.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/hooks/useLayoutEffect.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/hooks/useColumnWidths.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/hooks/useGridDimensions.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/hooks/useLatestFunc.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/hooks/useRovingTabIndex.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/hooks/useViewportColumns.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/hooks/useViewportRows.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/DragHandle.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/EditCell.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/renderHeaderCell.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/HeaderCell.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/style/row.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/HeaderRow.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/Cell.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/Row.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/ScrollToCell.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/sortStatus.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/style/core.ts","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/SummaryCell.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/SummaryRow.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/DataGrid.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/GroupCell.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/GroupRow.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/TreeDataGrid.tsx","/home/decoles/projects/landfill-emission-model/frontend/node_modules/react-data-grid/src/editors/textEditor.tsx"],"sourcesContent":["import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type { CalculatedColumn, CellNavigationMode, Maybe, Position } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning, layout/paint containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    contain: style;\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function renderCheckbox({ onChange, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderGroupCellProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function renderToggleGroup<R, SR>(props: RenderGroupCellProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: RenderGroupCellProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'HEADER', checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, Column } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  viewportWidth: number;\n  scrollLeft: number;\n  measuredColumnWidths: ReadonlyMap<string, number>;\n  resizedColumnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  measuredColumnWidths,\n  resizedColumnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const frozen = rawColumn.frozen ?? false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        renderCell: rawColumn.renderCell ?? defaultFormatter\n      };\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width =\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [measuredColumnWidths, resizedColumnWidths, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current!.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize] as const;\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    cursor: move;\n    position: absolute;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 8px;\n    block-size: 8px;\n    background-color: var(--rdg-selection-color);\n\n    &:hover {\n      inline-size: 16px;\n      block-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCell = css`\n  @layer rdg.SortableHeaderCell {\n    cursor: pointer;\n    display: flex;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  tabIndex\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      tabIndex={tabIndex}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'tabIndex'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  tabIndex\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { clampColumnWidth, getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultRenderHeaderCell from './renderHeaderCell';\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n\n    &::after {\n      content: '';\n      cursor: col-resize;\n      position: absolute;\n      inset-block-start: 0;\n      inset-inline-end: 0;\n      inset-block-end: 0;\n      inline-size: 10px;\n    }\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const renderHeaderCell = column.renderHeaderCell ?? defaultRenderHeaderCell;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\n      event.preventDefault();\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        tabIndex: childTabIndex\n      })}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, Direction } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n      inset-block-start: 0;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  dragHandle,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditable(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n      {dragHandle}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { forwardRef, memo, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport Cell from './Cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RenderRowProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RenderRowProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      CheckboxInput,\n      CheckboxIcon,\n      CheckboxLabel,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n      contain: content;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n  showBorder: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nexport const bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  showBorder,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && showBorder,\n          [bottomSummaryRowBorderClassname]: !isTop && showBorder,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { forwardRef, useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport type { Key, KeyboardEvent, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  RowSelectionChangeProvider,\n  RowSelectionProvider,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useLayoutEffect,\n  useViewportColumns,\n  useViewportRows\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  Column,\n  CopyEvent,\n  Direction,\n  FillEvent,\n  Maybe,\n  PasteEvent,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'renderCell' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: R) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  onCellKeyDown?: Maybe<(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const shouldFocusCellRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus\n    }),\n    [renderCheckbox, renderSortStatus]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    measuredColumnWidths,\n    resizedColumnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: minRowIdx, idx });\n  });\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      focusSinkRef.current!.focus({ preventScroll: true });\n      scrollIntoView(focusSinkRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const { row, checked, isShiftClick } = args;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event)\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rows[rowIdx];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rows[rowIdx];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ type: 'ROW', row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx];\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'EDIT' || onFill == null) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <RowSelectionChangeProvider value={selectRowLatest}>\n          <RowSelectionProvider value={allRowsSelected}>\n            <HeaderRow\n              columns={getRowViewportColumns(minRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </RowSelectionProvider>\n          {rows.length === 0 && noRowsFallback ? (\n            noRowsFallback\n          ) : (\n            <>\n              {topSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerRowsCount + rowIdx + 1;\n                const summaryRowIdx = rowIdx + minRowIdx + 1;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top = headerRowHeight + summaryRowHeight * rowIdx;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={gridRowStart}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={undefined}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop\n                    showBorder={rowIdx === topSummaryRowsCount - 1}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n              {getViewportRows()}\n              {bottomSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n                const summaryRowIdx = rows.length + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top =\n                  clientHeight > totalRowHeight\n                    ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                    : undefined;\n                const bottom =\n                  top === undefined\n                    ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                    : undefined;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={bottom}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop={false}\n                    showBorder={rowIdx === 0}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n            </>\n          )}\n        </RowSelectionChangeProvider>\n      </DataGridDefaultRenderersProvider>\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\n\ninterface GroupCellProps<R, SR> {\n  id: string;\n  groupKey: unknown;\n  childRows: readonly R[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n  isExpanded: boolean;\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n  isGroupByColumn: boolean;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!isGroupByColumn || isLevelMatching) &&\n        column.renderGroupCell?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { BaseRenderRowProps, GroupRow } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozenLast } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\ninterface GroupRowRendererProps<R, SR> extends BaseRenderRowProps<R, SR> {\n  row: GroupRow<R>;\n  groupBy: readonly string[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  height,\n  groupBy,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n\n  function handleSelectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={row.level + 1} // aria-level is 1-based\n        aria-setsize={row.setSize}\n        aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n        aria-expanded={row.isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          selectedCellIdx === -1 && rowSelectedClassname,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={row.id}\n            groupKey={row.groupKey}\n            childRows={row.childRows}\n            isExpanded={row.isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n            isGroupByColumn={groupBy.includes(column.key)}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { forwardRef, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\n\nimport { useLatestFunc } from './hooks';\nimport { assertIsValidKeyGetter, isCtrlKeyHeldDown } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  GroupRow,\n  Maybe,\n  Omit,\n  RenderRowProps,\n  RowHeightArgs,\n  RowsChangeData\n} from './types';\nimport { renderToggleGroup, SELECT_COLUMN_KEY } from '.';\nimport DataGrid from './DataGrid';\nimport type { DataGridHandle, DataGridProps } from './DataGrid';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\nimport GroupedRow from './GroupRow';\nimport { defaultRenderRow } from './Row';\n\nexport interface TreeDataGridProps<R, SR = unknown, K extends Key = Key>\n  extends Omit<DataGridProps<R, SR, K>, 'role' | 'aria-rowcount' | 'rowHeight' | 'onFill'> {\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  groupBy: readonly string[];\n  rowGrouper: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange: (expandedGroupIds: Set<unknown>) => void;\n}\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\nfunction TreeDataGrid<R, SR, K extends Key>(\n  {\n    columns: rawColumns,\n    rows: rawRows,\n    rowHeight: rawRowHeight,\n    rowKeyGetter: rawRowKeyGetter,\n    onCellKeyDown: rawOnCellKeyDown,\n    onRowsChange,\n    selectedRows: rawSelectedRows,\n    onSelectedRowsChange: rawOnSelectedRowsChange,\n    renderers,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    ...props\n  }: TreeDataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const isRtl = props.direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  const { columns, groupBy } = useMemo(() => {\n    const columns = [...rawColumns].sort(({ key: aKey }, { key: bKey }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const groupBy: string[] = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n\n    return { columns, groupBy };\n  }, [rawColumns, rawGroupBy]);\n\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds.has(id);\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return (row: R | GroupRow<R>): number => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({ type: 'GROUP', row });\n        }\n        return rawRowHeight({ type: 'ROW', row });\n      };\n    }\n\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n\n  const getParentRowAndIndex = useCallback(\n    (row: R | GroupRow<R>) => {\n      const rowIdx = rows.indexOf(row);\n      for (let i = rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n          return [parentRow, i] as const;\n        }\n      }\n\n      return undefined;\n    },\n    [isGroupRow, rows]\n  );\n\n  const rowKeyGetter = useCallback(\n    (row: R | GroupRow<R>) => {\n      if (isGroupRow(row)) {\n        return row.id;\n      }\n\n      if (typeof rawRowKeyGetter === 'function') {\n        return rawRowKeyGetter(row);\n      }\n\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        const { startRowIndex, childRows } = parentRowAndIndex[0];\n        const groupIndex = childRows.indexOf(row);\n        return startRowIndex + groupIndex + 1;\n      }\n\n      return rows.indexOf(row);\n    },\n    [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]\n  );\n\n  const selectedRows = useMemo((): Maybe<ReadonlySet<Key>> => {\n    if (rawSelectedRows == null) return null;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const selectedRows = new Set<Key>(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        // select parent row if all the children are selected\n        const isGroupRowSelected = row.childRows.every((cr) =>\n          rawSelectedRows.has(rawRowKeyGetter(cr))\n        );\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n\n  function onSelectedRowsChange(newSelectedRows: Set<Key>) {\n    if (!rawOnSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // select all children if the parent row is selected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key as K);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // unselect all children if the parent row is unselected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key as K);\n        }\n      }\n    }\n\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n\n  function handleKeyDown(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n\n    if (!isGroupRow(row)) return;\n    if (\n      idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((event.key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (event.key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({ idx, rowIdx: parentRowAndIndex[1] });\n      }\n    }\n\n    // Prevent copy/paste on group rows\n    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n      event.preventGridDefault();\n    }\n  }\n\n  function handleRowsChange(updatedRows: R[], { indexes, column }: RowsChangeData<R, SR>) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes: number[] = [];\n    indexes.forEach((index) => {\n      const rawIndex = rawRows.indexOf(rows[index] as R);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    });\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n\n  function toggleGroup(groupId: unknown) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function renderRow(\n    key: Key,\n    {\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      selectedCellDragHandle,\n      ...rowProps\n    }: RenderRowProps<R, SR>\n  ) {\n    if (isGroupRow(row)) {\n      const { startRowIndex } = row;\n      return (\n        <GroupedRow\n          key={key}\n          {...rowProps}\n          aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1}\n          row={row}\n          groupBy={groupBy}\n          toggleGroup={toggleGroupLatest}\n        />\n      );\n    }\n\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const { startRowIndex, childRows } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      selectedCellDragHandle\n    });\n  }\n\n  return (\n    <DataGrid<R, SR, Key>\n      {...props}\n      role=\"treegrid\"\n      aria-rowcount={\n        rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0)\n      }\n      ref={ref}\n      columns={columns}\n      rows={rows as R[]} // TODO: check types\n      rowHeight={rowHeight}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={handleRowsChange}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      onCellKeyDown={handleKeyDown}\n      renderers={{\n        ...renderers,\n        renderRow\n      }}\n    />\n  );\n}\n\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport default forwardRef(TreeDataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: TreeDataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { RenderEditCellProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: RenderEditCellProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true, false)}\n    />\n  );\n}\n"],"mappings":";;;;AAEO,SAASA,UAAUA,CACxBC,MAA+B,EAC/BC,qBAA6B,EAC7BC,IAAwB,EACJ;EACpB,MAAMC,OAAO,GAAG,OAAOH,MAAM,CAACG,OAAO,KAAK,UAAU,GAAGH,MAAM,CAACG,OAAO,CAACD,IAAI,CAAC,GAAG,CAAC;EAC/E,IACEE,MAAM,CAACC,SAAS,CAACF,OAAO,CAAC,IACzBA,OAAO,GAAI,CAAC,KAEX,CAACH,MAAM,CAACM,MAAM,IAAIN,MAAM,CAACO,GAAG,GAAGJ,OAAQ,GAAG,CAAC,IAAIF,qBAAqB,CAAC,EACtE;IACA,OAAOE,OAAO;EAChB;EACA,OAAOK,SAAS;AAClB;ACXO,SAASC,cAAcA,CAACC,OAAuB,EAAE;EACtDA,OAAO,EAAED,cAAc,CAAC;IAAEE,MAAM,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAU,CAAC,CAAC;AAClE;ACNO,SAASC,eAAeA,CAC7BC,KAAQ,EACM;EACd,IAAIC,gBAAgB,GAAG,KAAK;EAC5B,MAAMC,SAAS,GAAG;IAChB,GAAGF,KAAK;IACRG,kBAAkBA,CAAA,EAAG;MACnBF,gBAAgB,GAAG,IAAI;KACxB;IACDG,sBAAsBA,CAAA,EAAG;MACvB,OAAOH,gBAAgB;IACzB;GACD;EAEDI,MAAM,CAACC,cAAc,CAACJ,SAAS,EAAEG,MAAM,CAACE,cAAc,CAACP,KAAK,CAAC,CAAC;EAE9D,OAAOE,SAAS;AAClB;AClBA,MAAMM,YAAY,GAAG,IAAIC,GAAG,CAAC,CAE3B,cAAc,EAEd,KAAK,EACL,UAAU,EACV,UAAU,EACV,SAAS,EACT,IAAI,EACJ,QAAQ,EACR,MAAM,EACN,SAAS,EACT,YAAY,EACZ,OAAO,EAEP,KAAK,EAEL,WAAW,EACX,WAAW,EACX,YAAY,EACZ,SAAS,EACT,KAAK,EACL,MAAM,EACN,UAAU,EACV,QAAQ,EAER,QAAQ,EAER,aAAa,EACb,QAAQ,EACR,OAAO,EACP,MAAM,EAEN,aAAa,EAEb,IAAI,EAEJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,KAAK,EACL,KAAK,CACN,CAAC;AAEK,SAASC,iBAAiBA,CAACC,CAAsB,EAAW;EACjE,OAAO,CAACA,CAAC,CAACC,OAAO,IAAID,CAAC,CAACE,OAAO,KAAKF,CAAC,CAACG,GAAG,KAAK,SAAS;AACxD;AAEO,SAASC,kBAAkBA,CAACf,KAA0C,EAAW;EACtF,OAAO,CAACQ,YAAY,CAACQ,GAAG,CAAChB,KAAK,CAACc,GAAG,CAAC;AACrC;AAQO,SAASG,kBAAkBA,CAAC;EAAEH,GAAG;EAAEI;AAA4C,CAAC,EAAW;EAChG,IACEJ,GAAG,KAAK,KAAK,KACZI,MAAM,YAAYC,gBAAgB,IACjCD,MAAM,YAAYE,mBAAmB,IACrCF,MAAM,YAAYG,iBAAiB,CAAC,EACtC;IACA,OACEH,MAAM,CAACI,OAAO,CAAC,uBAAuB,CAAC,EAAEC,gBAAgB,CAAC,yBAAyB,CAAC,CACjFC,MAAM,KAAK,CAAC;EAEnB;EACA,OAAO,KAAK;AACd;ACzEA,MAAMC,sBAAsB,GAM3B;AAEM,SAASC,oBAAoBA,CAAQC,eAAmD,EAAE;EAC/F,OAAOA,eAAe,CAACC,GAAG,CAAC,CAAC;IAAEd,GAAG;IAAErB,GAAG;IAAEoC,QAAQ;IAAEC;EAAS,CAAC,kBAC1DC,GAAA;IAEEC,SAAS,EAAEP,sBAAuB;IAClCQ,KAAK,EAAE;MAAEC,eAAe,EAAEzC,GAAG,GAAG,CAAC;MAAEoC,QAAQ;MAAEC;KAAW;IACxD,yBAAyB,EAAAhB;GAHpB,EAAAA,GAAA,CAKR,CAAC;AACJ;ACZO,SAASqB,sBAAsBA,CAAQ;EAC5CC,gBAAgB;EAChBC,OAAO;EACPC;AACiC,CAAC,EAAW;EAC7C,MAAMpD,MAAM,GAAGmD,OAAO,CAACD,gBAAgB,CAAC3C,GAAG,CAAC;EAC5C,MAAM8C,GAAG,GAAGD,IAAI,CAACF,gBAAgB,CAACI,MAAM,CAAC;EACzC,OAAOC,cAAc,CAACvD,MAAM,EAAEqD,GAAG,CAAC;AACpC;AAEO,SAASE,cAAcA,CAAQvD,MAA+B,EAAEqD,GAAM,EAAW;EACtF,OACErD,MAAM,CAACwD,cAAc,IAAI,IAAI,IAC7B,CAAC,OAAOxD,MAAM,CAACyD,QAAQ,KAAK,UAAU,GAAGzD,MAAM,CAACyD,QAAQ,CAACJ,GAAG,CAAC,GAAGrD,MAAM,CAACyD,QAAQ,MAAM,KAAK;AAE9F;AAiBA,SAASC,sBAAsBA,CAAQ;EACrCN,IAAI;EACJO,cAAc;EACdC,iBAAiB;EACjBN,MAAM;EACNrD,qBAAqB;EACrBD;AAOF,CAAC,EAAE;EACD,MAAM6D,mBAAmB,GAAGF,cAAc,EAAErB,MAAM,IAAI,CAAC;EACvD,MAAMwB,SAAS,GAAG,CAAC,CAAC,GAAGD,mBAAmB;EAC1C,IAAIP,MAAM,KAAKQ,SAAS,EAAE;IACxB,OAAO/D,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;MAAE8D,IAAI,EAAE;IAAS,CAAC,CAAC;EACtE;EAEA,IAAIJ,cAAc,IAAIL,MAAM,GAAGQ,SAAS,IAAIR,MAAM,IAAIO,mBAAmB,GAAGC,SAAS,EAAE;IACrF,OAAO/D,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;MAC/C8D,IAAI,EAAE,SAAS;MACfV,GAAG,EAAEM,cAAc,CAACL,MAAM,GAAGO,mBAAmB;IAClD,CAAC,CAAC;EACJ;EAEA,IAAIP,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAGF,IAAI,CAACd,MAAM,EAAE;IACvC,MAAMe,GAAG,GAAGD,IAAI,CAACE,MAAM,CAAC;IACxB,OAAOvD,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;MAAE8D,IAAI,EAAE,KAAK;MAAEV;IAAI,CAAC,CAAC;EACxE;EAEA,IAAIO,iBAAiB,EAAE;IACrB,OAAO7D,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;MAC/C8D,IAAI,EAAE,SAAS;MACfV,GAAG,EAAEO,iBAAiB,CAACN,MAAM,GAAGF,IAAI,CAACd,MAAM;IAC7C,CAAC,CAAC;EACJ;EAEA,OAAO9B,SAAS;AAClB;AAEO,SAASwD,2BAA2BA,CAAQ;EACjDC,kBAAkB;EAClBd,OAAO;EACPe,cAAc;EACdd,IAAI;EACJO,cAAc;EACdC,iBAAiB;EACjBE,SAAS;EACTK,SAAS;EACTC,eAAe,EAAE;IAAE7D,GAAG,EAAE8D;GAAY;EACpCC,YAAY;EACZrE,qBAAqB;EACrBsE;AACsC,CAAC,EAAY;EACnD,IAAI;IAAEhE,GAAG,EAAEiE,OAAO;IAAElB,MAAM,EAAEmB;EAAW,CAAC,GAAGH,YAAY;EAEvD,MAAMI,UAAU,GAAIC,SAAkB,IAAK;IAGzC,KAAK,MAAM3E,MAAM,IAAIkE,cAAc,EAAE;MACnC,MAAMU,MAAM,GAAG5E,MAAM,CAACO,GAAG;MACzB,IAAIqE,MAAM,GAAGJ,OAAO,EAAE;MACtB,MAAMrE,OAAO,GAAGuD,sBAAsB,CAAC;QACrCN,IAAI;QACJO,cAAc;QACdC,iBAAiB;QACjBN,MAAM,EAAEmB,UAAU;QAClBxE,qBAAqB;QACrBD;MACF,CAAC,CAAC;MAEF,IAAIG,OAAO,IAAIqE,OAAO,GAAGI,MAAM,IAAIJ,OAAO,GAAGrE,OAAO,GAAGyE,MAAM,EAAE;QAC7DJ,OAAO,GAAGI,MAAM,IAAID,SAAS,GAAGxE,OAAO,GAAG,CAAC,CAAC;QAC5C;MACF;IACF;GACD;EAED,IAAIoE,kBAAkB,CAACD,YAAY,CAAC,EAAE;IACpCI,UAAU,CAACF,OAAO,GAAGH,UAAU,GAAG,CAAC,CAAC;EACtC;EAEA,IAAIJ,kBAAkB,KAAK,YAAY,EAAE;IACvC,MAAMY,YAAY,GAAG1B,OAAO,CAACb,MAAM;IACnC,MAAMwC,iBAAiB,GAAGN,OAAO,KAAKK,YAAY;IAClD,MAAME,mBAAmB,GAAGP,OAAO,KAAK,CAAC,CAAC;IAE1C,IAAIM,iBAAiB,EAAE;MACrB,MAAME,SAAS,GAAGP,UAAU,KAAKN,SAAS;MAC1C,IAAI,CAACa,SAAS,EAAE;QACdR,OAAO,GAAG,CAAC;QACXC,UAAU,IAAI,CAAC;MACjB;KACD,MAAM,IAAIM,mBAAmB,EAAE;MAC9B,MAAME,UAAU,GAAGR,UAAU,KAAKX,SAAS;MAC3C,IAAI,CAACmB,UAAU,EAAE;QACfR,UAAU,IAAI,CAAC;QACfD,OAAO,GAAGK,YAAY,GAAG,CAAC;MAC5B;MACAH,UAAU,CAAC,KAAK,CAAC;IACnB;EACF;EAEA,OAAO;IAAEnE,GAAG,EAAEiE,OAAO;IAAElB,MAAM,EAAEmB;GAAY;AAC7C;AAUO,SAASS,WAAWA,CAAC;EAC1BC,SAAS;EACTrB,SAAS;EACTK,SAAS;EACTjB,gBAAgB,EAAE;IAAEI,MAAM;IAAE/C;GAAK;EACjC6E;AACe,CAAC,EAAW;EAE3B,MAAMC,eAAe,GAAG9E,GAAG,KAAK4E,SAAS;EACzC,MAAMG,gBAAgB,GAAG/E,GAAG,KAAK,CAAC;EAClC,MAAMgF,SAAS,GAAGjC,MAAM,KAAKa,SAAS;EACtC,MAAMqB,UAAU,GAAGlC,MAAM,KAAKQ,SAAS;EAEvC,OAAOsB,QAAQ,GAAGE,gBAAgB,IAAIE,UAAU,GAAGH,eAAe,IAAIE,SAAS;AACjF;ACzKO,MAAME,IAAI,GA2BhB;AAEM,MAAMC,aAAa,GAAI,YAAWD,IAAM;AAExC,MAAME,UAAU,GAMtB;AAEM,MAAMC,mBAAmB,GAAI,mBAAkBD,UAAY;AAE3D,MAAME,cAAc,GAI1B;AAEM,MAAMC,uBAAuB,GAAI,wBAAuBD,cAAgB;AC3CxE,SAASE,WAAWA,CAACzC,MAAc,EAAE0C,MAAe,EAAiB;EAC1E,IAAIA,MAAM,KAAKxF,SAAS,EAAE;IACxB,OAAO;MACL,sBAAsB,EAAE8C,MAAM;MAC9B,kBAAkB,EAAG,GAAE0C,MAAO;KAC/B;EACH;EACA,OAAO;IAAE,sBAAsB,EAAE1C;GAAQ;AAC3C;AAEO,SAAS2C,YAAYA,CAC1BjG,MAA+B,EAC/BG,OAAgB,EACK;EACrB,OAAO;IACL6C,eAAe,EAAEhD,MAAM,CAACO,GAAG,GAAG,CAAC;IAC/B2F,aAAa,EAAE/F,OAAO,KAAKK,SAAS,GAAW,QAAAL,OAAS,KAAGK,SAAS;IACpE2F,gBAAgB,EAAEnG,MAAM,CAACM,MAAM,GAAI,yBAAwBN,MAAM,CAACO,GAAI,GAAE,GAAGC;GAC5E;AACH;AAEO,SAAS4F,gBAAgBA,CAC9BpG,MAA+B,EAC/B,GAAGqG,YAAqC,EAChC;EACR,OAAOC,IAAI,CACTZ,aAAa,EAKb,GAAGW,YAAY,EAHUrG,MAAM,CAACM,MAAM,IAAnCsF,mBAAmB,EACO5F,MAAM,CAACuG,kBAAkB,IAAnDT,uBAGL,CAAC;AACH;AC7BO,MAAM;EAAEU,GAAG;EAAEC,GAAG;EAAEC,KAAK;EAAEC,KAAK;EAAEC,IAAI;EAAEC;AAAI,CAAC,GAAGC,IAAI;AAElD,SAASC,sBAAsBA,CACpCC,SAAkB,EACkB;EACpC,IAAI,OAAOA,SAAS,KAAK,UAAU,EAAE;IACnC,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;EAC1E;AACF;AAEO,SAASC,gBAAgBA,CAC9BC,KAAa,EACb;EAAExE,QAAQ;EAAEC;AAAkC,CAAC,EACvC;EACRuE,KAAK,GAAGV,GAAG,CAACU,KAAK,EAAExE,QAAQ,CAAC;EAG5B,IAAI,OAAOC,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,IAAID,QAAQ,EAAE;IACxD,OAAO6D,GAAG,CAACW,KAAK,EAAEvE,QAAQ,CAAC;EAC7B;EAEA,OAAOuE,KAAK;AACd;AC3BA,MAAMC,aAAa,GAUlB;AAED,MAAMC,sBAAsB,GAAyB,sBAAAD,aAAe;AAEpE,MAAME,aAAa,GAIlB;AAED,MAAMC,sBAAsB,GAAyB,sBAAAD,aAAe;AAEpE,MAAME,QAAQ,GAkBb;AAED,MAAMC,iBAAiB,GAAmB,gBAAAD,QAAU;AAEpD,MAAME,qBAAqB,GAS1B;AAED,MAAMC,8BAA8B,GAAkC,+BAAAD,qBAAuB;AAEtF,SAASE,cAAcA,CAAC;EAAEC,QAAQ;EAAE,GAAGC;CAA4B,EAAE;EAC1E,SAASC,YAAYA,CAACtG,CAAsC,EAAE;IAC5DoG,QAAQ,CAACpG,CAAC,CAACO,MAAM,CAACgG,OAAO,EAAGvG,CAAC,CAACwG,WAAW,CAAgB7C,QAAQ,CAAC;EACpE;EAEA,oBACE8C,IAAA;IACEpF,SAAS,EAAEwD,IAAI,CAACe,sBAAsB,EACFS,KAAK,CAACK,QAAA,IAAvCR,8BACF,CAAE;IAAAS,QAAA,gBAEHvF,GAAA;MACEkB,IAAI,EAAC,UAAU;MAAA,GACX+D,KAAK;MACThF,SAAS,EAAEyE,sBAAuB;MAClCM,QAAQ,EAAEE;KAAa,gBAEzBlF,GAAA;MAAKC,SAAS,EAAE2E;IAAkB;EAAA,CAC7B,CAAC;AAEZ;AC9EA,MAAMY,gBAAgB,GAIrB;AAED,MAAMC,yBAAyB,GAA6B,0BAAAD,gBAAkB;AAE9E,MAAME,KAAK,GAYV;AAED,MAAMC,cAAc,GAAgB,aAAAD,KAAO;AAEpC,SAASE,iBAAiBA,CAAQX,KAAkC,EAAE;EAC3E,oBAAOjF,GAAA,CAAC6F,WAAW;IAAA,GAAKZ;EAAK,CAAI;AACnC;AAEO,SAASY,WAAWA,CAAQ;EACjCC,QAAQ;EACRC,UAAU;EACVC,QAAQ;EACRC;AAC2B,CAAC,EAAE;EAC9B,SAASC,aAAaA,CAAC;IAAEnH;EAA0C,CAAC,EAAE;IACpE,IAAIA,GAAG,KAAK,OAAO,EAAE;MACnBkH,WAAW,EAAE;IACf;EACF;EAEA,MAAME,CAAC,GAAGJ,UAAU,GAAG,mBAAmB,GAAG,mBAAmB;EAEhE,oBACEV,IAAA;IAAMpF,SAAS,EAAEwF,yBAA0B;IAACO,QAAQ,EAAEA,QAAS;IAACI,SAAS,EAAEF,aAAc;IAAAX,QAAA,GACtFO,QAAQ,eACT9F,GAAA;MAAKqG,OAAO,EAAC,UAAU;MAAC/B,KAAK,EAAC,IAAI;MAACnB,MAAM,EAAC,GAAG;MAAClD,SAAS,EAAE0F,cAAe;MAAC,aAAW;MAAAJ,QAAA,eAClFvF,GAAA;QAAMmG,CAAC,EAAEA;OAAE;IAAA,CACR;EAAA,CACD,CAAC;AAEX;ACpDO,SAASG,WAAWA,CAAQrB,KAA6B,EAAE;EAChE,IAAI;IACF,OAAOA,KAAK,CAACzE,GAAG,CAACyE,KAAK,CAAC9H,MAAM,CAAC4B,GAAG,CAAY;EAC/C,CAAC,CAAC,MAAM;IACN,OAAO,IAAI;EACb;AACF;ACHA,MAAMwH,+BAA+B,gBAAGC,aAAa,CAA6B7I,SAAS,CAAC;AAE/E,MAAA8I,gCAAgC,GAAGF,+BAA+B,CAACG,QAAA;AAEzE,SAASC,mBAAmBA,CAAA,EAAmC;EACpE,OAAOC,UAAU,CAACL,+BAA+B,CAAC;AACpD;ACEO,SAASM,mBAAmBA,CAAC;EAClCC,KAAK;EACLd,QAAQ;EACRV,QAAQ;EACRN,QAAQ;EACR,YAAY,EAAE+B,SAAS;EACvB,iBAAiB,EAAEC;AACK,CAAC,EAAE;EAC3B,MAAMjC,cAAc,GAAG4B,mBAAmB,EAAE,CAAE5B,cAAe;EAE7D,OAAOA,cAAc,CAAC;IACpB,YAAY,EAAEgC,SAAS;IACvB,iBAAiB,EAAEC,cAAc;IACjChB,QAAQ;IACRV,QAAQ;IACRH,OAAO,EAAE2B,KAAK;IACd9B;EACF,CAAC,CAAC;AACJ;AC3BA,MAAMiC,mBAAmB,gBAAGT,aAAa,CAAsB7I,SAAS,CAAC;AAElE,MAAMuJ,oBAAoB,GAAGD,mBAAmB,CAACP,QAAQ;AAEhE,MAAMS,yBAAyB,gBAAGX,aAAa,CAG7C7I,SAAS,CAAC;AAEL,MAAMyJ,0BAA0B,GAAGD,yBAAyB,CAACT,QAAQ;AAErE,SAASW,eAAeA,CAAA,EAA8D;EAC3F,MAAMC,mBAAmB,GAAGV,UAAU,CAACK,mBAAmB,CAAC;EAC3D,MAAMM,yBAAyB,GAAGX,UAAU,CAACO,yBAAyB,CAAC;EAEvE,IAAIG,mBAAmB,KAAK3J,SAAS,IAAI4J,yBAAyB,KAAK5J,SAAS,EAAE;IAChF,MAAM,IAAIyG,KAAK,CAAC,oDAAoD,CAAC;EACvE;EAEA,OAAO,CAACkD,mBAAmB,EAAEC,yBAAyB,CAAC;AACzD;ACpBO,MAAMC,iBAAiB,GAAG;AAEjC,SAASC,cAAcA,CAACxC,KAAqC,EAAE;EAC7D,MAAM,CAACyC,aAAa,EAAEC,oBAAoB,CAAC,GAAGN,eAAe,EAAE;EAE/D,oBACErH,GAAA,CAAC6G,mBAAmB;IAClB,cAAW,YAAY;IACvBb,QAAQ,EAAEf,KAAK,CAACe,QAAS;IACzBc,KAAK,EAAEY,aAAc;IACrB1C,QAAQ,EAAGG,OAAO,IAAK;MACrBwC,oBAAoB,CAAC;QAAEzG,IAAI,EAAE,QAAQ;QAAEiE;MAAQ,CAAC,CAAC;IACnD;EAAE,CACH,CAAC;AAEN;AAEA,SAASyC,eAAeA,CAAC3C,KAA+B,EAAE;EACxD,MAAM,CAACyC,aAAa,EAAEC,oBAAoB,CAAC,GAAGN,eAAe,EAAE;EAE/D,oBACErH,GAAA,CAAC6G,mBAAmB;IAClB,cAAW,QAAQ;IACnBb,QAAQ,EAAEf,KAAK,CAACe,QAAS;IACzBc,KAAK,EAAEY,aAAc;IACrB1C,QAAQ,EAAEA,CAACG,OAAO,EAAE0C,YAAY,KAAK;MACnCF,oBAAoB,CAAC;QAAEzG,IAAI,EAAE,KAAK;QAAEV,GAAG,EAAEyE,KAAK,CAACzE,GAAG;QAAE2E,OAAO;QAAE0C;MAAa,CAAC,CAAC;IAC9E;EAAE,CACH,CAAC;AAEN;AAEA,SAASC,oBAAoBA,CAAC7C,KAAoC,EAAE;EAClE,MAAM,CAACyC,aAAa,EAAEC,oBAAoB,CAAC,GAAGN,eAAe,EAAE;EAE/D,oBACErH,GAAA,CAAC6G,mBAAmB;IAClB,cAAW,cAAc;IACzBb,QAAQ,EAAEf,KAAK,CAACe,QAAS;IACzBc,KAAK,EAAEY,aAAc;IACrB1C,QAAQ,EAAGG,OAAO,IAAK;MACrBwC,oBAAoB,CAAC;QAAEzG,IAAI,EAAE,KAAK;QAAEV,GAAG,EAAEyE,KAAK,CAACzE,GAAG;QAAE2E,OAAO;QAAE0C,YAAY,EAAE;MAAM,CAAC,CAAC;IACrF;EAAE,CACH,CAAC;AAEN;AAGO,MAAME,YAA8B,GAAG;EAC5ChJ,GAAG,EAAEyI,iBAAiB;EACtBQ,IAAI,EAAE,EAAE;EACR1D,KAAK,EAAE,EAAE;EACTxE,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,EAAE;EACZkI,SAAS,EAAE,KAAK;EAChBC,QAAQ,EAAE,KAAK;EACfzK,MAAM,EAAE,IAAI;EACZ0K,gBAAgBA,CAAClD,KAAK,EAAE;IACtB,oBAAOjF,GAAA,CAACyH,cAAc;MAAA,GAAKxC;IAAK,CAAG,CAAC;GACrC;EACDmD,UAAUA,CAACnD,KAAK,EAAE;IAChB,oBAAOjF,GAAA,CAAC4H,eAAe;MAAA,GAAK3C;IAAK,CAAG,CAAC;GACtC;EACDoD,eAAeA,CAACpD,KAAK,EAAE;IACrB,oBAAOjF,GAAA,CAAC8H,oBAAoB;MAAA,GAAK7C;IAAK,CAAG,CAAC;EAC5C;AACF;ACrDA,MAAMqD,oBAAoB,GAAG,MAAM;AACnC,MAAMC,wBAAwB,GAAG,EAAE;AAW5B,SAASC,oBAAoBA,CAAQ;EAC1CC,UAAU;EACVC,oBAAoB;EACpBC,mBAAmB;EACnBC,aAAa;EACbC,UAAU;EACVC,oBAAoB;EACpBC;AAC4B,CAAC,EAAE;EAC/B,MAAMC,YAAY,GAAGF,oBAAoB,EAAExE,KAAK,IAAIgE,oBAAoB;EACxE,MAAMW,eAAe,GAAGH,oBAAoB,EAAEhJ,QAAQ,IAAIyI,wBAAwB;EAClF,MAAMW,eAAe,GAAGJ,oBAAoB,EAAE/I,QAAQ,IAAIpC,SAAS;EACnE,MAAMwL,gBAAgB,GAAGL,oBAAoB,EAAEV,UAAU,IAAI9B,WAAW;EACxE,MAAM8C,eAAe,GAAGN,oBAAoB,EAAEZ,QAAQ,IAAI,KAAK;EAC/D,MAAMmB,gBAAgB,GAAGP,oBAAoB,EAAEb,SAAS,IAAI,KAAK;EAEjE,MAAM;IAAE3H,OAAO;IAAEe,cAAc;IAAEjE;GAAuB,GAAGkM,OAAO,CAAC,MAI9D;IACH,IAAIlM,qBAAqB,GAAG,CAAC,CAAC;IAE9B,MAAMkD,OAAO,GAAGmI,UAAU,CAAC5I,GAAG,CAAE0J,SAAS,IAAK;MAC5C,MAAM9L,MAAM,GAAG8L,SAAS,CAAC9L,MAAM,IAAI,KAAK;MAExC,MAAMN,MAAwC,GAAG;QAC/C,GAAGoM,SAAS;QACZ7L,GAAG,EAAE,CAAC;QACND,MAAM;QACNiG,kBAAkB,EAAE,KAAK;QACzBY,KAAK,EAAEiF,SAAS,CAACjF,KAAK,IAAI0E,YAAY;QACtClJ,QAAQ,EAAEyJ,SAAS,CAACzJ,QAAQ,IAAImJ,eAAe;QAC/ClJ,QAAQ,EAAEwJ,SAAS,CAACxJ,QAAQ,IAAImJ,eAAe;QAC/ChB,QAAQ,EAAEqB,SAAS,CAACrB,QAAQ,IAAIkB,eAAe;QAC/CnB,SAAS,EAAEsB,SAAS,CAACtB,SAAS,IAAIoB,gBAAgB;QAClDjB,UAAU,EAAEmB,SAAS,CAACnB,UAAU,IAAIe;OACrC;MAED,IAAI1L,MAAM,EAAE;QACVL,qBAAqB,EAAE;MACzB;MAEA,OAAOD,MAAM;IACf,CAAC,CAAC;IAEFmD,OAAO,CAACkJ,IAAI,CAAC,CAAC;MAAEzK,GAAG,EAAE0K,IAAI;MAAEhM,MAAM,EAAEiM;IAAQ,CAAC,EAAE;MAAE3K,GAAG,EAAE4K,IAAI;MAAElM,MAAM,EAAEmM;IAAQ,CAAC,KAAK;MAE/E,IAAIH,IAAI,KAAKjC,iBAAiB,EAAE,OAAO,CAAC,CAAC;MACzC,IAAImC,IAAI,KAAKnC,iBAAiB,EAAE,OAAO,CAAC;MAGxC,IAAIkC,OAAO,EAAE;QACX,IAAIE,OAAO,EAAE,OAAO,CAAC;QACrB,OAAO,CAAC,CAAC;MACX;MACA,IAAIA,OAAO,EAAE,OAAO,CAAC;MAGrB,OAAO,CAAC;IACV,CAAC,CAAC;IAEF,MAAMvI,cAAyC,GAAG,EAAE;IACpDf,OAAO,CAACuJ,OAAO,CAAC,CAAC1M,MAAM,EAAEO,GAAG,KAAK;MAC/BP,MAAM,CAACO,GAAG,GAAGA,GAAG;MAEhB,IAAIP,MAAM,CAACG,OAAO,IAAI,IAAI,EAAE;QAC1B+D,cAAc,CAACyI,IAAI,CAAC3M,MAAM,CAAC;MAC7B;IACF,CAAC,CAAC;IAEF,IAAIC,qBAAqB,KAAK,CAAC,CAAC,EAAE;MAChCkD,OAAO,CAAClD,qBAAqB,CAAC,CAACsG,kBAAkB,GAAG,IAAI;IAC1D;IAEA,OAAO;MACLpD,OAAO;MACPe,cAAc;MACdjE;KACD;EACH,CAAC,EAAE,CACDqL,UAAU,EACVO,YAAY,EACZC,eAAe,EACfC,eAAe,EACfC,gBAAgB,EAChBE,gBAAgB,EAChBD,eAAe,CAChB,CAAC;EAEF,MAAM;IAAEW,eAAe;IAAEC,aAAa;IAAEC,sBAAsB;IAAEC;GAAe,GAAGZ,OAAO,CAAC,MAKrF;IACH,MAAMY,aAAa,GAAG,IAAIC,GAAG,EAAyC;IACtE,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAIH,sBAAsB,GAAG,CAAC;IAC9B,MAAMF,eAAyB,GAAG,EAAE;IAEpC,KAAK,MAAM5M,MAAM,IAAImD,OAAO,EAAE;MAC5B,IAAIgE,KAAK,GACPqE,mBAAmB,CAAC0B,GAAG,CAAClN,MAAM,CAAC4B,GAAG,CAAC,IAAI2J,oBAAoB,CAAC2B,GAAG,CAAClN,MAAM,CAAC4B,GAAG,CAAC,IAAI5B,MAAM,CAACmH,KAAK;MAE7F,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7BA,KAAK,GAAGD,gBAAgB,CAACC,KAAK,EAAEnH,MAAM,CAAC;MACzC,CAAC,MAAM;QAGLmH,KAAK,GAAGnH,MAAM,CAAC2C,QAAQ;MACzB;MACAiK,eAAe,CAACD,IAAI,CAAI,GAAAxF,KAAM,IAAG,CAAC;MAClC4F,aAAa,CAACI,GAAG,CAACnN,MAAM,EAAE;QAAEmH,KAAK;QAAE8F;MAAK,CAAC,CAAC;MAC1CA,IAAI,IAAI9F,KAAK;IACf;IAEA,IAAIlH,qBAAqB,KAAK,CAAC,CAAC,EAAE;MAChC,MAAMmN,YAAY,GAAGL,aAAa,CAACG,GAAG,CAAC/J,OAAO,CAAClD,qBAAqB,CAAC,CAAE;MACvE6M,sBAAsB,GAAGM,YAAY,CAACH,IAAI,GAAGG,YAAY,CAACjG,KAAK;IACjE;IAEA,MAAM0F,aAAqC,GAAG,EAAE;IAEhD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIpN,qBAAqB,EAAEoN,CAAC,EAAE,EAAE;MAC/C,MAAMrN,MAAM,GAAGmD,OAAO,CAACkK,CAAC,CAAC;MACzBR,aAAa,CAAsB,qBAAA7M,MAAM,CAACO,GAAI,EAAC,CAAC,GAAM,GAAAwM,aAAa,CAACG,GAAG,CAAClN,MAAM,CAAC,CAAEiN,IAAQ;IAC3F;IAEA,OAAO;MAAEL,eAAe;MAAEC,aAAa;MAAEC,sBAAsB;MAAEC;KAAe;GACjF,EAAE,CAACxB,oBAAoB,EAAEC,mBAAmB,EAAErI,OAAO,EAAElD,qBAAqB,CAAC,CAAC;EAE/E,MAAM,CAACqN,mBAAmB,EAAEC,iBAAiB,CAAC,GAAGpB,OAAO,CAAC,MAAwB;IAC/E,IAAI,CAACP,oBAAoB,EAAE;MACzB,OAAO,CAAC,CAAC,EAAEzI,OAAO,CAACb,MAAM,GAAG,CAAC,CAAC;IAChC;IAEA,MAAMkL,YAAY,GAAG9B,UAAU,GAAGoB,sBAAsB;IACxD,MAAMW,aAAa,GAAG/B,UAAU,GAAGD,aAAa;IAEhD,MAAMiC,UAAU,GAAGvK,OAAO,CAACb,MAAM,GAAG,CAAC;IACrC,MAAMqL,sBAAsB,GAAGnH,GAAG,CAACvG,qBAAqB,GAAG,CAAC,EAAEyN,UAAU,CAAC;IAGzE,IAAIF,YAAY,IAAIC,aAAa,EAAE;MACjC,OAAO,CAACE,sBAAsB,EAAEA,sBAAsB,CAAC;IACzD;IAGA,IAAIC,kBAAkB,GAAGD,sBAAsB;IAC/C,OAAOC,kBAAkB,GAAGF,UAAU,EAAE;MACtC,MAAM;QAAET,IAAI;QAAE9F;OAAO,GAAG4F,aAAa,CAACG,GAAG,CAAC/J,OAAO,CAACyK,kBAAkB,CAAC,CAAE;MAGvE,IAAIX,IAAI,GAAG9F,KAAK,GAAGqG,YAAY,EAAE;QAC/B;MACF;MACAI,kBAAkB,EAAE;IACtB;IAGA,IAAIC,gBAAgB,GAAGD,kBAAkB;IACzC,OAAOC,gBAAgB,GAAGH,UAAU,EAAE;MACpC,MAAM;QAAET,IAAI;QAAE9F;OAAO,GAAG4F,aAAa,CAACG,GAAG,CAAC/J,OAAO,CAAC0K,gBAAgB,CAAC,CAAE;MAGrE,IAAIZ,IAAI,GAAG9F,KAAK,IAAIsG,aAAa,EAAE;QACjC;MACF;MACAI,gBAAgB,EAAE;IACpB;IAEA,MAAMP,mBAAmB,GAAG7G,GAAG,CAACkH,sBAAsB,EAAEC,kBAAkB,GAAG,CAAC,CAAC;IAC/E,MAAML,iBAAiB,GAAG/G,GAAG,CAACkH,UAAU,EAAEG,gBAAgB,GAAG,CAAC,CAAC;IAE/D,OAAO,CAACP,mBAAmB,EAAEC,iBAAiB,CAAC;EACjD,CAAC,EAAE,CACDR,aAAa,EACb5J,OAAO,EACPlD,qBAAqB,EACrByL,UAAU,EACVoB,sBAAsB,EACtBrB,aAAa,EACbG,oBAAoB,CACrB,CAAC;EAEF,OAAO;IACLzI,OAAO;IACPe,cAAc;IACdoJ,mBAAmB;IACnBC,iBAAiB;IACjBX,eAAe;IACfC,aAAa;IACb5M,qBAAqB;IACrB6M;GACD;AACH;AC5NO,MAAMgB,eAAe,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGC,SAAS,GAAGC,iBAAuB;ACE3F,SAASC,eAAeA,CAC7B/K,OAA2C,EAC3CV,eAAmD,EACnDmK,eAAkC,EAClCuB,OAAwC,EACxCC,SAAiB,EACjB5C,mBAAgD,EAChDD,oBAAiD,EACjD8C,sBAAgE,EAChEC,uBAAiE,EACjEC,cAAsD,EACtD;EACA,MAAMC,gBAAgB,GAAGC,MAAM,CAACL,SAAS,CAAC;EAC1C,MAAMM,cAAuB,GAAGvL,OAAO,CAACb,MAAM,KAAKG,eAAe,CAACH,MAAM;EAEzE,MAAMqM,+BAAwC,GAE5CD,cAAc,IAAIN,SAAS,KAAKI,gBAAgB,CAACI,OAAO;EAC1D,MAAMC,kBAAkB,GAAG,CAAC,GAAGjC,eAAe,CAAC;EAC/C,MAAMkC,gBAA0B,GAAG,EAAE;EAErC,KAAK,MAAM;IAAElN,GAAG;IAAErB,GAAG;IAAE4G;GAAO,IAAI1E,eAAe,EAAE;IACjD,IACE,OAAO0E,KAAK,KAAK,QAAQ,KACxBwH,+BAA+B,IAAI,CAACpD,oBAAoB,CAACzJ,GAAG,CAACF,GAAG,CAAC,CAAC,IACnE,CAAC4J,mBAAmB,CAAC1J,GAAG,CAACF,GAAG,CAAC,EAC7B;MACAiN,kBAAkB,CAACtO,GAAG,CAAC,GAAG4G,KAAK;MAC/B2H,gBAAgB,CAACnC,IAAI,CAAC/K,GAAG,CAAC;IAC5B;EACF;EAEA,MAAMmN,mBAAmB,GAAGF,kBAAkB,CAACG,IAAI,CAAC,GAAG,CAAC;EAExDlB,eAAe,CAAC,MAAM;IACpBU,gBAAgB,CAACI,OAAO,GAAGR,SAAS;IACpCa,oBAAoB,CAACH,gBAAgB,CAAC;EACxC,CAAC,CAAC;EAEF,SAASG,oBAAoBA,CAACH,gBAAmC,EAAE;IACjE,IAAIA,gBAAgB,CAACxM,MAAM,KAAK,CAAC,EAAE;IAEnCgM,uBAAuB,CAAE/C,oBAAoB,IAAK;MAChD,MAAM2D,uBAAuB,GAAG,IAAIlC,GAAG,CAACzB,oBAAoB,CAAC;MAC7D,IAAI4D,UAAU,GAAG,KAAK;MAEtB,KAAK,MAAMvN,GAAG,IAAIkN,gBAAgB,EAAE;QAClC,MAAMM,aAAa,GAAGC,kBAAkB,CAAClB,OAAO,EAAEvM,GAAG,CAAC;QACtDuN,UAAU,KAAKC,aAAa,KAAK7D,oBAAoB,CAAC2B,GAAG,CAACtL,GAAG,CAAC;QAC9D,IAAIwN,aAAa,KAAK5O,SAAS,EAAE;UAC/B0O,uBAAuB,CAACI,MAAM,CAAC1N,GAAG,CAAC;QACrC,CAAC,MAAM;UACLsN,uBAAuB,CAAC/B,GAAG,CAACvL,GAAG,EAAEwN,aAAa,CAAC;QACjD;MACF;MAEA,OAAOD,UAAU,GAAGD,uBAAuB,GAAG3D,oBAAoB;IACpE,CAAC,CAAC;EACJ;EAEA,SAASgE,kBAAkBA,CAACvP,MAA+B,EAAEwP,SAAiC,EAAE;IAC9F,MAAM;MAAE5N,GAAG,EAAE6N;IAAY,CAAC,GAAGzP,MAAM;IACnC,MAAM6O,kBAAkB,GAAG,CAAC,GAAGjC,eAAe,CAAC;IAC/C,MAAMkC,gBAA0B,GAAG,EAAE;IAErC,KAAK,MAAM;MAAElN,GAAG;MAAErB,GAAG;MAAE4G;KAAO,IAAI1E,eAAe,EAAE;MACjD,IAAIgN,WAAW,KAAK7N,GAAG,EAAE;QACvB,MAAMuF,KAAK,GAAG,OAAOqI,SAAS,KAAK,QAAQ,GAAM,GAAAA,SAAa,OAAGA,SAAS;QAC1EX,kBAAkB,CAACtO,GAAG,CAAC,GAAG4G,KAAK;MACjC,CAAC,MAAM,IAAIuH,cAAc,IAAI,OAAOvH,KAAK,KAAK,QAAQ,IAAI,CAACqE,mBAAmB,CAAC1J,GAAG,CAACF,GAAG,CAAC,EAAE;QACvFiN,kBAAkB,CAACtO,GAAG,CAAC,GAAG4G,KAAK;QAC/B2H,gBAAgB,CAACnC,IAAI,CAAC/K,GAAG,CAAC;MAC5B;IACF;IAEAuM,OAAO,CAACS,OAAO,CAAE7L,KAAK,CAACgM,mBAAmB,GAAGF,kBAAkB,CAACG,IAAI,CAAC,GAAG,CAAC;IACzE,MAAMI,aAAa,GACjB,OAAOI,SAAS,KAAK,QAAQ,GAAGA,SAAS,GAAGH,kBAAkB,CAAClB,OAAO,EAAEsB,WAAW,CAAE;IAKvFC,SAAS,CAAC,MAAM;MACdrB,sBAAsB,CAAE7C,mBAAmB,IAAK;QAC9C,MAAMmE,sBAAsB,GAAG,IAAI3C,GAAG,CAACxB,mBAAmB,CAAC;QAC3DmE,sBAAsB,CAACxC,GAAG,CAACsC,WAAW,EAAEL,aAAa,CAAC;QACtD,OAAOO,sBAAsB;MAC/B,CAAC,CAAC;MACFV,oBAAoB,CAACH,gBAAgB,CAAC;IACxC,CAAC,CAAC;IAEFP,cAAc,GAAGvO,MAAM,CAACO,GAAG,EAAE6O,aAAa,CAAC;EAC7C;EAEA,OAAO;IACLL,mBAAmB;IACnBQ;GACD;AACH;AAEA,SAASF,kBAAkBA,CAAClB,OAAwC,EAAEvM,GAAW,EAAE;EACjF,MAAMgO,QAAQ,GAAgC,6BAAAC,GAAG,CAACC,MAAM,CAAClO,GAAG,CAAK;EACjE,MAAMmO,aAAa,GAAG5B,OAAO,CAACS,OAAO,CAAEoB,aAAa,CAACJ,QAAQ,CAAC;EAC9D,OAAOG,aAAa,EAAEE,qBAAqB,EAAE,CAAC9I,KAAK;AACrD;AC1GO,SAAS+I,iBAAiBA,CAAA,EAAG;EAClC,MAAM/B,OAAO,GAAGM,MAAM,CAAiB,IAAI,CAAC;EAC5C,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGF,QAAQ,CAAC,CAAC,CAAC;EAE7CvC,eAAe,CAAC,MAAM;IACpB,MAAM;MAAE0C;IAAe,CAAC,GAAGzC,MAAM;IAIjC,IAAIyC,cAAc,IAAI,IAAI,EAAE;IAE5B,MAAM;MAAEC,WAAW;MAAEC,YAAY;MAAEC,WAAW;MAAEC;KAAc,GAAGzC,OAAO,CAACS,OAAQ;IACjF,MAAM;MAAEzH,KAAK;MAAEnB;IAAO,CAAC,GAAGmI,OAAO,CAACS,OAAO,CAAEqB,qBAAqB,EAAE;IAClE,MAAMY,YAAY,GAAG1J,KAAK,GAAGwJ,WAAW,GAAGF,WAAW;IACtD,MAAMK,aAAa,GAAG9K,MAAM,GAAG4K,YAAY,GAAGF,YAAY;IAE1DN,aAAa,CAACS,YAAY,CAAC;IAC3BN,YAAY,CAACO,aAAa,CAAC;IAE3B,MAAMC,cAAc,GAAG,IAAIP,cAAc,CAAEQ,OAAO,IAAK;MACrD,MAAMC,IAAI,GAAGD,OAAO,CAAC,CAAC,CAAC,CAACE,cAAc,CAAC,CAAC,CAAC;MAEzCxB,SAAS,CAAC,MAAM;QACdU,aAAa,CAACa,IAAI,CAACd,UAAU,CAAC;QAC9BI,YAAY,CAACU,IAAI,CAACX,SAAS,CAAC;MAC9B,CAAC,CAAC;IACJ,CAAC,CAAC;IACFS,cAAc,CAACI,OAAO,CAAChD,OAAO,CAACS,OAAQ,CAAC;IAExC,OAAO,MAAM;MACXmC,cAAc,CAACK,UAAU,EAAE;KAC5B;GACF,EAAE,EAAE,CAAC;EAEN,OAAO,CAACjD,OAAO,EAAEgC,UAAU,EAAEG,SAAS,CAAC;AACzC;ACnCO,SAASe,aAAaA,CAA2CC,EAAK,EAAK;EAChF,MAAMC,GAAG,GAAG9C,MAAM,CAAC6C,EAAE,CAAC;EAEtBtD,SAAS,CAAC,MAAM;IACduD,GAAG,CAAC3C,OAAO,GAAG0C,EAAE;EAClB,CAAC,CAAC;EAEF,MAAME,UAAU,GAAGC,WAAW,CAAC,CAAC,GAAGvR,IAAgC,KAAK;IACtEqR,GAAG,CAAC3C,OAAO,CAAE,GAAG1O,IAAI,CAAC;GACtB,EAAE,EAAE,CAAC;EAGN,OAAOoR,EAAE,GAAGE,UAAU,GAAGF,EAAE;AAC7B;AChBO,SAASI,iBAAiBA,CAACC,UAAmB,EAAE;EAErD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAE3D,IAAIuB,cAAc,IAAI,CAACD,UAAU,EAAE;IACjCE,iBAAiB,CAAC,KAAK,CAAC;EAC1B;EAEA,SAASC,OAAOA,CAAChR,KAAuC,EAAE;IACxD,IAAIA,KAAK,CAACkB,MAAM,KAAKlB,KAAK,CAACiR,aAAa,EAAE;MACxCF,iBAAiB,CAAC,IAAI,CAAC;IACzB;EACF;EAEA,MAAMG,WAAW,GAAGL,UAAU,IAAI,CAACC,cAAc;EAEjD,OAAO;IACL/I,QAAQ,EAAEmJ,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9BC,aAAa,EAAEN,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;IAClCG,OAAO,EAAEH,UAAU,GAAGG,OAAO,GAAGtR;GACjC;AACH;ACNO,SAAS0R,kBAAkBA,CAAQ;EACxC/O,OAAO;EACPe,cAAc;EACdd,IAAI;EACJO,cAAc;EACdC,iBAAiB;EACjB0J,mBAAmB;EACnBC,iBAAiB;EACjBtN,qBAAqB;EACrBkS,mBAAmB;EACnBC;AAC0B,CAAC,EAAE;EAE7B,MAAMC,QAAQ,GAAGlG,OAAO,CAAC,MAAM;IAC7B,IAAImB,mBAAmB,KAAK,CAAC,EAAE,OAAO,CAAC;IAEvC,IAAI+E,QAAQ,GAAG/E,mBAAmB;IAElC,MAAMgF,cAAc,GAAGA,CAAC1N,MAAc,EAAEzE,OAA2B,KAAK;MACtE,IAAIA,OAAO,KAAKK,SAAS,IAAIoE,MAAM,GAAGzE,OAAO,GAAGmN,mBAAmB,EAAE;QACnE+E,QAAQ,GAAGzN,MAAM;QACjB,OAAO,IAAI;MACb;MACA,OAAO,KAAK;KACb;IAED,KAAK,MAAM5E,MAAM,IAAIkE,cAAc,EAAE;MAEnC,MAAMU,MAAM,GAAG5E,MAAM,CAACO,GAAG;MACzB,IAAIqE,MAAM,IAAIyN,QAAQ,EAAE;MACxB,IAAIC,cAAc,CAAC1N,MAAM,EAAE7E,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;QAAE8D,IAAI,EAAE;OAAU,CAAC,CAAC,EAAE;QACzF;MACF;MAGA,KAAK,IAAIT,MAAM,GAAG6O,mBAAmB,EAAE7O,MAAM,IAAI8O,iBAAiB,EAAE9O,MAAM,EAAE,EAAE;QAC5E,MAAMD,GAAG,GAAGD,IAAI,CAACE,MAAM,CAAC;QACxB,IACEgP,cAAc,CAAC1N,MAAM,EAAE7E,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;UAAE8D,IAAI,EAAE,KAAK;UAAEV;SAAK,CAAC,CAAC,EACvF;UACA;QACF;MACF;MAGA,IAAIM,cAAc,IAAI,IAAI,EAAE;QAC1B,KAAK,MAAMN,GAAG,IAAIM,cAAc,EAAE;UAChC,IACE2O,cAAc,CACZ1N,MAAM,EACN7E,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;YAAE8D,IAAI,EAAE,SAAS;YAAEV;WAAK,CACpE,CAAC,EACD;YACA;UACF;QACF;MACF;MAEA,IAAIO,iBAAiB,IAAI,IAAI,EAAE;QAC7B,KAAK,MAAMP,GAAG,IAAIO,iBAAiB,EAAE;UACnC,IACE0O,cAAc,CACZ1N,MAAM,EACN7E,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;YAAE8D,IAAI,EAAE,SAAS;YAAEV;WAAK,CACpE,CAAC,EACD;YACA;UACF;QACF;MACF;IACF;IAEA,OAAOgP,QAAQ;EACjB,CAAC,EAAE,CACDF,mBAAmB,EACnBC,iBAAiB,EACjBhP,IAAI,EACJO,cAAc,EACdC,iBAAiB,EACjB0J,mBAAmB,EACnBrN,qBAAqB,EACrBiE,cAAc,CACf,CAAC;EAEF,OAAOiI,OAAO,CAAC,MAA0C;IACvD,MAAM1J,eAA0C,GAAG,EAAE;IACrD,KAAK,IAAImC,MAAM,GAAG,CAAC,EAAEA,MAAM,IAAI2I,iBAAiB,EAAE3I,MAAM,EAAE,EAAE;MAC1D,MAAM5E,MAAM,GAAGmD,OAAO,CAACyB,MAAM,CAAC;MAE9B,IAAIA,MAAM,GAAGyN,QAAQ,IAAI,CAACrS,MAAM,CAACM,MAAM,EAAE;MACzCmC,eAAe,CAACkK,IAAI,CAAC3M,MAAM,CAAC;IAC9B;IAEA,OAAOyC,eAAe;GACvB,EAAE,CAAC4P,QAAQ,EAAE9E,iBAAiB,EAAEpK,OAAO,CAAC,CAAC;AAC5C;ACrGO,SAASoP,eAAeA,CAAI;EACjCnP,IAAI;EACJoP,SAAS;EACT9B,YAAY;EACZ+B,SAAS;EACT7G;AACmB,CAAC,EAAE;EACtB,MAAM;IAAE8G,cAAc;IAAEC,gBAAgB;IAAEC,SAAS;IAAEC,YAAY;IAAEC;GAAY,GAAG3G,OAAO,CAAC,MAAM;IAC9F,IAAI,OAAOqG,SAAS,KAAK,QAAQ,EAAE;MACjC,OAAO;QACLE,cAAc,EAAEF,SAAS,GAAGpP,IAAI,CAACd,MAAM;QACvCqQ,gBAAgB,EAAa,WAAAvP,IAAI,CAACd,MAAO,KAAIkQ,SAAc;QAC3DI,SAAS,EAAGtP,MAAc,IAAKA,MAAM,GAAGkP,SAAS;QACjDK,YAAY,EAAEA,CAAA,KAAML,SAAS;QAC7BM,UAAU,EAAGC,MAAc,IAAKpM,KAAK,CAACoM,MAAM,GAAGP,SAAS;OACzD;IACH;IAEA,IAAIE,cAAc,GAAG,CAAC;IACtB,IAAIC,gBAAgB,GAAG,GAAG;IAI1B,MAAMK,YAAY,GAAG5P,IAAI,CAACV,GAAG,CAAEW,GAAG,IAAK;MACrC,MAAM4P,gBAAgB,GAAGT,SAAS,CAACnP,GAAG,CAAC;MACvC,MAAM6P,QAAQ,GAAG;QAAEC,GAAG,EAAET,cAAc;QAAE1M,MAAM,EAAEiN;OAAkB;MAClEN,gBAAgB,IAAO,GAAAM,gBAAqB;MAC5CP,cAAc,IAAIO,gBAAgB;MAClC,OAAOC,QAAQ;IACjB,CAAC,CAAC;IAEF,MAAME,cAAc,GAAI9P,MAAc,IAAK;MACzC,OAAOmD,GAAG,CAAC,CAAC,EAAED,GAAG,CAACpD,IAAI,CAACd,MAAM,GAAG,CAAC,EAAEgB,MAAM,CAAC,CAAC;KAC5C;IAED,OAAO;MACLoP,cAAc;MACdC,gBAAgB;MAChBC,SAAS,EAAGtP,MAAc,IAAK0P,YAAY,CAACI,cAAc,CAAC9P,MAAM,CAAC,CAAC,CAAC6P,GAAG;MACvEN,YAAY,EAAGvP,MAAc,IAAK0P,YAAY,CAACI,cAAc,CAAC9P,MAAM,CAAC,CAAC,CAAC0C,MAAM;MAC7E8M,UAAUA,CAACC,MAAc,EAAE;QACzB,IAAIM,KAAK,GAAG,CAAC;QACb,IAAIC,GAAG,GAAGN,YAAY,CAAC1Q,MAAM,GAAG,CAAC;QACjC,OAAO+Q,KAAK,IAAIC,GAAG,EAAE;UACnB,MAAMC,MAAM,GAAGF,KAAK,GAAG1M,KAAK,CAAC,CAAC2M,GAAG,GAAGD,KAAK,IAAI,CAAC,CAAC;UAC/C,MAAMG,aAAa,GAAGR,YAAY,CAACO,MAAM,CAAC,CAACJ,GAAG;UAE9C,IAAIK,aAAa,KAAKT,MAAM,EAAE,OAAOQ,MAAM;UAE3C,IAAIC,aAAa,GAAGT,MAAM,EAAE;YAC1BM,KAAK,GAAGE,MAAM,GAAG,CAAC;UACpB,CAAC,MAAM,IAAIC,aAAa,GAAGT,MAAM,EAAE;YACjCO,GAAG,GAAGC,MAAM,GAAG,CAAC;UAClB;UAEA,IAAIF,KAAK,GAAGC,GAAG,EAAE,OAAOA,GAAG;QAC7B;QACA,OAAO,CAAC;MACV;KACD;EACH,CAAC,EAAE,CAACd,SAAS,EAAEpP,IAAI,CAAC,CAAC;EAErB,IAAI+O,mBAAmB,GAAG,CAAC;EAC3B,IAAIC,iBAAiB,GAAGhP,IAAI,CAACd,MAAM,GAAG,CAAC;EAEvC,IAAIsJ,oBAAoB,EAAE;IACxB,MAAM6H,iBAAiB,GAAG,CAAC;IAC3B,MAAMC,kBAAkB,GAAGZ,UAAU,CAACL,SAAS,CAAC;IAChD,MAAMkB,gBAAgB,GAAGb,UAAU,CAACL,SAAS,GAAG/B,YAAY,CAAC;IAC7DyB,mBAAmB,GAAG1L,GAAG,CAAC,CAAC,EAAEiN,kBAAkB,GAAGD,iBAAiB,CAAC;IACpErB,iBAAiB,GAAG5L,GAAG,CAACpD,IAAI,CAACd,MAAM,GAAG,CAAC,EAAEqR,gBAAgB,GAAGF,iBAAiB,CAAC;EAChF;EAEA,OAAO;IACLtB,mBAAmB;IACnBC,iBAAiB;IACjBM,cAAc;IACdC,gBAAgB;IAChBC,SAAS;IACTC,YAAY;IACZC;GACD;AACH;ACzFA,MAAMc,cAAc,GAiBnB;AAED,MAAMC,uBAAuB,GAA2B,wBAAAD,cAAgB;AAYzD,SAASE,UAAUA,CAAQ;EACxC1Q,IAAI;EACJD,OAAO;EACPD,gBAAgB;EAChB6Q,uBAAuB;EACvBxQ,cAAc;EACdyQ,YAAY;EACZC,MAAM;EACNC,WAAW;EACXC;AACY,CAAC,EAAE;EACf,SAASC,eAAeA,CAACtT,KAAuC,EAAE;IAChE,IAAIA,KAAK,CAACuT,OAAO,KAAK,CAAC,EAAE;IACzBH,WAAW,CAAC,IAAI,CAAC;IACjBnG,MAAM,CAACuG,gBAAgB,CAAC,WAAW,EAAEC,WAAW,CAAC;IACjDxG,MAAM,CAACuG,gBAAgB,CAAC,SAAS,EAAEE,SAAS,CAAC;IAE7C,SAASD,WAAWA,CAACzT,KAAiB,EAAE;MAItC,IAAIA,KAAK,CAACuT,OAAO,KAAK,CAAC,EAAEG,SAAS,EAAE;IACtC;IAEA,SAASA,SAASA,CAAA,EAAG;MACnBzG,MAAM,CAAC0G,mBAAmB,CAAC,WAAW,EAAEF,WAAW,CAAC;MACpDxG,MAAM,CAAC0G,mBAAmB,CAAC,SAAS,EAAED,SAAS,CAAC;MAChDN,WAAW,CAAC,KAAK,CAAC;MAClBQ,aAAa,EAAE;IACjB;EACF;EAEA,SAASA,aAAaA,CAAA,EAAG;IACvB,MAAMC,UAAU,GAAGZ,uBAAuB,CAACnF,OAAO;IAClD,IAAI+F,UAAU,KAAKnU,SAAS,EAAE;IAE9B,MAAM;MAAE8C;IAAO,CAAC,GAAGJ,gBAAgB;IACnC,MAAM0R,aAAa,GAAGtR,MAAM,GAAGqR,UAAU,GAAGrR,MAAM,GAAG,CAAC,GAAGqR,UAAU;IACnE,MAAME,WAAW,GAAGvR,MAAM,GAAGqR,UAAU,GAAGA,UAAU,GAAG,CAAC,GAAGrR,MAAM;IACjEwR,UAAU,CAACF,aAAa,EAAEC,WAAW,CAAC;IACtCV,oBAAoB,CAAC3T,SAAS,CAAC;EACjC;EAEA,SAASuU,iBAAiBA,CAACjU,KAAuC,EAAE;IAClEA,KAAK,CAACkU,eAAe,EAAE;IACvBF,UAAU,CAAC5R,gBAAgB,CAACI,MAAM,GAAG,CAAC,EAAEF,IAAI,CAACd,MAAM,CAAC;EACtD;EAEA,SAASwS,UAAUA,CAACG,WAAmB,EAAEC,SAAiB,EAAE;IAC1D,MAAM;MAAE3U,GAAG;MAAE+C;IAAO,CAAC,GAAGJ,gBAAgB;IACxC,MAAMlD,MAAM,GAAGmD,OAAO,CAAC5C,GAAG,CAAC;IAC3B,MAAM4U,SAAS,GAAG/R,IAAI,CAACE,MAAM,CAAC;IAC9B,MAAM8R,WAAW,GAAG,CAAC,GAAGhS,IAAI,CAAC;IAC7B,MAAMiS,OAAiB,GAAG,EAAE;IAC5B,KAAK,IAAIhI,CAAC,GAAG4H,WAAW,EAAE5H,CAAC,GAAG6H,SAAS,EAAE7H,CAAC,EAAE,EAAE;MAC5C,IAAI9J,cAAc,CAAC;QAAED,MAAM,EAAE+J,CAAC;QAAE9M;MAAI,CAAC,CAAC,EAAE;QACtC,MAAM+U,UAAU,GAAGrB,MAAM,CAAC;UAAEsB,SAAS,EAAEvV,MAAM,CAAC4B,GAAG;UAAEuT,SAAS;UAAEK,SAAS,EAAEpS,IAAI,CAACiK,CAAC;QAAE,CAAC,CAAC;QACnF,IAAIiI,UAAU,KAAKlS,IAAI,CAACiK,CAAC,CAAC,EAAE;UAC1B+H,WAAW,CAAC/H,CAAC,CAAC,GAAGiI,UAAU;UAC3BD,OAAO,CAAC1I,IAAI,CAACU,CAAC,CAAC;QACjB;MACF;IACF;IAEA,IAAIgI,OAAO,CAAC/S,MAAM,GAAG,CAAC,EAAE;MACtB0R,YAAY,GAAGoB,WAAW,EAAE;QAAEC,OAAO;QAAErV;MAAO,CAAC,CAAC;IAClD;EACF;EAEA,oBACE6C,GAAA;IACEC,SAAS,EAAE+Q,uBAAwB;IACnC4B,WAAW,EAAErB,eAAgB;IAC7BsB,aAAa,EAAEX;EAAkB,CACjC;AAEN;AClFA,MAAMY,WAAW,GAIhB;AAcc,SAASC,QAAQA,CAAQ;EACtC5V,MAAM;EACNG,OAAO;EACPkD,GAAG;EACHC,MAAM;EACNuS,WAAW;EACXC,WAAW;EACX7M,SAAS;EACT8M;AACoB,CAAC,EAAE;EACvB,MAAMC,eAAe,GAAGvH,MAAM,EAAsB;EACpD,MAAMwH,oBAAoB,GAAGjW,MAAM,CAACkW,aAAa,EAAED,oBAAoB,KAAK,KAAK;EAKjF,MAAME,wBAAwB,GAAG9E,aAAa,CAAC,MAAM;IACnD+E,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;EACtB,CAAC,CAAC;EAEFpI,SAAS,CAAC,MAAM;IACd,IAAI,CAACiI,oBAAoB,EAAE;IAE3B,SAASI,wBAAwBA,CAAA,EAAG;MAClCL,eAAe,CAACpH,OAAO,GAAG0H,qBAAqB,CAACH,wBAAwB,CAAC;IAC3E;IAEA7B,gBAAgB,CAAC,WAAW,EAAE+B,wBAAwB,EAAE;MAAEE,OAAO,EAAE;IAAK,CAAC,CAAC;IAE1E,OAAO,MAAM;MACX9B,mBAAmB,CAAC,WAAW,EAAE4B,wBAAwB,EAAE;QAAEE,OAAO,EAAE;MAAK,CAAC,CAAC;MAC7EC,kBAAkB,EAAE;KACrB;EACH,CAAC,EAAE,CAACP,oBAAoB,EAAEE,wBAAwB,CAAC,CAAC;EAEpD,SAASK,kBAAkBA,CAAA,EAAG;IAC5BC,oBAAoB,CAACT,eAAe,CAACpH,OAAQ,CAAC;EAChD;EAEA,SAAS7F,aAAaA,CAACjI,KAA0C,EAAE;IACjE,IAAImI,SAAS,EAAE;MACb,MAAMjI,SAAS,GAAGH,eAAe,CAACC,KAAK,CAAC;MACxCmI,SAAS,CACP;QACEyN,IAAI,EAAE,MAAM;QACZrT,GAAG;QACHrD,MAAM;QACNsD,MAAM;QACNyS,QAAQA,CAAA,EAAG;UACTA,QAAQ,CAACjV,KAAK,CAAC;SAChB;QACDsV;OACD,EACDpV,SACF,CAAC;MACD,IAAIA,SAAS,CAACE,sBAAsB,EAAE,EAAE;IAC1C;IAEA,IAAIJ,KAAK,CAACc,GAAG,KAAK,QAAQ,EAAE;MAE1BwU,OAAO,EAAE;IACX,CAAC,MAAM,IAAItV,KAAK,CAACc,GAAG,KAAK,OAAO,EAAE;MAChCwU,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,MAAM,IAAIrU,kBAAkB,CAACjB,KAAK,CAAC,EAAE;MACpCiV,QAAQ,CAACjV,KAAK,CAAC;IACjB;EACF;EAEA,SAASsV,OAAOA,CAACO,aAAa,GAAG,KAAK,EAAEC,eAAe,GAAG,IAAI,EAAE;IAC9D,IAAID,aAAa,EAAE;MACjBd,WAAW,CAACxS,GAAG,EAAE,IAAI,EAAEuT,eAAe,CAAC;IACzC,CAAC,MAAM;MACLd,WAAW,CAACc,eAAe,CAAC;IAC9B;EACF;EAEA,SAASC,iBAAiBA,CAACxT,GAAM,EAAEyT,qBAAqB,GAAG,KAAK,EAAE;IAChEjB,WAAW,CAACxS,GAAG,EAAEyT,qBAAqB,EAAEA,qBAAqB,CAAC;EAChE;EAEA,MAAM;IAAEC;EAAU,CAAC,GAAG/W,MAAM;EAC5B,MAAM8C,SAAS,GAAGsD,gBAAgB,CAChCpG,MAAM,EACN,sBAAsB,EAEtB,OAAO+W,SAAS,KAAK,UAAU,GAAGA,SAAS,CAAC1T,GAAG,CAAC,GAAG0T,SACrD,EAFE,CAAC/W,MAAM,CAACkW,aAAa,EAAEc,kBAAkB,IAAIrB,WAE/C,CAAC;EAED,oBACE9S,GAAA;IACEoU,IAAI,EAAC,UAAU;IACf,iBAAejX,MAAM,CAACO,GAAG,GAAG,CAAE;IAC9B,gBAAcJ,OAAQ;IACtB,eAAa;IACb2C,SAAS,EAAEA,SAAU;IACrBC,KAAK,EAAEkD,YAAY,CAACjG,MAAM,EAAEG,OAAO,CAAE;IACrC8I,SAAS,EAAEF,aAAc;IACzBmO,kBAAkB,EAAEV,kBAAmB;IAAApO,QAAA,EAEtCpI,MAAM,CAACwD,cAAc,IAAI,IAAI,iBAC5B0E,IAAA,CAAAiP,QAAA;MAAA/O,QAAA,EACG,CAAApI,MAAM,CAACwD,cAAc,CAAC;QACrBxD,MAAM;QACNqD,GAAG;QACHwS,WAAW,EAAEgB,iBAAiB;QAC9BT;OACD,CAAC,EACDpW,MAAM,CAACkW,aAAa,EAAEc,kBAAkB,IACvChX,MAAM,CAACiL,UAAU,CAAC;QAChBjL,MAAM;QACNqD,GAAG;QACHE,cAAc,EAAE,IAAI;QACpBsF,QAAQ,EAAE,CAAC,CAAC;QACZgN,WAAW,EAAEgB;MACf,CAAC,CAAC;KAEP;EAAA,CACE,CAAC;AAEV;AClKA,MAAMO,cAAc,GASnB;AAED,MAAMC,uBAAuB,GAA2B,wBAAAD,cAAgB;AAExE,MAAME,cAAc,GAOnB;AAED,MAAMC,uBAAuB,GAA2B,wBAAAD,cAAgB;AAEzD,SAAStM,gBAAgBA,CAAQ;EAC9ChL,MAAM;EACNwX,aAAa;EACbC,QAAQ;EACRC,MAAM;EACN7O;AAC4B,CAAC,EAAE;EAC/B,IAAI,CAAC7I,MAAM,CAAC+K,QAAQ,EAAE,OAAO/K,MAAM,CAAC6K,IAAI;EAExC,oBACEhI,GAAA,CAAC8U,kBAAkB;IACjBD,MAAM,EAAEA,MAAO;IACfF,aAAa,EAAEA,aAAc;IAC7BC,QAAQ,EAAEA,QAAS;IACnB5O,QAAQ,EAAEA,QAAS;IAAAT,QAAA,EAElBpI,MAAM,CAAC6K;EAAI,CACM,CAAC;AAEzB;AAWA,SAAS8M,kBAAkBA,CAAQ;EACjCD,MAAM;EACNF,aAAa;EACbC,QAAQ;EACRrP,QAAQ;EACRS;AAC8B,CAAC,EAAE;EACjC,MAAM+O,gBAAgB,GAAGpO,mBAAmB,EAAS,CAAEoO,gBAAiB;EAExE,SAAS7O,aAAaA,CAACjI,KAA2C,EAAE;IAClE,IAAIA,KAAK,CAACc,GAAG,KAAK,GAAG,IAAId,KAAK,CAACc,GAAG,KAAK,OAAO,EAAE;MAE9Cd,KAAK,CAAC+W,cAAc,EAAE;MACtBH,MAAM,CAAC5W,KAAK,CAACY,OAAO,IAAIZ,KAAK,CAACa,OAAO,CAAC;IACxC;EACF;EAEA,SAASmW,WAAWA,CAAChX,KAAwC,EAAE;IAC7D4W,MAAM,CAAC5W,KAAK,CAACY,OAAO,IAAIZ,KAAK,CAACa,OAAO,CAAC;EACxC;EAEA,oBACEuG,IAAA;IACEW,QAAQ,EAAEA,QAAS;IACnB/F,SAAS,EAAEuU,uBAAwB;IACnCU,OAAO,EAAED,WAAY;IACrB7O,SAAS,EAAEF,aAAc;IAAAX,QAAA,gBAEzBvF,GAAA;MAAMC,SAAS,EAAEyU,uBAAwB;MAAAnP,QAAA,EAAEA;KAAe,gBAC1DvF,GAAA;MAAAuF,QAAA,EAAOwP,gBAAgB,CAAC;QAAEJ,aAAa;QAAEC;OAAU;IAAC,CAAO;EAAA,CACvD,CAAC;AAEX;ACnFA,MAAMO,aAAa,GAclB;AAED,MAAMC,sBAAsB,GAAyB,sBAAAD,aAAe;AAkBrD,SAASE,UAAUA,CAAQ;EACxClY,MAAM;EACNG,OAAO;EACPgY,cAAc;EACd5J,cAAc;EACd6J,WAAW;EACXC,mBAAmB;EACnBC,UAAU;EACVC,eAAe;EACfC;AACsB,CAAC,EAAE;EACzB,MAAMC,KAAK,GAAGD,SAAS,KAAK,KAAK;EACjC,MAAM;IAAE3P,QAAQ;IAAEoJ,aAAa;IAAEH;EAAQ,CAAC,GAAGJ,iBAAiB,CAACyG,cAAc,CAAC;EAC9E,MAAMO,SAAS,GAAGN,WAAW,EAAEO,SAAS,CAAEtM,IAAI,IAAKA,IAAI,CAACkJ,SAAS,KAAKvV,MAAM,CAAC4B,GAAG,CAAC;EACjF,MAAMgX,UAAU,GACdF,SAAS,KAAKlY,SAAS,IAAIkY,SAAS,GAAG,CAAC,CAAC,GAAGN,WAAW,CAAEM,SAAS,CAAC,GAAGlY,SAAS;EACjF,MAAMgX,aAAa,GAAGoB,UAAU,EAAEJ,SAAS;EAC3C,MAAMf,QAAQ,GAAGmB,UAAU,KAAKpY,SAAS,IAAI4X,WAAW,CAAE9V,MAAM,GAAG,CAAC,GAAGoW,SAAS,GAAI,CAAC,GAAGlY,SAAS;EACjG,MAAMqY,QAAQ,GACZrB,aAAa,IAAI,CAACC,QAAQ,GAAID,aAAa,KAAK,KAAK,GAAG,WAAW,GAAG,YAAY,GAAIhX,SAAS;EAEjG,MAAMsC,SAAS,GAAGsD,gBAAgB,CAACpG,MAAM,EAAEA,MAAM,CAAC8Y,eAAe,EACrC9Y,MAAM,CAAC8K,SAAA,IAAhCmN,sBACF,CAAC;EAEF,MAAMc,kBAAgB,GAAG/Y,MAAM,CAACgL,gBAAgB,IAAIA,gBAAuB;EAE3E,SAASgO,aAAaA,CAAClY,KAAyC,EAAE;IAChE,IAAIA,KAAK,CAACmY,WAAW,KAAK,OAAO,IAAInY,KAAK,CAACuT,OAAO,KAAK,CAAC,EAAE;MACxD;IACF;IAEA,MAAM;MAAEtC,aAAa;MAAEmH;IAAU,CAAC,GAAGpY,KAAK;IAC1C,MAAM;MAAEqY,KAAK;MAAElM;IAAK,CAAC,GAAG8E,aAAa,CAAC9B,qBAAqB,EAAE;IAC7D,MAAM8C,MAAM,GAAG0F,KAAK,GAAG3X,KAAK,CAACsY,OAAO,GAAGnM,IAAI,GAAGkM,KAAK,GAAGrY,KAAK,CAACsY,OAAO;IAEnE,IAAIrG,MAAM,GAAG,EAAE,EAAE;MAEf;IACF;IAEA,SAASsG,aAAaA,CAACvY,KAAmB,EAAE;MAE1CA,KAAK,CAAC+W,cAAc,EAAE;MACtB,MAAM;QAAEsB,KAAK;QAAElM;MAAK,CAAC,GAAG8E,aAAa,CAAC9B,qBAAqB,EAAE;MAC7D,MAAM9I,KAAK,GAAGsR,KAAK,GAAGU,KAAK,GAAGpG,MAAM,GAAGjS,KAAK,CAACsY,OAAO,GAAGtY,KAAK,CAACsY,OAAO,GAAGrG,MAAM,GAAG9F,IAAI;MACpF,IAAI9F,KAAK,GAAG,CAAC,EAAE;QACboH,cAAc,CAACvO,MAAM,EAAEkH,gBAAgB,CAACC,KAAK,EAAEnH,MAAM,CAAC,CAAC;MACzD;IACF;IAEA,SAASsZ,oBAAoBA,CAAA,EAAG;MAC9BvH,aAAa,CAAC0C,mBAAmB,CAAC,aAAa,EAAE4E,aAAa,CAAC;MAC/DtH,aAAa,CAAC0C,mBAAmB,CAAC,oBAAoB,EAAE6E,oBAAoB,CAAC;IAC/E;IAEAvH,aAAa,CAACwH,iBAAiB,CAACL,SAAS,CAAC;IAC1CnH,aAAa,CAACuC,gBAAgB,CAAC,aAAa,EAAE+E,aAAa,CAAC;IAC5DtH,aAAa,CAACuC,gBAAgB,CAAC,oBAAoB,EAAEgF,oBAAoB,CAAC;EAC5E;EAEA,SAAS5B,MAAMA,CAAC8B,SAAkB,EAAE;IAClC,IAAInB,mBAAmB,IAAI,IAAI,EAAE;IACjC,MAAM;MAAEoB;IAAoB,CAAC,GAAGzZ,MAAM;IACtC,IAAI4Y,UAAU,KAAKpY,SAAS,EAAE;MAE5B,MAAMkZ,QAAoB,GAAG;QAC3BnE,SAAS,EAAEvV,MAAM,CAAC4B,GAAG;QACrB4W,SAAS,EAAEiB,mBAAmB,GAAG,MAAM,GAAG;OAC3C;MACDpB,mBAAmB,CAACD,WAAW,IAAIoB,SAAS,GAAG,CAAC,GAAGpB,WAAW,EAAEsB,QAAQ,CAAC,GAAG,CAACA,QAAQ,CAAC,CAAC;IACzF,CAAC,MAAM;MACL,IAAIC,cAAsC;MAC1C,IACGF,mBAAmB,KAAK,IAAI,IAAIjC,aAAa,KAAK,MAAM,IACxDiC,mBAAmB,KAAK,IAAI,IAAIjC,aAAa,KAAK,KAAM,EACzD;QACAmC,cAAc,GAAG;UACfpE,SAAS,EAAEvV,MAAM,CAAC4B,GAAG;UACrB4W,SAAS,EAAEhB,aAAa,KAAK,KAAK,GAAG,MAAM,GAAG;SAC/C;MACH;MACA,IAAIgC,SAAS,EAAE;QACb,MAAMI,eAAe,GAAG,CAAC,GAAGxB,WAAY,CAAC;QACzC,IAAIuB,cAAc,EAAE;UAElBC,eAAe,CAAClB,SAAS,CAAE,GAAGiB,cAAc;QAC9C,CAAC,MAAM;UAELC,eAAe,CAACC,MAAM,CAACnB,SAAS,EAAG,CAAC,CAAC;QACvC;QACAL,mBAAmB,CAACuB,eAAe,CAAC;MACtC,CAAC,MAAM;QACLvB,mBAAmB,CAACsB,cAAc,GAAG,CAACA,cAAc,CAAC,GAAG,EAAE,CAAC;MAC7D;IACF;EACF;EAEA,SAAS5B,OAAOA,CAAA,EAAG;IACjBO,UAAU,CAACtY,MAAM,CAACO,GAAG,CAAC;EACxB;EAEA,SAASmV,aAAaA,CAAC5U,KAAuC,EAAE;IAC9D,MAAM;MAAEqY,KAAK;MAAElM;IAAK,CAAC,GAAGnM,KAAK,CAACiR,aAAa,CAAC9B,qBAAqB,EAAE;IACnE,MAAM8C,MAAM,GAAG0F,KAAK,GAAG3X,KAAK,CAACsY,OAAO,GAAGnM,IAAI,GAAGkM,KAAK,GAAGrY,KAAK,CAACsY,OAAO;IAEnE,IAAIrG,MAAM,GAAG,EAAE,EAAE;MAEf;IACF;IAEAxE,cAAc,CAACvO,MAAM,EAAE,aAAa,CAAC;EACvC;EAEA,SAAS8Z,WAAWA,CAAChZ,KAAuC,EAAE;IAC5DgR,OAAO,GAAGhR,KAAK,CAAC;IAChB,IAAIyX,eAAe,EAAE;MAEnBD,UAAU,CAAC,CAAC,CAAC;IACf;EACF;EAEA,oBACEzV,GAAA;IACEoU,IAAI,EAAC,cAAc;IACnB,iBAAejX,MAAM,CAACO,GAAG,GAAG,CAAE;IAC9B,iBAAe4X,cAAe;IAC9B,aAAWU,QAAS;IACpB,gBAAc1Y,OAAO;IAErB0I,QAAQ,EAAE0P,eAAe,GAAG,CAAC,GAAG1P,QAAS;IACzC/F,SAAS,EAAEA,SAAU;IACrBC,KAAK,EAAEkD,YAAY,CAACjG,MAAM,EAAEG,OAAO,CAAE;IACrC2R,OAAO,EAAEgI,WAAY;IACrB/B,OAAO,EAAEA,OAAQ;IACjBrC,aAAa,EAAE1V,MAAM,CAAC8K,SAAS,GAAG4K,aAAa,GAAGlV,SAAU;IAC5DwY,aAAa,EAAEhZ,MAAM,CAAC8K,SAAS,GAAGkO,aAAa,GAAGxY,SAAU;IAAA4H,QAAA,EAE3D2Q,kBAAgB,CAAC;MAChB/Y,MAAM;MACNwX,aAAa;MACbC,QAAQ;MACRC,MAAM;MACN7O,QAAQ,EAAEoJ;KACX;EAAC,CACC,CAAC;AAEV;AC3LO,MAAM5O,GAAG,GAkBf;AAEM,MAAM0W,YAAY,GAAI,WAAU1W,GAAK;AAErC,MAAM2W,WAAW,GAKvB;AAEM,MAAMC,oBAAoB,GAAG,kBAAkB;AAE/C,MAAMC,yBAAyB,GAWrC;AClBD,MAAMC,SAAS,GAkBd;AAED,MAAMC,kBAAkB,GAAqB,kBAAAD,SAAW;AAExD,SAASE,SAASA,CAA6B;EAC7ClX,OAAO;EACPoL,cAAc;EACd6J,WAAW;EACXC,mBAAmB;EACnBpY,qBAAqB;EACrBqa,eAAe;EACfhC,UAAU;EACVC,eAAe;EACfC;AACwB,CAAC,EAAE;EAC3B,MAAM+B,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGrX,OAAO,CAACb,MAAM,EAAEkY,KAAK,EAAE,EAAE;IACnD,MAAMxa,MAAM,GAAGmD,OAAO,CAACqX,KAAK,CAAC;IAC7B,MAAMra,OAAO,GAAGJ,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;MAAE8D,IAAI,EAAE;IAAS,CAAC,CAAC;IAC7E,IAAI5D,OAAO,KAAKK,SAAS,EAAE;MACzBga,KAAK,IAAIra,OAAO,GAAG,CAAC;IACtB;IAEAoa,KAAK,CAAC5N,IAAI,eACR9J,GAAA,CAACqV,UAAU;MAETlY,MAAM,EAAEA,MAAO;MACfG,OAAO,EAAEA,OAAQ;MACjBgY,cAAc,EAAEmC,eAAe,KAAKta,MAAM,CAACO,GAAI;MAC/CgO,cAAc,EAAEA,cAAe;MAC/B8J,mBAAmB,EAAEA,mBAAoB;MACzCD,WAAW,EAAEA,WAAY;MACzBE,UAAU,EAAEA,UAAW;MACvBC,eAAe,EAAEA,eAAe,IAAIiC,KAAK,KAAK,CAAE;MAChDhC,SAAS,EAAEA;IAAU,GAThBxY,MAAM,CAAC4B,GAAA,CAWhB,CAAC;EACH;EAEA,oBACEiB,GAAA;IACEoU,IAAI,EAAC,KAAK;IACV,iBAAe,CAAE;IACjBnU,SAAS,EAAEwD,IAAI,CAAC8T,kBAAkB,EACRE,eAAe,KAAK,CAAC,KAA5CL,oBACF,CAAE;IACHlX,KAAK,EAAEgD,WAAW,CAAC,CAAC,CAAE;IAAAqC,QAAA,EAErBmS;EAAK,CACH,CAAC;AAEV;AAEA,MAAAE,WAAA,GAAe,aAAAC,IAAI,CAACL,SAAS,CAAC;AC1F9B,MAAMM,UAAU,GAIf;AAED,MAAMC,mBAAmB,GAAsB,mBAAAD,UAAY;AAE3D,MAAME,eAAe,GAQpB;AAED,MAAMC,wBAAwB,GAA4B,yBAAAD,eAAiB;AAE3E,SAASE,IAAIA,CAAQ;EACnB/a,MAAM;EACNG,OAAO;EACPgY,cAAc;EACd6C,QAAQ;EACRC,aAAa;EACb5X,GAAG;EACHC,MAAM;EACN4X,UAAU;EACVnD,OAAO;EACPrC,aAAa;EACbyF,aAAa;EACbtF,WAAW;EACXyC,UAAU;EACV,GAAGxQ;AACqB,CAAC,EAAE;EAC3B,MAAM;IAAEe,QAAQ;IAAEoJ,aAAa;IAAEH;EAAQ,CAAC,GAAGJ,iBAAiB,CAACyG,cAAc,CAAC;EAE9E,MAAM;IAAEpB;EAAU,CAAC,GAAG/W,MAAM;EAC5B,MAAM8C,SAAS,GAAGsD,gBAAgB,CAChCpG,MAAM,EAKN,OAAO+W,SAAS,KAAK,UAAU,GAAGA,SAAS,CAAC1T,GAAG,CAAC,GAAG0T,SACrD,EAJ2BiE,QAAQ,IAA9BJ,mBAAmB,EACQK,aAAA,IAA3BH,wBAGL,CAAC;EACD,MAAMM,UAAU,GAAG7X,cAAc,CAACvD,MAAM,EAAEqD,GAAG,CAAC;EAE9C,SAASgY,iBAAiBA,CAACC,UAAoB,EAAE;IAC/ChD,UAAU,CAAC;MAAEhV,MAAM;MAAE/C,GAAG,EAAEP,MAAM,CAACO;KAAK,EAAE+a,UAAU,CAAC;EACrD;EAEA,SAASxD,WAAWA,CAAChX,KAAuC,EAAE;IAC5D,IAAIiX,OAAO,EAAE;MACX,MAAM/W,SAAS,GAAGH,eAAe,CAACC,KAAK,CAAC;MACxCiX,OAAO,CAAC;QAAE1U,GAAG;QAAErD,MAAM;QAAEsY,UAAU,EAAE+C;OAAmB,EAAEra,SAAS,CAAC;MAClE,IAAIA,SAAS,CAACE,sBAAsB,EAAE,EAAE;IAC1C;IACAma,iBAAiB,EAAE;EACrB;EAEA,SAASE,iBAAiBA,CAACza,KAAuC,EAAE;IAClE,IAAIqa,aAAa,EAAE;MACjB,MAAMna,SAAS,GAAGH,eAAe,CAACC,KAAK,CAAC;MACxCqa,aAAa,CAAC;QAAE9X,GAAG;QAAErD,MAAM;QAAEsY,UAAU,EAAE+C;OAAmB,EAAEra,SAAS,CAAC;MACxE,IAAIA,SAAS,CAACE,sBAAsB,EAAE,EAAE;IAC1C;IACAma,iBAAiB,EAAE;EACrB;EAEA,SAAStG,iBAAiBA,CAACjU,KAAuC,EAAE;IAClE,IAAI4U,aAAa,EAAE;MACjB,MAAM1U,SAAS,GAAGH,eAAe,CAACC,KAAK,CAAC;MACxC4U,aAAa,CAAC;QAAErS,GAAG;QAAErD,MAAM;QAAEsY,UAAU,EAAE+C;OAAmB,EAAEra,SAAS,CAAC;MACxE,IAAIA,SAAS,CAACE,sBAAsB,EAAE,EAAE;IAC1C;IACAma,iBAAiB,CAAC,IAAI,CAAC;EACzB;EAEA,SAASG,eAAeA,CAACC,MAAS,EAAE;IAClC5F,WAAW,CAAC7V,MAAM,EAAEyb,MAAM,CAAC;EAC7B;EAEA,oBACEvT,IAAA;IACE+O,IAAI,EAAC,UAAU;IACf,iBAAejX,MAAM,CAACO,GAAG,GAAG,CAAE;IAC9B,iBAAe4X,cAAe;IAC9B,gBAAchY,OAAQ;IACtB,eAAe,GAACib,UAAU,IAAI5a,SAAU;IACxCqI,QAAQ,EAAEA,QAAS;IACnB/F,SAAS,EAAEA,SAAU;IACrBC,KAAK,EAAEkD,YAAY,CAACjG,MAAM,EAAEG,OAAO,CAAE;IACrC4X,OAAO,EAAED,WAAY;IACrBpC,aAAa,EAAEX,iBAAkB;IACjCoG,aAAa,EAAEI,iBAAkB;IACjCzJ,OAAO,EAAEA,OAAQ;IAAA,GACbhK,KAAK;IAAAM,QAAA,EAER,CAAApI,MAAM,CAACiL,UAAU,CAAC;MACjBjL,MAAM;MACNqD,GAAG;MACHE,cAAc,EAAE6X,UAAU;MAC1BvS,QAAQ,EAAEoJ,aAAa;MACvB4D,WAAW,EAAE2F;KACd,CAAC,EACDN,UAAU;EAAA,CACR,CAAC;AAEV;AAEA,MAAAQ,MAAA,GAAe,aAAAhB,IAAI,CAACK,IAAI,CAAC;AC9GzB,SAASY,GAAGA,CACV;EACE7Y,SAAS;EACTQ,MAAM;EACNsY,YAAY;EACZ5V,MAAM;EACNsU,eAAe;EACf/P,aAAa;EACbsR,aAAa;EACbC,kBAAkB;EAClB7b,qBAAqB;EACrBoD,GAAG;EACHZ,eAAe;EACfsZ,kBAAkB;EAClBC,sBAAsB;EACtBC,WAAW;EACXC,iBAAiB;EACjBC,iBAAiB;EACjBC,QAAQ;EACRjI,oBAAoB;EACpBkI,YAAY;EACZxG,WAAW;EACXyC,UAAU;EACV,GAAGxQ;AACkB,CAAC,EACxByJ,GAA8B,EAC9B;EACA,MAAMiK,eAAe,GAAGnK,aAAa,CAAC,CAACrR,MAA+B,EAAEyb,MAAS,KAAK;IACpF5F,WAAW,CAAC7V,MAAM,EAAEsD,MAAM,EAAEmY,MAAM,CAAC;EACrC,CAAC,CAAC;EAEF,SAASa,eAAeA,CAACxb,KAAuC,EAAE;IAChEqT,oBAAoB,GAAG7Q,MAAM,CAAC;IAC9B+Y,YAAY,GAAGvb,KAAK,CAAC;EACvB;EAEAgC,SAAS,GAAGwD,IAAI,CACdyT,YAAY,EACD,WAAAzW,MAAM,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG,KAAM,EAAC,EAI9C8Y,QAAQ,GAAG/Y,GAAG,EAAEC,MAAM,CAAC,EACvBR,SAAS,EAHiBwX,eAAe,KAAK,CAAC,CAAC,IAA7CL,oBAIL,CAAC;EAED,MAAMM,KAAK,GAAG,EAAE;EAEhB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG/X,eAAe,CAACH,MAAM,EAAEkY,KAAK,EAAE,EAAE;IAC3D,MAAMxa,MAAM,GAAGyC,eAAe,CAAC+X,KAAK,CAAC;IACrC,MAAM;MAAEja;IAAI,CAAC,GAAGP,MAAM;IACtB,MAAMG,OAAO,GAAGJ,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;MAAE8D,IAAI,EAAE,KAAK;MAAEV;IAAI,CAAC,CAAC;IAC/E,IAAIlD,OAAO,KAAKK,SAAS,EAAE;MACzBga,KAAK,IAAIra,OAAO,GAAG,CAAC;IACtB;IAEA,MAAMgY,cAAc,GAAGmC,eAAe,KAAK/Z,GAAG;IAE9C,IAAI4X,cAAc,IAAI4D,kBAAkB,EAAE;MACxCxB,KAAK,CAAC5N,IAAI,CAACoP,kBAAkB,CAAC;IAChC,CAAC,MAAM;MACLxB,KAAK,CAAC5N,IAAI,eACR9J,GAAA,CAAC6Y,MAAI;QAEH1b,MAAM,EAAEA,MAAO;QACfG,OAAO,EAAEA,OAAQ;QACjBkD,GAAG,EAAEA,GAAI;QACTC,MAAM,EAAEA,MAAO;QACf0X,QAAQ,EAAEa,aAAa,KAAKtb,GAAI;QAChC0a,aAAa,EAAEa,kBAAkB,KAAKvb,GAAI;QAC1C4X,cAAc,EAAEA,cAAe;QAC/B+C,UAAU,EAAE/C,cAAc,GAAG6D,sBAAsB,GAAGxb,SAAU;QAChEuX,OAAO,EAAEkE,WAAY;QACrBvG,aAAa,EAAEwG,iBAAkB;QACjCf,aAAa,EAAEgB,iBAAkB;QACjCtG,WAAW,EAAE2F,eAAgB;QAC7BlD,UAAU,EAAEA;MAAW,GAblBtY,MAAM,CAAC4B,GAcb,CACH,CAAC;IACH;EACF;EAEA,oBACEiB,GAAA,CAACkH,oBAAoB;IAACJ,KAAK,EAAEY,aAAc;IAAAnC,QAAA,eACzCvF,GAAA;MACEoU,IAAI,EAAC,KAAK;MACV1F,GAAG,EAAEA,GAAI;MACTzO,SAAS,EAAEA,SAAU;MACrBuZ,YAAY,EAAEC,eAAgB;MAC9BvZ,KAAK,EAAEgD,WAAW,CAAC6V,YAAY,EAAE5V,MAAM,CAAE;MAAA,GACrC8B,KAAK;MAAAM,QAAA,EAERmS;KACE;EAAC,CACc,CAAC;AAE3B;AAEA,MAAMgC,YAAY,gBAAG7B,IAAI,eAAC8B,UAAU,CAACb,GAAG,CAAC,CAEzB;AAEhB,MAAAc,cAAA,GAAeF,YAAY;AAEpB,SAASG,gBAAgBA,CAAQ9a,GAAc,EAAEkG,KAA4B,EAAE;EACpF,oBAAOjF,GAAA,CAAC0Z,YAAY;IAAA,GAAezU;EAAK,GAAdlG,GAAiB,CAAC;AAC9C;ACzGe,SAAS+a,YAAYA,CAAC;EACnCC,gBAAgB,EAAE;IAAErc,GAAG;IAAE+C;GAAQ;EACjCuZ,WAAW;EACXC;AAKF,CAAC,EAAE;EACD,MAAMvL,GAAG,GAAG9C,MAAM,CAAiB,IAAI,CAAC;EAExCX,eAAe,CAAC,MAAM;IAGpBrN,cAAc,CAAC8Q,GAAG,CAAC3C,OAAO,CAAC;EAC7B,CAAC,CAAC;EAEFd,eAAe,CAAC,MAAM;IACpB,SAASiP,kBAAkBA,CAAA,EAAG;MAC5BD,uBAAuB,CAAC,IAAI,CAAC;IAC/B;IAEA,MAAME,QAAQ,GAAG,IAAIC,oBAAoB,CAACF,kBAAkB,EAAE;MAC5DG,IAAI,EAAEL,WAAW;MACjBM,SAAS,EAAE;IACb,CAAC,CAAC;IAEFH,QAAQ,CAAC7L,OAAO,CAACI,GAAG,CAAC3C,OAAQ,CAAC;IAE9B,OAAO,MAAM;MACXoO,QAAQ,CAAC5L,UAAU,EAAE;KACtB;EACH,CAAC,EAAE,CAACyL,WAAW,EAAEC,uBAAuB,CAAC,CAAC;EAE1C,oBACEja,GAAA;IACE0O,GAAG,EAAEA,GAAI;IACTxO,KAAK,EAAE;MACLqa,UAAU,EAAE7c,GAAG,KAAKC,SAAS,GAAG,MAAM,GAAGD,GAAG,GAAG,CAAC;MAChD8c,OAAO,EAAE/Z,MAAM,KAAK9C,SAAS,GAAG,MAAM,GAAG8C,MAAM,GAAG;IACpD;EAAE,CACH,CAAC;AAEN;ACjDA,MAAMga,KAAK,GAQV;AAED,MAAMC,cAAc,GAAqB,kBAAAD,KAAO;AAEjC,SAAS1F,gBAAgBA,CAAC;EAAEJ,aAAa;EAAEC;CAAiC,EAAE;EAC3F,oBACEvP,IAAA,CAAAiP,QAAA;IAAA/O,QAAA,GACGoV,cAAc,CAAC;MAAEhG;KAAe,CAAC,EACjCiG,kBAAkB,CAAC;MAAEhG;IAAS,CAAC,CAAC;EAAA,CAChC;AAEP;AAEO,SAAS+F,cAAcA,CAAC;EAAEhG;CAAoC,EAAE;EACrE,IAAIA,aAAa,KAAKhX,SAAS,EAAE,OAAO,IAAI;EAE5C,oBACEqC,GAAA;IAAKqG,OAAO,EAAC,UAAU;IAAC/B,KAAK,EAAC,IAAI;IAACnB,MAAM,EAAC,GAAG;IAAClD,SAAS,EAAEya,cAAe;IAAC,aAAW;IAAAnV,QAAA,eAClFvF,GAAA;MAAMmG,CAAC,EAAEwO,aAAa,KAAK,KAAK,GAAG,eAAe,GAAG;KAAgB;EAAA,CAClE,CAAC;AAEV;AAEO,SAASiG,kBAAkBA,CAAC;EAAEhG;CAAmC,EAAE;EACxE,OAAOA,QAAQ;AACjB;ACDA,MAAMyF,IAAI,GAsET;AAEM,MAAMQ,aAAa,GAAI,OAAMR,IAAM;AAE1C,MAAMS,gBAAgB,GAQrB;AAEM,MAAMC,yBAAyB,GAAI,yBAAwBD,gBAAkB;AAE7E,MAAME,kBAAkB,GAO9B;AAEM,MAAMC,kCAAkC,GAK9C;ACjIM,MAAMC,oBAAoB,GAKhC;AAWD,SAASC,WAAWA,CAAQ;EAC1Bhe,MAAM;EACNG,OAAO;EACPkD,GAAG;EACHC,MAAM;EACN6U,cAAc;EACdG;AACuB,CAAC,EAAE;EAC1B,MAAM;IAAEzP,QAAQ;IAAEoJ,aAAa;IAAEH;EAAQ,CAAC,GAAGJ,iBAAiB,CAACyG,cAAc,CAAC;EAC9E,MAAM;IAAE8F;EAAiB,CAAC,GAAGje,MAAM;EACnC,MAAM8C,SAAS,GAAGsD,gBAAgB,CAChCpG,MAAM,EACN+d,oBAAoB,EACpB,OAAOE,gBAAgB,KAAK,UAAU,GAAGA,gBAAgB,CAAC5a,GAAG,CAAC,GAAG4a,gBACnE,CAAC;EAED,SAASlG,OAAOA,CAAA,EAAG;IACjBO,UAAU,CAAC;MAAEhV,MAAM;MAAE/C,GAAG,EAAEP,MAAM,CAACO;IAAI,CAAC,CAAC;EACzC;EAEA,oBACEsC,GAAA;IACEoU,IAAI,EAAC,UAAU;IACf,iBAAejX,MAAM,CAACO,GAAG,GAAG,CAAE;IAC9B,gBAAcJ,OAAQ;IACtB,iBAAegY,cAAe;IAC9BtP,QAAQ,EAAEA,QAAS;IACnB/F,SAAS,EAAEA,SAAU;IACrBC,KAAK,EAAEkD,YAAY,CAACjG,MAAM,EAAEG,OAAO,CAAE;IACrC4X,OAAO,EAAEA,OAAQ;IACjBjG,OAAO,EAAEA,OAAQ;IAAA1J,QAAA,EAEhBpI,MAAM,CAACke,iBAAiB,GAAG;MAAEle,MAAM;MAAEqD,GAAG;MAAEwF,QAAQ,EAAEoJ;KAAe;EAAC,CAClE,CAAC;AAEV;AAEA,MAAAkM,aAAA,GAAe,aAAAzD,IAAI,CAACsD,WAAW,CAAC;AClChC,MAAMI,UAAU,GAQf;AAED,MAAMC,aAAa,GAUlB;AAEM,MAAMC,4BAA4B,GAMxC;AAEM,MAAMC,+BAA+B,GAM3C;AAED,MAAMC,mBAAmB,GAAsB,mBAAAJ,UAAY;AAE3D,MAAMK,sBAAsB,GAA0B,uBAAAJ,aAAe;AAErE,SAASK,UAAUA,CAAQ;EACzBpb,MAAM;EACNsY,YAAY;EACZvY,GAAG;EACHZ,eAAe;EACf0Q,GAAG;EACHwL,MAAM;EACN1e,qBAAqB;EACrBqa,eAAe;EACfsE,KAAK;EACLC,UAAU;EACVvG,UAAU;EACV,eAAe,EAAEwG;AACK,CAAC,EAAE;EACzB,MAAMvE,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG/X,eAAe,CAACH,MAAM,EAAEkY,KAAK,EAAE,EAAE;IAC3D,MAAMxa,MAAM,GAAGyC,eAAe,CAAC+X,KAAK,CAAC;IACrC,MAAMra,OAAO,GAAGJ,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;MAAE8D,IAAI,EAAE,SAAS;MAAEV;IAAI,CAAC,CAAC;IACnF,IAAIlD,OAAO,KAAKK,SAAS,EAAE;MACzBga,KAAK,IAAIra,OAAO,GAAG,CAAC;IACtB;IAEA,MAAMgY,cAAc,GAAGmC,eAAe,KAAKta,MAAM,CAACO,GAAG;IAErDga,KAAK,CAAC5N,IAAI,eACR9J,GAAA,CAACsb,aAAW;MAEVne,MAAM,EAAEA,MAAO;MACfG,OAAO,EAAEA,OAAQ;MACjBkD,GAAG,EAAEA,GAAI;MACTC,MAAM,EAAEA,MAAO;MACf6U,cAAc,EAAEA,cAAe;MAC/BG,UAAU,EAAEA;IAAW,GANlBtY,MAAM,CAAC4B,GAMW,CAE3B,CAAC;EACH;EAEA,oBACEiB,GAAA;IACEoU,IAAI,EAAC,KAAK;IACV,iBAAe6H,YAAa;IAC5Bhc,SAAS,EAAEwD,IAAI,CACbyT,YAAY,EACD,WAAAzW,MAAM,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG,KAAO,IAC9Ckb,mBAAmB,EAGSI,KAAK,IAA9BH,sBAAsB,EACkBI,UAAU,IAAlDP,4BAA4B,KAE7B,wBAAwB,EADqBO,UAAU,IAAtDN,+BAA+B,GAHRjE,eAAe,KAAK,CAAC,CAAC,IAA7CL,oBAML,CAAE;IACFlX,KAAK,EACH;MACE,GAAGgD,WAAW,CAAC6V,YAAY,CAAC;MAC5B,uBAAuB,EAAEzI,GAAG,KAAK3S,SAAS,GAAM,GAAA2S,GAAO,OAAG3S,SAAS;MACnE,0BAA0B,EAAEme,MAAM,KAAKne,SAAS,GAAM,GAAAme,MAAA,IAAU,GAAGne;KAEtE;IAAA4H,QAAA,EAEAmS;EAAK,CACH,CAAC;AAEV;AAEA,MAAAwE,YAAA,GAAe,aAAArE,IAAI,CAACgE,UAAU,CAAC;AC4D/B,SAASM,QAAQA,CACflX,KAA8B,EAC9ByJ,GAA8B,EAC9B;EACA,MAAM;IAEJpO,OAAO,EAAEmI,UAAU;IACnBlI,IAAI;IACJO,cAAc;IACdC,iBAAiB;IACjBqb,YAAY;IACZjL,YAAY;IAEZxB,SAAS,EAAE0M,YAAY;IACvBC,eAAe,EAAEC,kBAAkB;IACnCC,gBAAgB,EAAEC,mBAAmB;IAErCC,YAAY;IACZC,oBAAoB;IACpBpH,WAAW;IACXC,mBAAmB;IACnB1M,oBAAoB;IAEpBsQ,WAAW;IACXC,iBAAiB;IACjBC,iBAAiB;IACjBsD,aAAa;IACbC,QAAQ;IACRnR,cAAc;IACd0F,MAAM;IACN0L,MAAM;IACNC,OAAO;IAEPhU,oBAAoB,EAAEiU,uBAAuB;IAE7CC,SAAS;IACThd,SAAS;IACTC,KAAK;IACLqZ,QAAQ;IACR5D,SAAS,EAAEuH,YAAY;IAEvB9I,IAAI,EAAE+I,OAAO;IACb,YAAY,EAAEpW,SAAS;IACvB,iBAAiB,EAAEC,cAAc;IACjC,kBAAkB,EAAEoW,eAAe;IACnC,eAAe,EAAEC,eAAe;IAChC,aAAa,EAAEC;EACjB,CAAC,GAAGrY,KAAK;EAKT,MAAMsY,gBAAgB,GAAG5W,mBAAmB,EAAS;EACrD,MAAMyN,IAAI,GAAG+I,OAAO,IAAI,MAAM;EAC9B,MAAMxN,SAAS,GAAG0M,YAAY,IAAI,EAAE;EACpC,MAAMC,eAAe,GAAGC,kBAAkB,KAAK,OAAO5M,SAAS,KAAK,QAAQ,GAAGA,SAAS,GAAG,EAAE,CAAC;EAC9F,MAAM6M,gBAAgB,GAAGC,mBAAmB,KAAK,OAAO9M,SAAS,KAAK,QAAQ,GAAGA,SAAS,GAAG,EAAE,CAAC;EAChG,MAAM6N,SAAS,GAAGP,SAAS,EAAEO,SAAS,IAAID,gBAAgB,EAAEC,SAAS,IAAI3D,gBAAgB;EACzF,MAAM4D,kBAAgB,GACpBR,SAAS,EAAElI,gBAAgB,IAAIwI,gBAAgB,EAAExI,gBAAgB,IAAIA,gBAAuB;EAC9F,MAAM2I,gBAAc,GAClBT,SAAS,EAAElY,cAAc,IAAIwY,gBAAgB,EAAExY,cAAc,IAAIA,cAAqB;EACxF,MAAM4Y,cAAc,GAAGV,SAAS,EAAEU,cAAc,IAAIJ,gBAAgB,EAAEI,cAAc;EACpF,MAAM5U,oBAAoB,GAAGiU,uBAAuB,IAAI,IAAI;EAC5D,MAAMrH,SAAS,GAAGuH,YAAY,IAAI,KAAK;EAEvC,MAAMU,eAAe,GAAG,CAAC;EACzB,MAAM5c,mBAAmB,GAAGF,cAAc,EAAErB,MAAM,IAAI,CAAC;EACvD,MAAMoe,sBAAsB,GAAG9c,iBAAiB,EAAEtB,MAAM,IAAI,CAAC;EAC7D,MAAMqe,gBAAgB,GAAG9c,mBAAmB,GAAG6c,sBAAsB;EACrE,MAAME,4BAA4B,GAAGH,eAAe,GAAG5c,mBAAmB;EAC1E,MAAMC,SAAS,GAAG,CAAC8c,4BAA4B;EAC/C,MAAMzc,SAAS,GAAGf,IAAI,CAACd,MAAM,GAAGoe,sBAAsB,GAAG,CAAC;EAK1D,MAAM,CAACjO,SAAS,EAAEoO,YAAY,CAAC,GAAGxQ,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAAC3E,UAAU,EAAEoV,aAAa,CAAC,GAAGzQ,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAAC7E,mBAAmB,EAAE6C,sBAAsB,CAAC,GAAGgC,QAAQ,CAC5D,MAAmC,IAAIrD,GAAG,EAC5C,CAAC;EACD,MAAM,CAACzB,oBAAoB,EAAE+C,uBAAuB,CAAC,GAAG+B,QAAQ,CAC9D,MAAmC,IAAIrD,GAAG,EAC5C,CAAC;EACD,MAAM,CAAC9J,gBAAgB,EAAE6d,mBAAmB,CAAC,GAAG1Q,QAAQ,CACtD,OAA2C;IAAE9P,GAAG,EAAE,CAAC,CAAC;IAAE+C,MAAM,EAAEQ,SAAS,GAAG,CAAC;IAAE4S,IAAI,EAAE;EAAS,CAAC,CAC/F,CAAC;EACD,MAAM,CAACsK,UAAU,EAAEC,aAAa,CAAC,GAAG5Q,QAAQ,CAAuC,IAAI,CAAC;EACxF,MAAM,CAAC6Q,UAAU,EAAEhN,WAAW,CAAC,GAAG7D,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC8Q,iBAAiB,EAAEC,aAAa,CAAC,GAAG/Q,QAAQ,CAAqB7P,SAAS,CAAC;EAClF,MAAM,CAACoc,gBAAgB,EAAEyE,mBAAmB,CAAC,GAAGhR,QAAQ,CAAyB,IAAI,CAAC;EAKtF,MAAMiR,oBAAoB,GAAG7S,MAAM,CAACvL,gBAAgB,CAAC;EACrD,MAAM6Q,uBAAuB,GAAGtF,MAAM,CAAC0S,iBAAiB,CAAC;EACzD,MAAMI,kBAAkB,GAAG9S,MAAM,CAAC,CAAC,CAAC,CAAC;EACrC,MAAM+S,YAAY,GAAG/S,MAAM,CAAiB,IAAI,CAAC;EACjD,MAAMgT,kBAAkB,GAAGhT,MAAM,CAAC,KAAK,CAAC;EAKxC,MAAMiT,UAAU,GAAGzK,IAAI,KAAK,UAAU;EACtC,MAAM,CAAC9I,OAAO,EAAEC,SAAS,EAAEuT,UAAU,CAAC,GAAGzR,iBAAiB,EAAE;EAC5D,MAAMQ,YAAY,GAAGiR,UAAU,GAAGxC,eAAe,GAAGwB,gBAAgB,GAAGtB,gBAAgB;EACvF,MAAMuC,YAAY,GAAGrC,YAAY,IAAI,IAAI,IAAIC,oBAAoB,IAAI,IAAI;EACzE,MAAM/G,KAAK,GAAGD,SAAS,KAAK,KAAK;EACjC,MAAMqJ,OAAO,GAAGpJ,KAAK,GAAG,YAAY,GAAG,WAAW;EAClD,MAAMqJ,QAAQ,GAAGrJ,KAAK,GAAG,WAAW,GAAG,YAAY;EACnD,MAAMsJ,YAAY,GAAG7B,eAAe,IAAIO,eAAe,GAAGrd,IAAI,CAACd,MAAM,GAAGqe,gBAAgB;EAExF,MAAMqB,qBAAqB,GAAG7V,OAAO,CACnC,OAAO;oBACLoU,gBAAc;IACd3I,gBAAA,EAAA0I;EACF,CAAC,CAAC,EACF,CAACC,gBAAc,EAAED,kBAAgB,CACnC,CAAC;EAED,MAAM2B,eAAe,GAAG9V,OAAO,CAAC,MAAe;IAE7C,MAAM;MAAE7J;IAAO,CAAC,GAAGc,IAAI;IACvB,OACEd,MAAM,KAAK,CAAC,IACZid,YAAY,IAAI,IAAI,IACpBN,YAAY,IAAI,IAAI,IACpBM,YAAY,CAACtO,IAAI,IAAI3O,MAAM,IAC3Bc,IAAI,CAAC8e,KAAK,CAAE7e,GAAG,IAAKkc,YAAY,CAACzd,GAAG,CAACmd,YAAY,CAAC5b,GAAG,CAAC,CAAC,CAAC;GAE3D,EAAE,CAACD,IAAI,EAAEmc,YAAY,EAAEN,YAAY,CAAC,CAAC;EAEtC,MAAM;IACJ9b,OAAO;IACPe,cAAc;IACdoJ,mBAAmB;IACnBC,iBAAiB;IACjBX,eAAe;IACfC,aAAa;IACb5M,qBAAqB;IACrB6M;GACD,GAAGzB,oBAAoB,CAAC;IACvBC,UAAU;IACVC,oBAAoB;IACpBC,mBAAmB;IACnBE,UAAU;IACVD,aAAa,EAAE2C,SAAS;IACxBzC,oBAAoB;IACpBC;EACF,CAAC,CAAC;EAEF,MAAM;IACJuG,mBAAmB;IACnBC,iBAAiB;IACjBM,cAAc;IACdC,gBAAgB;IAChBC,SAAS;IACTC,YAAY;IACZC;GACD,GAAGP,eAAe,CAAC;IAClBnP,IAAI;IACJoP,SAAS;IACT9B,YAAY;IACZ+B,SAAS;IACT7G;EACF,CAAC,CAAC;EAEF,MAAMnJ,eAAe,GAAGyP,kBAAkB,CAAC;IACzC/O,OAAO;IACPe,cAAc;IACdoJ,mBAAmB;IACnBC,iBAAiB;IACjBtN,qBAAqB;IACrBkS,mBAAmB;IACnBC,iBAAiB;IACjBhP,IAAI;IACJO,cAAc;IACdC;EACF,CAAC,CAAC;EAEF,MAAM;IAAEmL,mBAAmB;IAAEQ;GAAoB,GAAGrB,eAAe,CACjE/K,OAAO,EACPV,eAAe,EACfmK,eAAe,EACfuB,OAAO,EACPC,SAAS,EACT5C,mBAAmB,EACnBD,oBAAoB,EACpB8C,sBAAsB,EACtBC,uBAAuB,EACvBC,cACF,CAAC;EAED,MAAM4T,SAAS,GAAGT,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC;EACrC,MAAMvc,SAAS,GAAGhC,OAAO,CAACb,MAAM,GAAG,CAAC;EACpC,MAAM8f,mCAAmC,GAAGC,2BAA2B,CAACnf,gBAAgB,CAAC;EACzF,MAAMof,kCAAkC,GAAGC,0BAA0B,CAACrf,gBAAgB,CAAC;EAKvF,MAAMsf,wBAAwB,GAAGnR,aAAa,CAAC9B,kBAAkB,CAAC;EAClE,MAAMkT,yBAAyB,GAAGpR,aAAa,CAACgH,mBAAmB,CAAC;EACpE,MAAMqK,iBAAiB,GAAGrR,aAAa,CAAC4K,WAAW,CAAC;EACpD,MAAM0G,uBAAuB,GAAGtR,aAAa,CAAC6K,iBAAiB,CAAC;EAChE,MAAM0G,uBAAuB,GAAGvR,aAAa,CAAC8K,iBAAiB,CAAC;EAChE,MAAM0G,eAAe,GAAGxR,aAAa,CAACyR,SAAS,CAAC;EAChD,MAAMC,8BAA8B,GAAG1R,aAAa,CAAC2R,SAAS,CAAC;EAC/D,MAAMC,gBAAgB,GAAG5R,aAAa,CAACiH,UAAU,CAAC;EAClD,MAAM4K,sBAAsB,GAAG7R,aAAa,CAAE9Q,GAAW,IAAK;IAC5D+X,UAAU,CAAC;MAAEhV,MAAM,EAAEQ,SAAS;MAAEvD;IAAI,CAAC,CAAC;EACxC,CAAC,CAAC;EAKFuN,eAAe,CAAC,MAAM;IACpB,IACE,CAACsU,mCAAmC,IACpCe,cAAc,CAACjgB,gBAAgB,EAAEoe,oBAAoB,CAAC1S,OAAO,CAAC,EAC9D;MACA0S,oBAAoB,CAAC1S,OAAO,GAAG1L,gBAAgB;MAC/C;IACF;IAEAoe,oBAAoB,CAAC1S,OAAO,GAAG1L,gBAAgB;IAE/C,IAAIA,gBAAgB,CAAC3C,GAAG,KAAK,CAAC,CAAC,EAAE;MAC/BihB,YAAY,CAAC5S,OAAO,CAAEwU,KAAK,CAAC;QAAEC,aAAa,EAAE;MAAK,CAAC,CAAC;MACpD5iB,cAAc,CAAC+gB,YAAY,CAAC5S,OAAO,CAAC;IACtC;EACF,CAAC,CAAC;EAEFd,eAAe,CAAC,MAAM;IACpB,IAAI,CAAC2T,kBAAkB,CAAC7S,OAAO,EAAE;IACjC6S,kBAAkB,CAAC7S,OAAO,GAAG,KAAK;IAClC,MAAMnJ,IAAI,GAAG6d,eAAe,CAACnV,OAAO,CAACS,OAAQ,CAAC;IAC9C,IAAInJ,IAAI,KAAK,IAAI,EAAE;IAEnBhF,cAAc,CAACgF,IAAI,CAAC;IAEpB,MAAM8d,cAAc,GAAG9d,IAAI,CAACuK,aAAa,CAA6B,gBAAgB,CAAC,IAAIvK,IAAI;IAC/F8d,cAAc,CAACH,KAAK,CAAC;MAAEC,aAAa,EAAE;IAAK,CAAC,CAAC;EAC/C,CAAC,CAAC;EAEFG,mBAAmB,CAACjS,GAAG,EAAE,OAAO;IAC9B7Q,OAAO,EAAEyN,OAAO,CAACS,OAAO;IACxB6U,YAAYA,CAAC;MAAEljB,GAAG;MAAE+C;IAAO,CAAC,EAAE;MAC5B,MAAMogB,WAAW,GACfnjB,GAAG,KAAKC,SAAS,IAAID,GAAG,GAAGN,qBAAqB,IAAIM,GAAG,GAAG4C,OAAO,CAACb,MAAM,GAAG/B,GAAG,GAAGC,SAAS;MAC5F,MAAMmjB,cAAc,GAClBrgB,MAAM,KAAK9C,SAAS,IAAIojB,4BAA4B,CAACtgB,MAAM,CAAC,GAAGA,MAAM,GAAG9C,SAAS;MAEnF,IAAIkjB,WAAW,KAAKljB,SAAS,IAAImjB,cAAc,KAAKnjB,SAAS,EAAE;QAC7D6gB,mBAAmB,CAAC;UAAE9gB,GAAG,EAAEmjB,WAAW;UAAEpgB,MAAM,EAAEqgB;QAAe,CAAC,CAAC;MACnE;KACD;IACDrL;EACF,CAAC,CAAC,CAAC;EAKH,MAAMnE,oBAAoB,GAAG1C,WAAW,CAAEnO,MAAe,IAAK;IAC5D8d,aAAa,CAAC9d,MAAM,CAAC;IACrByQ,uBAAuB,CAACnF,OAAO,GAAGtL,MAAM;GACzC,EAAE,EAAE,CAAC;EAKN,SAASwf,SAASA,CAAC5iB,IAAuB,EAAE;IAC1C,IAAI,CAACsf,oBAAoB,EAAE;IAE3BzY,sBAAsB,CAAOkY,YAAY,CAAC;IAE1C,IAAI/e,IAAI,CAAC6D,IAAI,KAAK,QAAQ,EAAE;MAC1B,MAAM8f,eAAe,GAAG,IAAItiB,GAAG,CAACge,YAAY,CAAC;MAC7C,KAAK,MAAMlc,GAAG,IAAID,IAAI,EAAE;QACtB,MAAM0gB,MAAM,GAAG7E,YAAY,CAAC5b,GAAG,CAAC;QAChC,IAAInD,IAAI,CAAC8H,OAAO,EAAE;UAChB6b,eAAe,CAACE,GAAG,CAACD,MAAM,CAAC;QAC7B,CAAC,MAAM;UACLD,eAAe,CAACvU,MAAM,CAACwU,MAAM,CAAC;QAChC;MACF;MACAtE,oBAAoB,CAACqE,eAAe,CAAC;MACrC;IACF;IAEA,MAAM;MAAExgB,GAAG;MAAE2E,OAAO;MAAE0C;IAAa,CAAC,GAAGxK,IAAI;IAC3C,MAAM2jB,eAAe,GAAG,IAAItiB,GAAG,CAACge,YAAY,CAAC;IAC7C,MAAMuE,MAAM,GAAG7E,YAAY,CAAC5b,GAAG,CAAC;IAChC,IAAI2E,OAAO,EAAE;MACX6b,eAAe,CAACE,GAAG,CAACD,MAAM,CAAC;MAC3B,MAAME,cAAc,GAAGzC,kBAAkB,CAAC3S,OAAO;MACjD,MAAMtL,MAAM,GAAGF,IAAI,CAAC6gB,OAAO,CAAC5gB,GAAG,CAAC;MAChCke,kBAAkB,CAAC3S,OAAO,GAAGtL,MAAM;MACnC,IAAIoH,YAAY,IAAIsZ,cAAc,KAAK,CAAC,CAAC,IAAIA,cAAc,KAAK1gB,MAAM,EAAE;QACtE,MAAM4gB,IAAI,GAAGtd,IAAI,CAACtD,MAAM,GAAG0gB,cAAc,CAAC;QAC1C,KAAK,IAAI3W,CAAC,GAAG2W,cAAc,GAAGE,IAAI,EAAE7W,CAAC,KAAK/J,MAAM,EAAE+J,CAAC,IAAI6W,IAAI,EAAE;UAC3D,MAAM7gB,GAAG,GAAGD,IAAI,CAACiK,CAAC,CAAC;UACnBwW,eAAe,CAACE,GAAG,CAAC9E,YAAY,CAAC5b,GAAG,CAAC,CAAC;QACxC;MACF;IACF,CAAC,MAAM;MACLwgB,eAAe,CAACvU,MAAM,CAACwU,MAAM,CAAC;MAC9BvC,kBAAkB,CAAC3S,OAAO,GAAG,CAAC,CAAC;IACjC;IAEA4Q,oBAAoB,CAACqE,eAAe,CAAC;EACvC;EAEA,SAAS9a,aAAaA,CAACjI,KAAoC,EAAE;IAC3D,MAAM;MAAEP,GAAG;MAAE+C,MAAM;MAAEoT;IAAK,CAAC,GAAGxT,gBAAgB;IAC9C,IAAIwT,IAAI,KAAK,MAAM,EAAE;IAErB,IAAI+I,aAAa,IAAImE,4BAA4B,CAACtgB,MAAM,CAAC,EAAE;MACzD,MAAMD,GAAG,GAAGD,IAAI,CAACE,MAAM,CAAC;MACxB,MAAMtC,SAAS,GAAGH,eAAe,CAACC,KAAK,CAAC;MACxC2e,aAAa,CACX;QACE/I,IAAI,EAAE,QAAQ;QACdrT,GAAG;QACHrD,MAAM,EAAEmD,OAAO,CAAC5C,GAAG,CAAC;QACpB+C,MAAM;QACNgV;OACD,EACDtX,SACF,CAAC;MACD,IAAIA,SAAS,CAACE,sBAAsB,EAAE,EAAE;IAC1C;IACA,IAAI,EAAEJ,KAAK,CAACkB,MAAM,YAAYmiB,OAAO,CAAC,EAAE;IACxC,MAAMC,WAAW,GAAGtjB,KAAK,CAACkB,MAAM,CAACI,OAAO,CAAC,WAAW,CAAC,KAAK,IAAI;IAC9D,MAAMiiB,UAAU,GAAG3C,UAAU,IAAI5gB,KAAK,CAACkB,MAAM,KAAKwf,YAAY,CAAC5S,OAAO;IACtE,IAAI,CAACwV,WAAW,IAAI,CAACC,UAAU,EAAE;IAEjC,MAAM;MAAEC;IAAQ,CAAC,GAAGxjB,KAAK;IAEzB,IACEwhB,kCAAkC,KACjC1C,OAAO,IAAI,IAAI,IAAID,MAAM,IAAI,IAAI,CAAC,IACnCne,iBAAiB,CAACV,KAAK,CAAC,EACxB;MAGA,MAAMyjB,IAAI,GAAG,EAAE;MACf,MAAMC,IAAI,GAAG,EAAE;MACf,IAAIF,OAAO,KAAKC,IAAI,EAAE;QACpBE,UAAU,EAAE;QACZ;MACF;MACA,IAAIH,OAAO,KAAKE,IAAI,EAAE;QACpBE,WAAW,EAAE;QACb;MACF;IACF;IAEA,QAAQ5jB,KAAK,CAACc,GAAG;MACf,KAAK,QAAQ;QACXqf,aAAa,CAAC,IAAI,CAAC;QACnB;MACF,KAAK,SAAS;MACd,KAAK,WAAW;MAChB,KAAK,WAAW;MAChB,KAAK,YAAY;MACjB,KAAK,KAAK;MACV,KAAK,MAAM;MACX,KAAK,KAAK;MACV,KAAK,QAAQ;MACb,KAAK,UAAU;QACblL,QAAQ,CAACjV,KAAK,CAAC;QACf;MACF;QACE6jB,eAAe,CAAC7jB,KAAK,CAAC;QACtB;IACJ;EACF;EAEA,SAAS8jB,YAAYA,CAAC9jB,KAAoC,EAAE;IAC1D,MAAM;MAAE2R,SAAS;MAAE/G;KAAY,GAAG5K,KAAK,CAACiR,aAAa;IACrDrC,SAAS,CAAC,MAAM;MACdmR,YAAY,CAACpO,SAAS,CAAC;MAEvBqO,aAAa,CAACja,GAAG,CAAC6E,UAAU,CAAC,CAAC;IAChC,CAAC,CAAC;IACFgU,QAAQ,GAAG5e,KAAK,CAAC;EACnB;EAEA,SAASkiB,SAASA,CAAChjB,MAA+B,EAAEsD,MAAc,EAAED,GAAM,EAAE;IAC1E,IAAI,OAAO2Q,YAAY,KAAK,UAAU,EAAE;IACxC,IAAI3Q,GAAG,KAAKD,IAAI,CAACE,MAAM,CAAC,EAAE;IAC1B,MAAM8R,WAAW,GAAG,CAAC,GAAGhS,IAAI,CAAC;IAC7BgS,WAAW,CAAC9R,MAAM,CAAC,GAAGD,GAAG;IACzB2Q,YAAY,CAACoB,WAAW,EAAE;MACxBC,OAAO,EAAE,CAAC/R,MAAM,CAAC;MACjBtD;IACF,CAAC,CAAC;EACJ;EAEA,SAAS6kB,mBAAmBA,CAAA,EAAG;IAC7B,IAAI3hB,gBAAgB,CAACwT,IAAI,KAAK,MAAM,EAAE;IACtCsM,SAAS,CAAC7f,OAAO,CAACD,gBAAgB,CAAC3C,GAAG,CAAC,EAAE2C,gBAAgB,CAACI,MAAM,EAAEJ,gBAAgB,CAACG,GAAG,CAAC;EACzF;EAEA,SAASohB,UAAUA,CAAA,EAAG;IACpB,MAAM;MAAElkB,GAAG;MAAE+C;IAAO,CAAC,GAAGJ,gBAAgB;IACxC,MAAMiS,SAAS,GAAG/R,IAAI,CAACE,MAAM,CAAC;IAC9B,MAAMwhB,eAAe,GAAG3hB,OAAO,CAAC5C,GAAG,CAAC,CAACqB,GAAG;IACxCqf,aAAa,CAAC;MAAE5d,GAAG,EAAE8R,SAAS;MAAEI,SAAS,EAAEuP;IAAgB,CAAC,CAAC;IAC7DnF,MAAM,GAAG;MAAExK,SAAS;MAAE2P;IAAgB,CAAC,CAAC;EAC1C;EAEA,SAASJ,WAAWA,CAAA,EAAG;IACrB,IAAI,CAAC9E,OAAO,IAAI,CAAC5L,YAAY,IAAIgN,UAAU,KAAK,IAAI,IAAI,CAACzd,cAAc,CAACL,gBAAgB,CAAC,EAAE;MACzF;IACF;IAEA,MAAM;MAAE3C,GAAG;MAAE+C;IAAO,CAAC,GAAGJ,gBAAgB;IACxC,MAAM6hB,YAAY,GAAG5hB,OAAO,CAAC5C,GAAG,CAAC;IACjC,MAAMiV,SAAS,GAAGpS,IAAI,CAACE,MAAM,CAAC;IAE9B,MAAM0hB,gBAAgB,GAAGpF,OAAO,CAAC;MAC/BzK,SAAS,EAAE6L,UAAU,CAAC3d,GAAG;MACzByhB,eAAe,EAAE9D,UAAU,CAACzL,SAAS;MACrCC,SAAS;MACTyP,eAAe,EAAEF,YAAY,CAACnjB;IAChC,CAAC,CAAC;IAEFohB,SAAS,CAAC+B,YAAY,EAAEzhB,MAAM,EAAE0hB,gBAAgB,CAAC;EACnD;EAEA,SAASL,eAAeA,CAAC7jB,KAAoC,EAAE;IAC7D,IAAI,CAACwhB,kCAAkC,EAAE;IACzC,MAAMjf,GAAG,GAAGD,IAAI,CAACF,gBAAgB,CAACI,MAAM,CAAC;IACzC,MAAM;MAAE1B,GAAG;MAAEwD;IAAS,CAAC,GAAGtE,KAAK;IAG/B,IAAI8gB,YAAY,IAAIxc,QAAQ,IAAIxD,GAAG,KAAK,GAAG,EAAE;MAC3CmF,sBAAsB,CAAOkY,YAAY,CAAC;MAC1C,MAAM6E,MAAM,GAAG7E,YAAY,CAAC5b,GAAG,CAAC;MAChCyf,SAAS,CAAC;QAAE/e,IAAI,EAAE,KAAK;QAAEV,GAAG;QAAE2E,OAAO,EAAE,CAACuX,YAAY,CAACzd,GAAG,CAACgiB,MAAM,CAAC;QAAEpZ,YAAY,EAAE;MAAM,CAAC,CAAC;MAExF5J,KAAK,CAAC+W,cAAc,EAAE;MACtB;IACF;IAEA,IAAItU,cAAc,CAACL,gBAAgB,CAAC,IAAIrB,kBAAkB,CAACf,KAAK,CAAC,EAAE;MACjEigB,mBAAmB,CAAC,CAAC;QAAExgB,GAAG;QAAE+C;MAAO,CAAC,MAAM;QACxC/C,GAAG;QACH+C,MAAM;QACNoT,IAAI,EAAE,MAAM;QACZrT,GAAG;QACH6hB,WAAW,EAAE7hB;MACf,CAAC,CAAC,CAAC;IACL;EACF;EAKA,SAAS8hB,6BAA6BA,CAAC5kB,GAAW,EAAE;IAClD,OAAOA,GAAG,IAAI4hB,SAAS,IAAI5hB,GAAG,IAAI4E,SAAS;EAC7C;EAEA,SAASye,4BAA4BA,CAACtgB,MAAc,EAAE;IACpD,OAAOA,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAGF,IAAI,CAACd,MAAM;EAC5C;EAEA,SAAS+f,2BAA2BA,CAAC;IAAE9hB,GAAG;IAAE+C;EAAiB,CAAC,EAAW;IACvE,OAAOA,MAAM,IAAIQ,SAAS,IAAIR,MAAM,IAAIa,SAAS,IAAIghB,6BAA6B,CAAC5kB,GAAG,CAAC;EACzF;EAEA,SAASgiB,0BAA0BA,CAAC;IAAEhiB,GAAG;IAAE+C;EAAiB,CAAC,EAAW;IACtE,OAAOsgB,4BAA4B,CAACtgB,MAAM,CAAC,IAAI6hB,6BAA6B,CAAC5kB,GAAG,CAAC;EACnF;EAEA,SAASgD,cAAcA,CAAC2P,QAAkB,EAAW;IACnD,OACEqP,0BAA0B,CAACrP,QAAQ,CAAC,IACpCjQ,sBAAsB,CAAC;MAAEE,OAAO;MAAEC,IAAI;MAAEF,gBAAgB,EAAEgQ;IAAS,CAAC,CAAC;EAEzE;EAEA,SAASoF,UAAUA,CAACpF,QAAkB,EAAEkS,YAA6B,EAAQ;IAC3E,IAAI,CAAC/C,2BAA2B,CAACnP,QAAQ,CAAC,EAAE;IAC5C2R,mBAAmB,EAAE;IAErB,IAAIO,YAAY,IAAI7hB,cAAc,CAAC2P,QAAQ,CAAC,EAAE;MAC5C,MAAM7P,GAAG,GAAGD,IAAI,CAAC8P,QAAQ,CAAC5P,MAAM,CAAC;MACjCyd,mBAAmB,CAAC;QAAE,GAAG7N,QAAQ;QAAEwD,IAAI,EAAE,MAAM;QAAErT,GAAG;QAAE6hB,WAAW,EAAE7hB;MAAI,CAAC,CAAC;KAC1E,MAAM,IAAI8f,cAAc,CAACjgB,gBAAgB,EAAEgQ,QAAQ,CAAC,EAAE;MAErDzS,cAAc,CAAC6iB,eAAe,CAACnV,OAAO,CAACS,OAAQ,CAAC,CAAC;IACnD,CAAC,MAAM;MACL6S,kBAAkB,CAAC7S,OAAO,GAAG,IAAI;MACjCmS,mBAAmB,CAAC;QAAE,GAAG7N,QAAQ;QAAEwD,IAAI,EAAE;MAAS,CAAC,CAAC;IACtD;EACF;EAEA,SAAS2O,eAAeA,CAACzjB,GAAW,EAAEF,OAAgB,EAAE0D,QAAiB,EAAY;IACnF,MAAM;MAAE7E,GAAG;MAAE+C;IAAO,CAAC,GAAGJ,gBAAgB;IACxC,MAAMqH,aAAa,GAAG6X,mCAAmC,IAAI7hB,GAAG,KAAK,CAAC,CAAC;IAEvE,QAAQqB,GAAG;MACT,KAAK,SAAS;QACZ,OAAO;UAAErB,GAAG;UAAE+C,MAAM,EAAEA,MAAM,GAAG;SAAG;MACpC,KAAK,WAAW;QACd,OAAO;UAAE/C,GAAG;UAAE+C,MAAM,EAAEA,MAAM,GAAG;SAAG;MACpC,KAAKue,OAAO;QACV,OAAO;UAAEthB,GAAG,EAAEA,GAAG,GAAG,CAAC;UAAE+C;SAAQ;MACjC,KAAKwe,QAAQ;QACX,OAAO;UAAEvhB,GAAG,EAAEA,GAAG,GAAG,CAAC;UAAE+C;SAAQ;MACjC,KAAK,KAAK;QACR,OAAO;UAAE/C,GAAG,EAAEA,GAAG,IAAI6E,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;UAAE9B;SAAQ;MACnD,KAAK,MAAM;QAET,IAAIiH,aAAa,EAAE,OAAO;UAAEhK,GAAG;UAAE+C,MAAM,EAAEQ;SAAW;QACpD,OAAO;UAAEvD,GAAG,EAAE,CAAC;UAAE+C,MAAM,EAAE5B,OAAO,GAAGoC,SAAS,GAAGR;SAAQ;MACzD,KAAK,KAAK;QAER,IAAIiH,aAAa,EAAE,OAAO;UAAEhK,GAAG;UAAE+C,MAAM,EAAEa;SAAW;QACpD,OAAO;UAAE5D,GAAG,EAAE4E,SAAS;UAAE7B,MAAM,EAAE5B,OAAO,GAAGyC,SAAS,GAAGb;SAAQ;MACjE,KAAK,QAAQ;QAAE;UACb,IAAIJ,gBAAgB,CAACI,MAAM,KAAKQ,SAAS,EAAE,OAAOZ,gBAAgB;UAClE,MAAMoiB,QAAQ,GAAG1S,SAAS,CAACtP,MAAM,CAAC,GAAGuP,YAAY,CAACvP,MAAM,CAAC,GAAGoN,YAAY;UACxE,OAAO;YAAEnQ,GAAG;YAAE+C,MAAM,EAAEgiB,QAAQ,GAAG,CAAC,GAAGxS,UAAU,CAACwS,QAAQ,CAAC,GAAG;WAAG;QACjE;MACA,KAAK,UAAU;QAAE;UACf,IAAIpiB,gBAAgB,CAACI,MAAM,IAAIF,IAAI,CAACd,MAAM,EAAE,OAAOY,gBAAgB;UACnE,MAAMoiB,QAAQ,GAAG1S,SAAS,CAACtP,MAAM,CAAC,GAAGoN,YAAY;UACjD,OAAO;YAAEnQ,GAAG;YAAE+C,MAAM,EAAEgiB,QAAQ,GAAG5S,cAAc,GAAGI,UAAU,CAACwS,QAAQ,CAAC,GAAGliB,IAAI,CAACd,MAAM,GAAG;WAAG;QAC5F;MACA;QACE,OAAOY,gBAAgB;IAC3B;EACF;EAEA,SAAS6S,QAAQA,CAACjV,KAAoC,EAAE;IACtD,MAAM;MAAEc,GAAG;MAAEwD;IAAS,CAAC,GAAGtE,KAAK;IAC/B,IAAImD,kBAAsC,GAAG,MAAM;IACnD,IAAIrC,GAAG,KAAK,KAAK,EAAE;MACjB,IACEsD,WAAW,CAAC;QACVE,QAAQ;QACRD,SAAS;QACTrB,SAAS;QACTK,SAAS;QACTjB;MACF,CAAC,CAAC,EACF;QACA2hB,mBAAmB,EAAE;QAErB;MACF;MAEA5gB,kBAAkB,GAAG,YAAY;IACnC;IAGAnD,KAAK,CAAC+W,cAAc,EAAE;IAEtB,MAAMnW,OAAO,GAAGF,iBAAiB,CAACV,KAAK,CAAC;IACxC,MAAMwD,YAAY,GAAG+gB,eAAe,CAACzjB,GAAG,EAAEF,OAAO,EAAE0D,QAAQ,CAAC;IAC5D,IAAI+d,cAAc,CAACjgB,gBAAgB,EAAEoB,YAAY,CAAC,EAAE;IAEpD,MAAMihB,wBAAwB,GAAGvhB,2BAA2B,CAAC;MAC3Db,OAAO;MACPe,cAAc;MACdd,IAAI;MACJO,cAAc;MACdC,iBAAiB;MACjBE,SAAS;MACTK,SAAS;MACTlE,qBAAqB;MACrBgE,kBAAkB;MAClBG,eAAe,EAAElB,gBAAgB;MACjCoB,YAAY;MACZC,kBAAkB,EAAE8d;IACtB,CAAC,CAAC;IAEF/J,UAAU,CAACiN,wBAAwB,CAAC;EACtC;EAEA,SAASC,qBAAqBA,CAACC,aAAqB,EAAsB;IACxE,IAAItE,iBAAiB,KAAK3gB,SAAS,EAAE;IACrC,MAAM;MAAE8C;IAAO,CAAC,GAAGJ,gBAAgB;IAEnC,MAAM+X,aAAa,GACjB3X,MAAM,GAAG6d,iBAAiB,GACtB7d,MAAM,GAAGmiB,aAAa,IAAIA,aAAa,IAAItE,iBAAiB,GAC5D7d,MAAM,GAAGmiB,aAAa,IAAIA,aAAa,IAAItE,iBAAiB;IAElE,OAAOlG,aAAa,GAAG/X,gBAAgB,CAAC3C,GAAG,GAAGC,SAAS;EACzD;EAEA,SAASklB,aAAaA,CAACpiB,MAAc,EAAE;IACrC,IAAIJ,gBAAgB,CAACI,MAAM,KAAKA,MAAM,IAAIJ,gBAAgB,CAACwT,IAAI,KAAK,MAAM,IAAIzC,MAAM,IAAI,IAAI,EAAE;MAC5F;IACF;IAEA,oBACEpR,GAAA,CAACiR,UAAU;MACT1Q,IAAI,EAAEA,IAAK;MACXD,OAAO,EAAEA,OAAQ;MACjBD,gBAAgB,EAAEA,gBAAiB;MACnCK,cAAc,EAAEA,cAAe;MAC/BwQ,uBAAuB,EAAEA,uBAAwB;MACjDC,YAAY,EAAEA,YAAa;MAC3BC,MAAM,EAAEA,MAAO;MACfC,WAAW,EAAEA,WAAY;MACzBC,oBAAoB,EAAEA;IAAqB,CAC5C,CAAC;EAEN;EAEA,SAASwR,aAAaA,CAACriB,MAAc,EAAE;IACrC,IAAIJ,gBAAgB,CAACI,MAAM,KAAKA,MAAM,IAAIJ,gBAAgB,CAACwT,IAAI,KAAK,QAAQ,EAAE;IAE9E,MAAM;MAAEnW,GAAG;MAAE8C;IAAI,CAAC,GAAGH,gBAAgB;IACrC,MAAMlD,MAAM,GAAGmD,OAAO,CAAC5C,GAAG,CAAC;IAC3B,MAAMJ,OAAO,GAAGJ,UAAU,CAACC,MAAM,EAAEC,qBAAqB,EAAE;MAAE8D,IAAI,EAAE,KAAK;MAAEV;IAAI,CAAC,CAAC;IAE/E,MAAMyS,WAAW,GAAIc,eAAwB,IAAK;MAChD6K,kBAAkB,CAAC7S,OAAO,GAAGgI,eAAe;MAC5CmK,mBAAmB,CAAC,CAAC;QAAExgB,GAAG;QAAE+C;MAAO,CAAC,MAAM;QAAE/C,GAAG;QAAE+C,MAAM;QAAEoT,IAAI,EAAE;MAAS,CAAC,CAAC,CAAC;KAC5E;IAED,MAAMb,WAAW,GAAGA,CAACxS,GAAM,EAAEsT,aAAsB,EAAEC,eAAwB,KAAK;MAChF,IAAID,aAAa,EAAE;QAKjBjH,SAAS,CAAC,MAAM;UACdsT,SAAS,CAAChjB,MAAM,EAAEkD,gBAAgB,CAACI,MAAM,EAAED,GAAG,CAAC;UAC/CyS,WAAW,CAACc,eAAe,CAAC;QAC9B,CAAC,CAAC;MACJ,CAAC,MAAM;QACLmK,mBAAmB,CAAE7N,QAAQ,KAAM;UAAE,GAAGA,QAAQ;UAAE7P;QAAI,CAAC,CAAC,CAAC;MAC3D;KACD;IAED,IAAID,IAAI,CAACF,gBAAgB,CAACI,MAAM,CAAC,KAAKJ,gBAAgB,CAACgiB,WAAW,EAAE;MAElEpP,WAAW,CAAC,KAAK,CAAC;IACpB;IAEA,oBACEjT,GAAA,CAAC+S,QAAQ;MAEP5V,MAAM,EAAEA,MAAO;MACfG,OAAO,EAAEA,OAAQ;MACjBkD,GAAG,EAAEA,GAAI;MACTC,MAAM,EAAEA,MAAO;MACfuS,WAAW,EAAEA,WAAY;MACzBC,WAAW,EAAEA,WAAY;MACzB7M,SAAS,EAAEwW,aAAc;MACzB1J,QAAQ,EAAEA;KARL,EAAA/V,MAAM,CAAC4B,GASb,CAAC;EAEN;EAEA,SAASgkB,qBAAqBA,CAACtiB,MAAc,EAAE;IAE7C,MAAMuiB,cAAc,GAAG3iB,gBAAgB,CAAC3C,GAAG,KAAK,CAAC,CAAC,GAAGC,SAAS,GAAG2C,OAAO,CAACD,gBAAgB,CAAC3C,GAAG,CAAC;IAC9F,IACEslB,cAAc,KAAKrlB,SAAS,IAC5B0C,gBAAgB,CAACI,MAAM,KAAKA,MAAM,IAClC,CAACb,eAAe,CAACqjB,QAAQ,CAACD,cAAc,CAAC,EACzC;MAEA,OAAO3iB,gBAAgB,CAAC3C,GAAG,GAAGgN,iBAAiB,GAC3C,CAAC,GAAG9K,eAAe,EAAEojB,cAAc,CAAC,GACpC,CACE,GAAGpjB,eAAe,CAACsjB,KAAK,CAAC,CAAC,EAAE9lB,qBAAqB,GAAG,CAAC,CAAC,EACtD4lB,cAAc,EACd,GAAGpjB,eAAe,CAACsjB,KAAK,CAAC9lB,qBAAqB,GAAG,CAAC,CAAC,CACpD;IACP;IACA,OAAOwC,eAAe;EACxB;EAEA,SAASujB,eAAeA,CAAA,EAAG;IACzB,MAAMC,WAA8B,GAAG,EAAE;IAEzC,MAAM;MAAE1lB,GAAG,EAAE2lB,WAAW;MAAE5iB,MAAM,EAAE6iB;IAAe,CAAC,GAAGjjB,gBAAgB;IAErE,MAAM+R,WAAW,GACfqN,kCAAkC,IAAI6D,cAAc,GAAGhU,mBAAmB,GACtEA,mBAAmB,GAAG,CAAC,GACvBA,mBAAmB;IACzB,MAAM+C,SAAS,GACboN,kCAAkC,IAAI6D,cAAc,GAAG/T,iBAAiB,GACpEA,iBAAiB,GAAG,CAAC,GACrBA,iBAAiB;IAEvB,KAAK,IAAIgU,cAAc,GAAGnR,WAAW,EAAEmR,cAAc,IAAIlR,SAAS,EAAEkR,cAAc,EAAE,EAAE;MACpF,MAAMC,oBAAoB,GACxBD,cAAc,KAAKjU,mBAAmB,GAAG,CAAC,IAAIiU,cAAc,KAAKhU,iBAAiB,GAAG,CAAC;MACxF,MAAM9O,MAAM,GAAG+iB,oBAAoB,GAAGF,cAAc,GAAGC,cAAc;MAErE,IAAIE,UAAU,GAAG7jB,eAAe;MAChC,MAAMojB,cAAc,GAAGK,WAAW,KAAK,CAAC,CAAC,GAAG1lB,SAAS,GAAG2C,OAAO,CAAC+iB,WAAW,CAAC;MAC5E,IAAIL,cAAc,KAAKrlB,SAAS,EAAE;QAChC,IAAI6lB,oBAAoB,EAAE;UAExBC,UAAU,GAAG,CAACT,cAAc,CAAC;QAC/B,CAAC,MAAM;UAELS,UAAU,GAAGV,qBAAqB,CAACtiB,MAAM,CAAC;QAC5C;MACF;MAEA,MAAMD,GAAG,GAAGD,IAAI,CAACE,MAAM,CAAC;MACxB,MAAMsY,YAAY,GAAGgF,4BAA4B,GAAGtd,MAAM,GAAG,CAAC;MAC9D,IAAI1B,GAAe,GAAG0B,MAAM;MAC5B,IAAIiH,aAAa,GAAG,KAAK;MACzB,IAAI,OAAO0U,YAAY,KAAK,UAAU,EAAE;QACtCrd,GAAG,GAAGqd,YAAY,CAAC5b,GAAG,CAAC;QACvBkH,aAAa,GAAGgV,YAAY,EAAEzd,GAAG,CAACF,GAAG,CAAC,IAAI,KAAK;MACjD;MAEAqkB,WAAW,CAACtZ,IAAI,CACd0T,SAAS,CAACze,GAAG,EAAE;QAEb,eAAe,EAAEgf,4BAA4B,GAAGtd,MAAM,GAAG,CAAC;QAC1D,eAAe,EAAEse,YAAY,GAAGrX,aAAa,GAAG/J,SAAS;QACzD8C,MAAM;QACND,GAAG;QACHZ,eAAe,EAAE6jB,UAAU;QAC3B/b,aAAa;QACb0R,WAAW,EAAEyG,iBAAiB;QAC9BxG,iBAAiB,EAAEyG,uBAAuB;QAC1CxG,iBAAiB,EAAEyG,uBAAuB;QAC1CxG,QAAQ;QACRR,YAAY;QACZ5V,MAAM,EAAE6M,YAAY,CAACvP,MAAM,CAAC;QAC5BuY,aAAa,EACXmF,UAAU,KAAK,IAAI,IAAIA,UAAU,CAAC3d,GAAG,KAAKA,GAAG,GACzCF,OAAO,CAACwV,SAAS,CAAE4N,CAAC,IAAKA,CAAC,CAAC3kB,GAAG,KAAKof,UAAU,CAACzL,SAAS,CAAC,GACxD/U,SAAS;QAEf8Z,eAAe,EAAE6L,cAAc,KAAK7iB,MAAM,GAAG4iB,WAAW,GAAG1lB,SAAS;QACpEsb,kBAAkB,EAAE0J,qBAAqB,CAACliB,MAAM,CAAC;QACjD6Q,oBAAoB,EAAE+M,UAAU,GAAG/M,oBAAoB,GAAG3T,SAAS;QACnEP,qBAAqB;QACrB4V,WAAW,EAAEkN,8BAA8B;QAC3CzK,UAAU,EAAE2K,gBAAgB;QAC5BjH,sBAAsB,EAAE0J,aAAa,CAACpiB,MAAM,CAAC;QAC7CyY,kBAAkB,EAAE4J,aAAa,CAACriB,MAAM;MAC1C,CAAC,CACH,CAAC;IACH;IAEA,OAAO2iB,WAAW;EACpB;EAGA,IAAI/iB,gBAAgB,CAAC3C,GAAG,GAAG4E,SAAS,IAAIjC,gBAAgB,CAACI,MAAM,GAAGa,SAAS,EAAE;IAC3E4c,mBAAmB,CAAC;MAAExgB,GAAG,EAAE,CAAC,CAAC;MAAE+C,MAAM,EAAEQ,SAAS,GAAG,CAAC;MAAE4S,IAAI,EAAE;IAAS,CAAC,CAAC;IACvEvC,oBAAoB,CAAC3T,SAAS,CAAC;EACjC;EAEA,IAAIgmB,YAAY,GAAM,GAAArH,eAAmB;EACzC,IAAItb,mBAAmB,GAAG,CAAC,EAAE;IAC3B2iB,YAAY,IAAK,WAAU3iB,mBAAoB,KAAIwb,gBAAqB;EAC1E;EACA,IAAIjc,IAAI,CAACd,MAAM,GAAG,CAAC,EAAE;IACnBkkB,YAAY,IAAI7T,gBAAgB;EAClC;EACA,IAAI+N,sBAAsB,GAAG,CAAC,EAAE;IAC9B8F,YAAY,IAAK,WAAU9F,sBAAuB,KAAIrB,gBAAqB;EAC7E;EAEA,MAAMoH,iBAAiB,GACrBvjB,gBAAgB,CAAC3C,GAAG,KAAK,CAAC,CAAC,IAAI2C,gBAAgB,CAACI,MAAM,KAAKQ,SAAS,GAAG,CAAC;EAE1E,oBACEoE,IAAA;IACE+O,IAAI,EAAEA,IAAK;IACX,cAAYrN,SAAU;IACtB,mBAAiBC,cAAe;IAChC,oBAAkBoW,eAAgB;IAClC,wBAAsB2B,YAAY,GAAG,IAAI,GAAGphB,SAAU;IACtD,eAAe,EAAA2C,OAAO,CAACb,MAAO;IAC9B,iBAAeyf,YAAa;IAC5Bjf,SAAS,EAAEwD,IAAI,CACboX,aAAa,EAIb5a,SAAS,EAFsBoe,UAAU,IAAtCtD,yBAGL,CAAE;IACF7a,KAAK,EACH;MACE,GAAGA,KAAK;MAER2jB,wBAAwB,EACtBxjB,gBAAgB,CAAC3C,GAAG,GAAGN,qBAAqB,IAAI2c,gBAAgB,EAAErc,GAAG,KAAKC,SAAS,GAC9E,GAAEsM,sBAAuB,IAAG,GAC7BtM,SAAS;MACfmmB,kBAAkB,EAChB/C,4BAA4B,CAAC1gB,gBAAgB,CAACI,MAAM,CAAC,IACrDsZ,gBAAgB,EAAEtZ,MAAM,KAAK9C,SAAS,GAC/B,GAAA2e,eAAe,GAAGtb,mBAAmB,GAAGwb,gBACzC,MAAAqB,sBAAsB,GAAGrB,gBACvB,OACJ7e,SAAS;MACfuO,mBAAmB;MACnB4D,gBAAgB,EAAE6T,YAAY;MAC9B,yBAAyB,EAAK,GAAArH,eAAmB;MACjD,0BAA0B,EAAK,GAAAE,gBAAoB;MACnD,YAAY,EAAE5G,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;MAC5B,GAAG5L;KAEN;IACD+Z,GAAG,EAAEpO,SAAU;IACfjH,GAAG,EAAEpD,OAAQ;IACbuR,QAAQ,EAAEkF,YAAa;IACvB3b,SAAS,EAAEF,aAAc;IACzB,eAAaoX,MAAO;IAAA/X,QAAA,gBAEpBvF,GAAA,CAACyG,gCAAgC;MAACK,KAAK,EAAEqY,qBAAsB;MAAA5Z,QAAA,eAC7DF,IAAA,CAAC+B,0BAA0B;QAACN,KAAK,EAAEkZ,eAAgB;QAAAza,QAAA,gBACjDvF,GAAA,CAACkH,oBAAoB;UAACJ,KAAK,EAAEsY,eAAgB;UAAA7Z,QAAA,eAC3CvF,GAAA,CAAC4X,WAAS;YACRtX,OAAO,EAAEyiB,qBAAqB,CAAC9hB,SAAS,CAAE;YAC1CyK,cAAc,EAAEiU,wBAAyB;YACzCpK,WAAW,EAAEA,WAAY;YACzBC,mBAAmB,EAAEoK,yBAA0B;YAC/CxiB,qBAAqB,EAAEA,qBAAsB;YAC7Cqa,eAAe,EACbpX,gBAAgB,CAACI,MAAM,KAAKQ,SAAS,GAAGZ,gBAAgB,CAAC3C,GAAG,GAAGC,SAChE;YACD8X,UAAU,EAAE4K,sBAAuB;YACnC3K,eAAe,EAAE,CAAC6J,mCAAoC;YACtD5J,SAAS,EAAEA;WACZ;QAAC,CACkB,CAAC,EACtBpV,IAAI,CAACd,MAAM,KAAK,CAAC,IAAIke,cAAc,GAClCA,cAAc,gBAEdtY,IAAA,CAAAiP,QAAA;UAAA/O,QAAA,GACGzE,cAAc,EAAEjB,GAAG,CAAC,CAACW,GAAG,EAAEC,MAAM,KAAK;YACpC,MAAMsY,YAAY,GAAG6E,eAAe,GAAGnd,MAAM,GAAG,CAAC;YACjD,MAAMujB,aAAa,GAAGvjB,MAAM,GAAGQ,SAAS,GAAG,CAAC;YAC5C,MAAMgjB,oBAAoB,GAAG5jB,gBAAgB,CAACI,MAAM,KAAKujB,aAAa;YACtE,MAAM1T,GAAG,GAAGgM,eAAe,GAAGE,gBAAgB,GAAG/b,MAAM;YAEvD,oBACET,GAAA,CAACkc,YAAU;cACT,iBAAenD,YAAa;cAE5BtY,MAAM,EAAEujB,aAAc;cACtBjL,YAAY,EAAEA,YAAa;cAC3BvY,GAAG,EAAEA,GAAI;cACT8P,GAAG,EAAEA,GAAI;cACTwL,MAAM,EAAEne,SAAU;cAClBiC,eAAe,EAAEmjB,qBAAqB,CAACiB,aAAa,CAAE;cACtD5mB,qBAAqB,EAAEA,qBAAsB;cAC7Cqa,eAAe,EAAEwM,oBAAoB,GAAG5jB,gBAAgB,CAAC3C,GAAG,GAAGC,SAAU;cACzEoe,KAAK;cACLC,UAAU,EAAEvb,MAAM,KAAKO,mBAAmB,GAAG,CAAE;cAC/CyU,UAAU,EAAE2K;YAAiB,GAXxB3f,MAYN,CAAC;UAEN,CAAC,CAAC,EACD0iB,eAAe,EAAE,EACjBpiB,iBAAiB,EAAElB,GAAG,CAAC,CAACW,GAAG,EAAEC,MAAM,KAAK;YACvC,MAAMsY,YAAY,GAAGgF,4BAA4B,GAAGxd,IAAI,CAACd,MAAM,GAAGgB,MAAM,GAAG,CAAC;YAC5E,MAAMujB,aAAa,GAAGzjB,IAAI,CAACd,MAAM,GAAGgB,MAAM;YAC1C,MAAMwjB,oBAAoB,GAAG5jB,gBAAgB,CAACI,MAAM,KAAKujB,aAAa;YACtE,MAAM1T,GAAG,GACPzC,YAAY,GAAGgC,cAAc,GACzBiP,UAAU,GAAGtC,gBAAgB,IAAIzb,iBAAiB,CAACtB,MAAM,GAAGgB,MAAM,CAAC,GACnE9C,SAAS;YACf,MAAMme,MAAM,GACVxL,GAAG,KAAK3S,SAAS,GACb6e,gBAAgB,IAAIzb,iBAAiB,CAACtB,MAAM,GAAG,CAAC,GAAGgB,MAAM,CAAC,GAC1D9C,SAAS;YAEf,oBACEqC,GAAA,CAACkc,YAAU;cACT,iBAAegD,YAAY,GAAGrB,sBAAsB,GAAGpd,MAAM,GAAG,CAAE;cAElEA,MAAM,EAAEujB,aAAc;cACtBjL,YAAY,EAAEA,YAAa;cAC3BvY,GAAG,EAAEA,GAAI;cACT8P,GAAG,EAAEA,GAAI;cACTwL,MAAM,EAAEA,MAAO;cACflc,eAAe,EAAEmjB,qBAAqB,CAACiB,aAAa,CAAE;cACtD5mB,qBAAqB,EAAEA,qBAAsB;cAC7Cqa,eAAe,EAAEwM,oBAAoB,GAAG5jB,gBAAgB,CAAC3C,GAAG,GAAGC,SAAU;cACzEoe,KAAK,EAAE,KAAM;cACbC,UAAU,EAAEvb,MAAM,KAAK,CAAE;cACzBgV,UAAU,EAAE2K;YAAiB,GAXxB3f,MAYN,CAAC;UAEN,CAAC,CAAC;QAAA,CACF,CACH;OACyB;KACI,CAAC,EAGlCd,oBAAoB,CAACC,eAAe,CAAC,EAGrCif,UAAU,iBACT7e,GAAA;MACE0O,GAAG,EAAEiQ,YAAa;MAClB3Y,QAAQ,EAAE4d,iBAAiB,GAAG,CAAC,GAAG,CAAC,CAAE;MACrC3jB,SAAS,EAAEwD,IAAI,CAACuX,kBAAkB,EAIjB4I,iBAAiB,IAA/B,CAAAzM,WAAW,EACsC/Z,qBAAqB,KAAK,CAAC,CAAC,IAA7Eia,yBAAyB,CAJY,GAAC0J,4BAA4B,CACjE1gB,gBAAgB,CAACI,MACnB,CAAC,IAFAwa,kCAKF,CAAE;MACH/a,KAAK,EAAE;QACL6Y,YAAY,EAAE1Y,gBAAgB,CAACI,MAAM,GAAGsd,4BAA4B,GAAG;MACzE;KACD,CACF,EAEAhE,gBAAgB,KAAK,IAAI,iBACxB/Z,GAAA,CAAC8Z,YAAY;MACXC,gBAAgB,EAAEA,gBAAiB;MACnCE,uBAAuB,EAAEuE,mBAAoB;MAC7CxE,WAAW,EAAE1O,OAAO,CAACS;IAAS,CAC/B,CACF;EAAA,CACE,CAAC;AAEV;AAEA,SAAS0U,eAAeA,CAACyD,MAAsB,EAAE;EAC/C,OAAOA,MAAM,CAAC/W,aAAa,CAAiB,wCAAwC,CAAC;AACvF;AAEA,SAASmT,cAAcA,CAAC6D,EAAY,EAAEC,EAAY,EAAE;EAClD,OAAOD,EAAE,CAACzmB,GAAG,KAAK0mB,EAAE,CAAC1mB,GAAG,IAAIymB,EAAE,CAAC1jB,MAAM,KAAK2jB,EAAE,CAAC3jB,MAAM;AACrD;AAEA,MAAA4jB,UAAA,GAAe,aAAA1K,UAAU,CAACwC,QAAQ,CAAC;AClmCnC,SAASmI,SAASA,CAAQ;EACxBC,EAAE;EACFze,QAAQ;EACR0e,SAAS;EACTze,UAAU;EACVuP,cAAc;EACdnY,MAAM;EACNqD,GAAG;EACHikB,gBAAgB;EAChBC,eAAe;EACfze,WAAW,EAAE0e;AACQ,CAAC,EAAE;EACxB,MAAM;IAAE3e,QAAQ;IAAEoJ,aAAa;IAAEH;EAAQ,CAAC,GAAGJ,iBAAiB,CAACyG,cAAc,CAAC;EAE9E,SAASrP,WAAWA,CAAA,EAAG;IACrB0e,kBAAkB,CAACJ,EAAE,CAAC;EACxB;EAGA,MAAMK,eAAe,GAAGF,eAAe,IAAID,gBAAgB,KAAKtnB,MAAM,CAACO,GAAG;EAE1E,oBACEsC,GAAA;IACEoU,IAAI,EAAC,UAAU;IACf,iBAAejX,MAAM,CAACO,GAAG,GAAG,CAAE;IAC9B,iBAAe4X,cAAe;IAC9BtP,QAAQ,EAAEA,QAAS;IAEnB/F,SAAS,EAAEsD,gBAAgB,CAACpG,MAAM,CAAE;IACpC+C,KAAK,EAAE;MACL,GAAGkD,YAAY,CAACjG,MAAM,CAAC;MACvB0nB,MAAM,EAAED,eAAe,GAAG,SAAS,GAAG;KACtC;IACF1P,OAAO,EAAE0P,eAAe,GAAG3e,WAAW,GAAGtI,SAAU;IACnDsR,OAAO,EAAEA,OAAQ;IAAA1J,QAAA,EAEhB,CAAC,CAACmf,eAAe,IAAIE,eAAe,KACnCznB,MAAM,CAACkL,eAAe,GAAG;MACvBvC,QAAQ;MACR0e,SAAS;MACTrnB,MAAM;MACNqD,GAAG;MACHuF,UAAU;MACVC,QAAQ,EAAEoJ,aAAa;MACvBnJ;KACD;GAlBE,EAAA9I,MAAM,CAAC4B,GAmBT,CAAC;AAEV;AAEA,MAAA+lB,WAAA,GAAe,aAAAjN,IAAI,CAACyM,SAAS,CAAC;ACzD9B,MAAMS,QAAQ,GAUb;AAED,MAAMC,iBAAiB,GAAoB,iBAAAD,QAAU;AAQrD,SAASE,UAAUA,CAAQ;EACzBhlB,SAAS;EACTO,GAAG;EACHC,MAAM;EACNb,eAAe;EACf6X,eAAe;EACf/P,aAAa;EACb+N,UAAU;EACVsD,YAAY;EACZ5V,MAAM;EACN+hB,OAAO;EACPjf,WAAW;EACX,GAAGhB;AACyB,CAAC,EAAE;EAE/B,MAAMvH,GAAG,GAAGkC,eAAe,CAAC,CAAC,CAAC,CAACb,GAAG,KAAKyI,iBAAiB,GAAGhH,GAAG,CAAC2kB,KAAK,GAAG,CAAC,GAAG3kB,GAAG,CAAC2kB,KAAK;EAEpF,SAASC,iBAAiBA,CAAA,EAAG;IAC3B3P,UAAU,CAAC;MAAEhV,MAAM;MAAE/C,GAAG,EAAE,CAAC;IAAE,CAAC,CAAC;EACjC;EAEA,oBACEsC,GAAA,CAACkH,oBAAoB;IAACJ,KAAK,EAAEY,aAAc;IAAAnC,QAAA,eACzCvF,GAAA;MACEoU,IAAI,EAAC,KAAK;MACV,cAAY5T,GAAG,CAAC2kB,KAAK,GAAG,CAAE;MAC1B,cAAc,EAAA3kB,GAAG,CAAC6kB,OAAQ;MAC1B,iBAAe7kB,GAAG,CAAC8kB,QAAQ,GAAG,CAAE;MAChC,eAAe,EAAA9kB,GAAG,CAACuF,UAAW;MAC9B9F,SAAS,EAAEwD,IAAI,CACbyT,YAAY,EACZ8N,iBAAiB,EACN,WAAAvkB,MAAM,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG,KAAO,IAE9CR,SACF,EAFEwX,eAAe,KAAK,CAAC,CAAC,IAAIL,oBAE5B,CAAE;MACFlC,OAAO,EAAEkQ,iBAAkB;MAC3BllB,KAAK,EAAEgD,WAAW,CAAC6V,YAAY,EAAE5V,MAAM,CAAE;MAAA,GACrC8B,KAAK;MAAAM,QAAA,EAER3F,eAAe,CAACC,GAAG,CAAE1C,MAAM,iBAC1B6C,GAAA,CAAC8kB,WAAS;QAERP,EAAE,EAAE/jB,GAAG,CAAC+jB,EAAG;QACXze,QAAQ,EAAEtF,GAAG,CAACsF,QAAS;QACvB0e,SAAS,EAAEhkB,GAAG,CAACgkB,SAAU;QACzBze,UAAU,EAAEvF,GAAG,CAACuF,UAAW;QAC3BuP,cAAc,EAAEmC,eAAe,KAAKta,MAAM,CAACO,GAAI;QAC/CP,MAAM,EAAEA,MAAO;QACfqD,GAAG,EAAEA,GAAI;QACTikB,gBAAgB,EAAE/mB,GAAI;QACtBuI,WAAW,EAAEA,WAAY;QACzBye,eAAe,EAAEQ,OAAO,CAACjC,QAAQ,CAAC9lB,MAAM,CAAC4B,GAAG;OAVvC,EAAA5B,MAAM,CAAC4B,GAUkC,CAEjD;KACE;EAAA,CACe,CAAC;AAE3B;AAEA,MAAAwmB,YAAA,GAAe,aAAA1N,IAAI,CAACoN,UAAU,CAAC;ACpD/B,SAASO,YAAYA,CACnB;EACEllB,OAAO,EAAEmI,UAAU;EACnBlI,IAAI,EAAEklB,OAAO;EACb9V,SAAS,EAAE0M,YAAY;EACvBD,YAAY,EAAEsJ,eAAe;EAC7B9I,aAAa,EAAE+I,gBAAgB;EAC/BxU,YAAY;EACZuL,YAAY,EAAEkJ,eAAe;EAC7BjJ,oBAAoB,EAAEkJ,uBAAuB;EAC7C5I,SAAS;EACTiI,OAAO,EAAEY,UAAU;EACnBC,UAAU;EACVC,gBAAgB;EAChBC,wBAAwB;EACxB,GAAGhhB;AACwB,CAAC,EAC9ByJ,GAA8B,EAC9B;EACA,MAAM6O,gBAAgB,GAAG5W,mBAAmB,EAAS;EACrD,MAAMuf,YAAY,GAAGjJ,SAAS,EAAEO,SAAS,IAAID,gBAAgB,EAAEC,SAAS,IAAI3D,gBAAgB;EAC5F,MAAMkE,4BAA4B,GAAG,CAAC,IAAI9Y,KAAK,CAACnE,cAAc,EAAErB,MAAM,IAAI,CAAC,CAAC;EAC5E,MAAMmW,KAAK,GAAG3Q,KAAK,CAAC0Q,SAAS,KAAK,KAAK;EACvC,MAAMqJ,OAAO,GAAGpJ,KAAK,GAAG,YAAY,GAAG,WAAW;EAClD,MAAMqJ,QAAQ,GAAGrJ,KAAK,GAAG,WAAW,GAAG,YAAY;EACnD,MAAMuQ,iBAAiB,GAAG3X,aAAa,CAACvI,WAAW,CAAC;EAEpD,MAAM;IAAE3F,OAAO;IAAE4kB;GAAS,GAAG5b,OAAO,CAAC,MAAM;IACzC,MAAMhJ,OAAO,GAAG,CAAC,GAAGmI,UAAU,CAAC,CAACe,IAAI,CAAC,CAAC;MAAEzK,GAAG,EAAE0K;IAAK,CAAC,EAAE;MAAE1K,GAAG,EAAE4K;IAAK,CAAC,KAAK;MAErE,IAAIF,IAAI,KAAKjC,iBAAiB,EAAE,OAAO,CAAC,CAAC;MACzC,IAAImC,IAAI,KAAKnC,iBAAiB,EAAE,OAAO,CAAC;MAGxC,IAAIse,UAAU,CAAC7C,QAAQ,CAACxZ,IAAI,CAAC,EAAE;QAC7B,IAAIqc,UAAU,CAAC7C,QAAQ,CAACtZ,IAAI,CAAC,EAAE;UAC7B,OAAOmc,UAAU,CAAC1E,OAAO,CAAC3X,IAAI,CAAC,GAAGqc,UAAU,CAAC1E,OAAO,CAACzX,IAAI,CAAC;QAC5D;QACA,OAAO,CAAC,CAAC;MACX;MACA,IAAImc,UAAU,CAAC7C,QAAQ,CAACtZ,IAAI,CAAC,EAAE,OAAO,CAAC;MAGvC,OAAO,CAAC;IACV,CAAC,CAAC;IAEF,MAAMub,OAAiB,GAAG,EAAE;IAC5B,KAAK,MAAM,CAACvN,KAAK,EAAExa,MAAM,CAAC,IAAImD,OAAO,CAAC6N,OAAO,EAAE,EAAE;MAC/C,IAAI2X,UAAU,CAAC7C,QAAQ,CAAC9lB,MAAM,CAAC4B,GAAG,CAAC,EAAE;QACnCmmB,OAAO,CAACpb,IAAI,CAAC3M,MAAM,CAAC4B,GAAG,CAAC;QACxBuB,OAAO,CAACqX,KAAK,CAAC,GAAG;UACf,GAAGxa,MAAM;UACTM,MAAM,EAAE,IAAI;UACZ2K,UAAU,EAAEA,CAAA,KAAM,IAAI;UACtBC,eAAe,EAAElL,MAAM,CAACkL,eAAe,IAAIzC,iBAAiB;UAC5DhF,QAAQ,EAAE;SACX;MACH;IACF;IAEA,OAAO;MAAEN,OAAO;MAAE4kB;KAAS;EAC7B,CAAC,EAAE,CAACzc,UAAU,EAAEqd,UAAU,CAAC,CAAC;EAE5B,MAAM,CAACM,WAAW,EAAEC,SAAS,CAAC,GAAG/c,OAAO,CAAC,MAAM;IAC7C,IAAI4b,OAAO,CAACzlB,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC9B,SAAS,EAAE8nB,OAAO,CAAChmB,MAAM,CAAC;IAE5D,MAAM6mB,SAAS,GAAGA,CAChB/lB,IAAkB,EAClB,CAACgmB,UAAU,EAAE,GAAGC,oBAAoB,CAAoB,EACxDzU,aAAqB,KACwB;MAC7C,IAAI0U,cAAc,GAAG,CAAC;MACtB,MAAMC,MAA4B,GAAG,EAAE;MACvC,KAAK,MAAM,CAAC3nB,GAAG,EAAEylB,SAAS,CAAC,IAAIlmB,MAAM,CAAC6P,OAAO,CAAC4X,UAAU,CAACxlB,IAAI,EAAEgmB,UAAU,CAAC,CAAC,EAAE;QAE3E,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GACjCJ,oBAAoB,CAAC/mB,MAAM,KAAK,CAAC,GAC7B,CAAC+kB,SAAS,EAAEA,SAAS,CAAC/kB,MAAM,CAAC,GAC7B6mB,SAAS,CAAC9B,SAAS,EAAEgC,oBAAoB,EAAEzU,aAAa,GAAG0U,cAAc,GAAG,CAAC,CAAC;QACpFC,MAAM,CAAC3nB,GAAG,CAAC,GAAG;UAAEylB,SAAS;UAAEmC,WAAW;UAAE5U,aAAa,EAAEA,aAAa,GAAG0U;SAAgB;QACvFA,cAAc,IAAIG,cAAc,GAAG,CAAC;MACtC;MAEA,OAAO,CAACF,MAAM,EAAED,cAAc,CAAC;KAChC;IAED,OAAOH,SAAS,CAACb,OAAO,EAAEP,OAAO,EAAE,CAAC,CAAC;GACtC,EAAE,CAACA,OAAO,EAAEa,UAAU,EAAEN,OAAO,CAAC,CAAC;EAElC,MAAM,CAACllB,IAAI,EAAEsmB,UAAU,CAAC,GAAGvd,OAAO,CAAC,MAG9B;IACH,MAAMwd,YAAY,GAAG,IAAIpoB,GAAG,EAAW;IACvC,IAAI,CAAC0nB,WAAW,EAAE,OAAO,CAACX,OAAO,EAAEoB,UAAU,CAAC;IAE9C,MAAME,aAAqC,GAAG,EAAE;IAChD,MAAMC,WAAW,GAAGA,CAClBzmB,IAAyC,EACzC0mB,QAA4B,EAC5B9B,KAAa,KACJ;MACT,IAAI+B,eAAe,CAAC3mB,IAAI,CAAC,EAAE;QACzBwmB,aAAa,CAACjd,IAAI,CAAC,GAAGvJ,IAAI,CAAC;QAC3B;MACF;MACAjC,MAAM,CAAC6oB,IAAI,CAAC5mB,IAAI,CAAC,CAACsJ,OAAO,CAAC,CAAC/D,QAAQ,EAAEwf,QAAQ,EAAE6B,IAAI,KAAK;QAEtD,MAAM5C,EAAE,GAAG0C,QAAQ,KAAKtpB,SAAS,GAAM,GAAAspB,QAAa,KAAAnhB,QAAU,KAAGA,QAAQ;QACzE,MAAMC,UAAU,GAAGigB,gBAAgB,CAAC/mB,GAAG,CAACslB,EAAE,CAAC;QAC3C,MAAM;UAAEC,SAAS;UAAEmC,WAAW;UAAE5U;QAAc,CAAC,GAAGxR,IAAI,CAACuF,QAAQ,CAAC;QAEhE,MAAMif,QAAqB,GAAG;UAC5BR,EAAE;UACF0C,QAAQ;UACRnhB,QAAQ;UACRC,UAAU;UACVye,SAAS;UACTW,KAAK;UACLG,QAAQ;UACRvT,aAAa;UACbsT,OAAO,EAAE8B,IAAI,CAAC1nB;SACf;QACDsnB,aAAa,CAACjd,IAAI,CAACib,QAAQ,CAAC;QAC5B+B,YAAY,CAAC5F,GAAG,CAAC6D,QAAQ,CAAC;QAE1B,IAAIhf,UAAU,EAAE;UACdihB,WAAW,CAACL,WAAW,EAAEpC,EAAE,EAAEY,KAAK,GAAG,CAAC,CAAC;QACzC;MACF,CAAC,CAAC;KACH;IAED6B,WAAW,CAACZ,WAAW,EAAEzoB,SAAS,EAAE,CAAC,CAAC;IACtC,OAAO,CAACopB,aAAa,EAAEF,UAAU,CAAC;IAElC,SAASA,UAAUA,CAACrmB,GAAoB,EAAsB;MAC5D,OAAOsmB,YAAY,CAAC7nB,GAAG,CAACuB,GAAG,CAAC;IAC9B;GACD,EAAE,CAACwlB,gBAAgB,EAAEI,WAAW,EAAEX,OAAO,CAAC,CAAC;EAE5C,MAAM9V,SAAS,GAAGrG,OAAO,CAAC,MAAM;IAC9B,IAAI,OAAO+S,YAAY,KAAK,UAAU,EAAE;MACtC,OAAQ7b,GAAoB,IAAa;QACvC,IAAIqmB,UAAU,CAACrmB,GAAG,CAAC,EAAE;UACnB,OAAO6b,YAAY,CAAC;YAAEnb,IAAI,EAAE,OAAO;YAAEV;UAAI,CAAC,CAAC;QAC7C;QACA,OAAO6b,YAAY,CAAC;UAAEnb,IAAI,EAAE,KAAK;UAAEV;QAAI,CAAC,CAAC;OAC1C;IACH;IAEA,OAAO6b,YAAY;EACrB,CAAC,EAAE,CAACwK,UAAU,EAAExK,YAAY,CAAC,CAAC;EAE9B,MAAM+K,oBAAoB,GAAGxY,WAAW,CACrCpO,GAAoB,IAAK;IACxB,MAAMC,MAAM,GAAGF,IAAI,CAAC6gB,OAAO,CAAC5gB,GAAG,CAAC;IAChC,KAAK,IAAIgK,CAAC,GAAG/J,MAAM,GAAG,CAAC,EAAE+J,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACpC,MAAM6c,SAAS,GAAG9mB,IAAI,CAACiK,CAAC,CAAC;MACzB,IAAIqc,UAAU,CAACQ,SAAS,CAAC,KAAK,CAACR,UAAU,CAACrmB,GAAG,CAAC,IAAIA,GAAG,CAACymB,QAAQ,KAAKI,SAAS,CAAC9C,EAAE,CAAC,EAAE;QAChF,OAAO,CAAC8C,SAAS,EAAE7c,CAAC,CAAC;MACvB;IACF;IAEA,OAAO7M,SAAS;EAClB,CAAC,EACD,CAACkpB,UAAU,EAAEtmB,IAAI,CACnB,CAAC;EAED,MAAM6b,YAAY,GAAGxN,WAAW,CAC7BpO,GAAoB,IAAK;IACxB,IAAIqmB,UAAU,CAACrmB,GAAG,CAAC,EAAE;MACnB,OAAOA,GAAG,CAAC+jB,EAAE;IACf;IAEA,IAAI,OAAOmB,eAAe,KAAK,UAAU,EAAE;MACzC,OAAOA,eAAe,CAACllB,GAAG,CAAC;IAC7B;IAEA,MAAM8mB,iBAAiB,GAAGF,oBAAoB,CAAC5mB,GAAG,CAAC;IACnD,IAAI8mB,iBAAiB,KAAK3pB,SAAS,EAAE;MACnC,MAAM;QAAEoU,aAAa;QAAEyS;MAAU,CAAC,GAAG8C,iBAAiB,CAAC,CAAC,CAAC;MACzD,MAAMC,UAAU,GAAG/C,SAAS,CAACpD,OAAO,CAAC5gB,GAAG,CAAC;MACzC,OAAOuR,aAAa,GAAGwV,UAAU,GAAG,CAAC;IACvC;IAEA,OAAOhnB,IAAI,CAAC6gB,OAAO,CAAC5gB,GAAG,CAAC;GACzB,EACD,CAAC4mB,oBAAoB,EAAEP,UAAU,EAAEnB,eAAe,EAAEnlB,IAAI,CAC1D,CAAC;EAED,MAAMmc,YAAY,GAAGpT,OAAO,CAAC,MAA+B;IAC1D,IAAIsc,eAAe,IAAI,IAAI,EAAE,OAAO,IAAI;IAExC1hB,sBAAsB,CAAOwhB,eAAe,CAAC;IAE7C,MAAMhJ,YAAY,GAAG,IAAIhe,GAAG,CAAMknB,eAAe,CAAC;IAClD,KAAK,MAAMplB,GAAG,IAAID,IAAI,EAAE;MACtB,IAAIsmB,UAAU,CAACrmB,GAAG,CAAC,EAAE;QAEnB,MAAMgnB,kBAAkB,GAAGhnB,GAAG,CAACgkB,SAAS,CAACnF,KAAK,CAAEoI,EAAE,IAChD7B,eAAe,CAAC3mB,GAAG,CAACymB,eAAe,CAAC+B,EAAE,CAAC,CACzC,CAAC;QACD,IAAID,kBAAkB,EAAE;UACtB9K,YAAY,CAACwE,GAAG,CAAC1gB,GAAG,CAAC+jB,EAAE,CAAC;QAC1B;MACF;IACF;IAEA,OAAO7H,YAAY;GACpB,EAAE,CAACmK,UAAU,EAAEnB,eAAe,EAAEE,eAAe,EAAErlB,IAAI,CAAC,CAAC;EAExD,SAASoc,oBAAoBA,CAACqE,eAAyB,EAAE;IACvD,IAAI,CAAC6E,uBAAuB,EAAE;IAE9B3hB,sBAAsB,CAAOwhB,eAAe,CAAC;IAE7C,MAAMgC,kBAAkB,GAAG,IAAIhpB,GAAG,CAACknB,eAAe,CAAC;IACnD,KAAK,MAAMplB,GAAG,IAAID,IAAI,EAAE;MACtB,MAAMxB,GAAG,GAAGqd,YAAY,CAAC5b,GAAG,CAAC;MAC7B,IAAIkc,YAAY,EAAEzd,GAAG,CAACF,GAAG,CAAC,IAAI,CAACiiB,eAAe,CAAC/hB,GAAG,CAACF,GAAG,CAAC,EAAE;QACvD,IAAI8nB,UAAU,CAACrmB,GAAG,CAAC,EAAE;UAEnB,KAAK,MAAMinB,EAAE,IAAIjnB,GAAG,CAACgkB,SAAS,EAAE;YAC9BkD,kBAAkB,CAACjb,MAAM,CAACiZ,eAAe,CAAC+B,EAAE,CAAC,CAAC;UAChD;QACF,CAAC,MAAM;UACLC,kBAAkB,CAACjb,MAAM,CAAC1N,GAAQ,CAAC;QACrC;MACF,CAAC,MAAM,IAAI,CAAC2d,YAAY,EAAEzd,GAAG,CAACF,GAAG,CAAC,IAAIiiB,eAAe,CAAC/hB,GAAG,CAACF,GAAG,CAAC,EAAE;QAC9D,IAAI8nB,UAAU,CAACrmB,GAAG,CAAC,EAAE;UAEnB,KAAK,MAAMinB,EAAE,IAAIjnB,GAAG,CAACgkB,SAAS,EAAE;YAC9BkD,kBAAkB,CAACxG,GAAG,CAACwE,eAAe,CAAC+B,EAAE,CAAC,CAAC;UAC7C;QACF,CAAC,MAAM;UACLC,kBAAkB,CAACxG,GAAG,CAACniB,GAAQ,CAAC;QAClC;MACF;IACF;IAEA8mB,uBAAuB,CAAC6B,kBAAkB,CAAC;EAC7C;EAEA,SAASxhB,aAAaA,CAAC7I,IAA4B,EAAEY,KAAwB,EAAE;IAC7E0nB,gBAAgB,GAAGtoB,IAAI,EAAEY,KAAK,CAAC;IAC/B,IAAIA,KAAK,CAACI,sBAAsB,EAAE,EAAE;IAEpC,IAAIhB,IAAI,CAACwW,IAAI,KAAK,MAAM,EAAE;IAC1B,MAAM;MAAE1W,MAAM;MAAEsD,MAAM;MAAEgV;IAAW,CAAC,GAAGpY,IAAI;IAE3C,MAAMK,GAAG,GAAGP,MAAM,EAAEO,GAAG,IAAI,CAAC,CAAC;IAC7B,MAAM8C,GAAG,GAAGD,IAAI,CAACE,MAAM,CAAC;IAExB,IAAI,CAAComB,UAAU,CAACrmB,GAAG,CAAC,EAAE;IACtB,IACE9C,GAAG,KAAK,CAAC,CAAC,KAERO,KAAK,CAACc,GAAG,KAAKigB,OAAO,IAAIxe,GAAG,CAACuF,UAAU,IAEtC9H,KAAK,CAACc,GAAG,KAAKkgB,QAAQ,IAAI,CAACze,GAAG,CAACuF,UAAW,CAAC,EAC9C;MACA9H,KAAK,CAAC+W,cAAc,EAAE;MACtB/W,KAAK,CAACG,kBAAkB,EAAE;MAC1B6H,WAAW,CAACzF,GAAG,CAAC+jB,EAAE,CAAC;IACrB;IAGA,IAAI7mB,GAAG,KAAK,CAAC,CAAC,IAAIO,KAAK,CAACc,GAAG,KAAKigB,OAAO,IAAI,CAACxe,GAAG,CAACuF,UAAU,IAAIvF,GAAG,CAAC2kB,KAAK,KAAK,CAAC,EAAE;MAC7E,MAAMmC,iBAAiB,GAAGF,oBAAoB,CAAC5mB,GAAG,CAAC;MACnD,IAAI8mB,iBAAiB,KAAK3pB,SAAS,EAAE;QACnCM,KAAK,CAACG,kBAAkB,EAAE;QAC1BqX,UAAU,CAAC;UAAE/X,GAAG;UAAE+C,MAAM,EAAE6mB,iBAAiB,CAAC,CAAC;QAAE,CAAC,CAAC;MACnD;IACF;IAGA,IAAI3oB,iBAAiB,CAACV,KAAK,CAAC,KAAKA,KAAK,CAACwjB,OAAO,KAAK,EAAE,IAAIxjB,KAAK,CAACwjB,OAAO,KAAK,EAAE,CAAC,EAAE;MAC9ExjB,KAAK,CAACG,kBAAkB,EAAE;IAC5B;EACF;EAEA,SAASupB,gBAAgBA,CAACpV,WAAgB,EAAE;IAAEC,OAAO;IAAErV;EAA8B,CAAC,EAAE;IACtF,IAAI,CAACgU,YAAY,EAAE;IACnB,MAAMyW,cAAc,GAAG,CAAC,GAAGnC,OAAO,CAAC;IACnC,MAAMoC,UAAoB,GAAG,EAAE;IAC/BrV,OAAO,CAAC3I,OAAO,CAAE8N,KAAK,IAAK;MACzB,MAAMmQ,QAAQ,GAAGrC,OAAO,CAACrE,OAAO,CAAC7gB,IAAI,CAACoX,KAAK,CAAM,CAAC;MAClDiQ,cAAc,CAACE,QAAQ,CAAC,GAAGvV,WAAW,CAACoF,KAAK,CAAC;MAC7CkQ,UAAU,CAAC/d,IAAI,CAACge,QAAQ,CAAC;IAC3B,CAAC,CAAC;IACF3W,YAAY,CAACyW,cAAc,EAAE;MAC3BpV,OAAO,EAAEqV,UAAU;MACnB1qB;IACF,CAAC,CAAC;EACJ;EAEA,SAAS8I,WAAWA,CAAC8hB,OAAgB,EAAE;IACrC,MAAMC,mBAAmB,GAAG,IAAItpB,GAAG,CAACsnB,gBAAgB,CAAC;IACrD,IAAIgC,mBAAmB,CAAC/oB,GAAG,CAAC8oB,OAAO,CAAC,EAAE;MACpCC,mBAAmB,CAACvb,MAAM,CAACsb,OAAO,CAAC;IACrC,CAAC,MAAM;MACLC,mBAAmB,CAAC9G,GAAG,CAAC6G,OAAO,CAAC;IAClC;IACA9B,wBAAwB,CAAC+B,mBAAmB,CAAC;EAC/C;EAEA,SAASxK,SAASA,CAChBze,GAAQ,EACR;IACEyB,GAAG;IACH+Y,QAAQ;IACRH,WAAW;IACXC,iBAAiB;IACjBC,iBAAiB;IACjBtG,WAAW;IACX5V,qBAAqB;IACrB4b,aAAa;IACbC,kBAAkB;IAClB3H,oBAAoB;IACpB4H,kBAAkB;IAClBC,sBAAsB;IACtB,GAAG8O;EACkB,CAAC,EACxB;IACA,IAAIpB,UAAU,CAACrmB,GAAG,CAAC,EAAE;MACnB,MAAM;QAAEuR;MAAc,CAAC,GAAGvR,GAAG;MAC7B,oBACER,GAAA,CAACulB,YAAU;QAAA,GAEL0C,QAAQ;QACZ,iBAAelK,4BAA4B,GAAGhM,aAAa,GAAG,CAAE;QAChEvR,GAAG,EAAEA,GAAI;QACT0kB,OAAO,EAAEA,OAAQ;QACjBjf,WAAW,EAAEkgB;MAAkB,GAL1BpnB,GAMN,CAAC;IAEN;IAEA,IAAIkd,YAAY,GAAGgM,QAAQ,CAAC,eAAe,CAAC;IAC5C,MAAMX,iBAAiB,GAAGF,oBAAoB,CAAC5mB,GAAG,CAAC;IACnD,IAAI8mB,iBAAiB,KAAK3pB,SAAS,EAAE;MACnC,MAAM;QAAEoU,aAAa;QAAEyS;MAAU,CAAC,GAAG8C,iBAAiB,CAAC,CAAC,CAAC;MACzD,MAAMC,UAAU,GAAG/C,SAAS,CAACpD,OAAO,CAAC5gB,GAAG,CAAC;MACzCyb,YAAY,GAAGlK,aAAa,GAAGgM,4BAA4B,GAAGwJ,UAAU,GAAG,CAAC;IAC9E;IAEA,OAAOrB,YAAY,CAACnnB,GAAG,EAAE;MACvB,GAAGkpB,QAAQ;MACX,eAAe,EAAEhM,YAAY;MAC7Bzb,GAAG;MACH+Y,QAAQ;MACRH,WAAW;MACXC,iBAAiB;MACjBC,iBAAiB;MACjBtG,WAAW;MACX5V,qBAAqB;MACrB4b,aAAa;MACbC,kBAAkB;MAClB3H,oBAAoB;MACpB4H,kBAAkB;MAClBC;IACF,CAAC,CAAC;EACJ;EAEA,oBACEnZ,GAAA,CAACqkB,UAAQ;IAAA,GACHpf,KAAK;IACTmP,IAAI,EAAC,UAAU;IACf,eACE,EAAAiS,SAAS,GAAG,CAAC,IAAIphB,KAAK,CAACnE,cAAc,EAAErB,MAAM,IAAI,CAAC,CAAC,IAAIwF,KAAK,CAAClE,iBAAiB,EAAEtB,MAAM,IAAI,CAAC,CAC5F;IACDiP,GAAG,EAAEA,GAAI;IACTpO,OAAO,EAAEA,OAAQ;IACjBC,IAAI,EAAEA,IAAY;IAClBoP,SAAS,EAAEA,SAAU;IACrByM,YAAY,EAAEA,YAAa;IAC3BjL,YAAY,EAAEwW,gBAAiB;IAC/BjL,YAAY,EAAEA,YAAa;IAC3BC,oBAAoB,EAAEA,oBAAqB;IAC3CC,aAAa,EAAE1W,aAAc;IAC7B+W,SAAS,EAAE;MACT,GAAGA,SAAS;MACZO;IACF;EAAE,CACH,CAAC;AAEN;AAEA,SAAS0J,eAAeA,CAACgB,GAAY,EAA6B;EAChE,OAAOC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC;AAC3B;AAEA,MAAAG,cAAA,GAAe,aAAA1O,UAAU,CAAC6L,YAAY,CAAC;AC5avC,MAAM8C,2BAA2B,GA2BhC;AAEM,MAAMC,mBAAmB,GAAI,mBAAkBD,2BAA6B;AAEnF,SAASE,kBAAkBA,CAACC,KAA8B,EAAE;EAC1DA,KAAK,EAAElI,KAAK,EAAE;EACdkI,KAAK,EAAEC,MAAM,EAAE;AACjB;AAEe,SAASC,UAAUA,CAAoB;EACpDnoB,GAAG;EACHrD,MAAM;EACN6V,WAAW;EACXO;AACsC,CAAC,EAAE;EACzC,oBACEvT,GAAA;IACEC,SAAS,EAAEsoB,mBAAoB;IAC/B7Z,GAAG,EAAE8Z,kBAAmB;IACxB1hB,KAAK,EAAEtG,GAAG,CAACrD,MAAM,CAAC4B,GAAG,CAAqC;IAC1DiG,QAAQ,EAAG/G,KAAK,IAAK+U,WAAW,CAAC;MAAE,GAAGxS,GAAG;MAAE,CAACrD,MAAM,CAAC4B,GAAG,GAAGd,KAAK,CAACkB,MAAM,CAAC2H;IAAM,CAAC,CAAE;IAC/E8hB,MAAM,EAAEA,CAAA,KAAMrV,OAAO,CAAC,IAAI,EAAE,KAAK;EAAE,CACnC;AAEN"},"metadata":{},"sourceType":"module","externalDependencies":[]}